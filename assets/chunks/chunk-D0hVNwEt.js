import{d6 as v,dv as W,hz as A,aN as X,sG as D,sH as I,eN as h,H as m,n as l,jV as Y,sI as Z,sJ as ee,sK as se,sL as te,sM as oe,sN as ne,sO as re,B as ae,jX as ie,sP as ce,sQ as _,bD as le,sR as ue,sS as pe,sT as fe,gV as me,dS as de,jK as ge,sU as he,sV as ye,A as we}from"./chunk-DadqOv6U.js";import{f as Pe,b as Te,y as be,i as x,n as E}from"./chunk-CB4WRstQ.js";import{i as ve,n as Ae}from"./chunk-3UdQtoLA.js";import"./chunk-CPKck_yD.js";const $={uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function y(t,e=o=>{},s){return new $e(t,e,s)}let $e=class{constructor(e,s=n=>{},o){if(this.onProgress=s,this.taskName=o,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,typeof e=="number"){this._weights={};for(let n=0;n<e;n++){const r=n,a=1/e;this._weights[r]=a,this._progressMap.set(r,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[s,o]of this._progressMap.entries())e+=o*this._weights[s];if(e===1&&v("enable-feature:esri-3dofl-upload-timings")){const s=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${s} sec`);for(const[o,n]of this._timingsMap){const r=Math.round(n.end-n.start)/1e3,a=Math.round(r/s*100);console.log(this.taskName??"Task",{stepKey:o,stepTime:r,relativeTime:a})}}this.onProgress(e)}setProgress(e,s){if(this._progressMap.set(e,s),v("enable-feature:esri-3dofl-upload-timings")){const o=performance.now();this._startTime??=o;const n=W(this._timingsMap,e,(()=>({start:o,end:0})));s===1&&(n.end=o)}this.emitProgress()}simulate(e,s){return R((o=>this.setProgress(e,o)),s)}makeOnProgress(e){return s=>this.setProgress(e,s)}};function R(t=s=>{},e=De){const s=performance.now();t(0);const o=setInterval((()=>{const n=performance.now()-s,r=1-Math.exp(-n/e);t(r)}),Fe);return X((()=>{clearInterval(o),t(1)}))}function je(t,e=Ne){return D(I(t*k/e))}function Me(t,e=Se){return D(I(t*k/e))}const Ne=10,Se=10,k=8e-6,Fe=A(50),De=A(1e3),C=1e6,F=20*C,Ie=2e9,_e=3;async function xe({data:t,name:e,description:s},o,n){let r=null;try{const a=h(o,"uploads"),i=h(a,"info"),{data:u}=await m(i,{query:{f:"json"},responseType:"json"});l(n);const d=Y(o),g=u.maxUploadFileSize*C,f=d?Ie:g,c=d?Math.min(F,g):F;if(t.size>f)throw new Error("Data too large");const z=h(a,"register"),{data:j}=await m(z,{query:{f:"json",itemName:Ee(e),description:s},responseType:"json",method:"post"});if(l(n),!j.success)throw new Error("Registration failed");const{itemID:L}=j.item;r=h(a,L);const H=h(r,"uploadPart"),M=Math.ceil(t.size/c),w=new Array;for(let p=0;p<M;++p)w.push(t.slice(p*c,Math.min((p+1)*c,t.size)));const P=w.slice().reverse(),N=new Array,G=y(M,n?.onProgress,"uploadItem"),J=async()=>{for(;P.length!==0;){const p=w.length-P.length,T=P.pop(),b=new FormData,K=G.simulate(p,je(T.size));try{b.append("f","json"),b.append("file",T),b.append("partId",`${p}`);const{data:Q}=await m(H,{timeout:0,body:b,responseType:"json",method:"post"});if(l(n),!Q.success)throw new Error("Part upload failed")}finally{K.remove()}}};for(let p=0;p<_e&&P.length!==0;++p)N.push(J());await Promise.all(N);const V=h(r,"commit"),{data:S}=await m(V,{query:{f:"json",parts:w.map(((p,T)=>T)).join(",")},responseType:"json",method:"post"});if(l(n),!S.success)throw new Error("Commit failed");return S.item}catch(a){if(r!=null){const i=h(r,"delete");await m(i,{query:{f:"json"},responseType:"json",method:"post"})}throw a}}function Ee(t){return t.replaceAll("/","_").replaceAll("\\","_")}async function is(t,e,s){const o=t.length;if(!o)return s?.onProgress?.(1),[];const n=y(o,s?.onProgress,"uploadAssets");return Promise.all(t.map(((r,a)=>Re(r,e,{...s,onProgress:n.makeOnProgress(a)}))))}async function Re(t,{layer:e,ongoingUploads:s},o){const n=s.get(t);if(n)return n;if(!Ze(e))throw new Z;if(ke(t,e))return o?.onProgress?.(1),t;const r=Ce(t,e,o);s.set(t,r);try{await r}finally{s.delete(t)}return t}function ke(t,e){const{parsedUrl:s}=e;return s!=null&&t.metadata.externalSources.some((o=>Pe(o,s)))}async function Ce(t,e,s){const{metadata:o}=t,{displaySource:n}=o,r=U(n?.source,e,{checkForConversionRequired:v("enable-feature:georeferenced-uploads")}),a=r!=null?Ue(r,e,s):o.externalSources.length>0?Oe(t,e,s):Be(t,e,s),i=await a;return l(s),t.addExternalSources([i]),t}async function Ue(t,e,s){return{source:{type:"service",assets:await O(t,e,s)},original:!0,unitConversionDisabled:!0}}async function Oe(t,e,s){const o=q(e),{externalSources:n}=t.metadata,r=ze(n,e);if(!r)throw new te;const a=y($.uploadConvertibleSource,s?.onProgress,"uploadConvertibleSource"),i={type:"service",assets:await O(r,e,{onProgress:a.makeOnProgress("uploadEditSource")})};t.addExternalSources([{source:i,original:!0}]);const u=r.reduce(((g,{asset:f})=>f instanceof File?g+f.size:g),0),d=a.simulate("serviceAssetsToGlb",Me(u));try{const{source:g,transform:f,origin:c}=await Qe(i,e,o);return t.transform=f,c&&(t.metadata.georeferenced=!0,s?.useAssetOrigin&&(t.vertexSpace.origin=[c.x,c.y,c.z??0],t.spatialReference=c.spatialReference)),{source:g,unitConversionDisabled:!0}}finally{d.remove()}}async function Be(t,e,s){const o=y($.uploadLocalMesh,s?.onProgress,"uploadLocalMesh"),n=qe(t,e,{...s,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:{type:"service",assets:await B([n],e,{...s,onProgress:o.makeOnProgress("uploadAssetBlobs")})},extent:t.extent.clone(),original:!0}}async function qe(t,e,s){const o=q(e),n=await t.load(s),r=await n.toBinaryGLTF({origin:n.origin,signal:s?.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return l(s),{blob:new Blob([r],{type:"model/gltf-binary"}),assetName:`${ae()}.glb`,assetType:o}}function ze(t,e){for(const s of t){const o=U(s.source,e);if(o)return o}return null}function U(t,{infoFor3D:e},s={}){if(!t)return null;const o=Te(t);if(!o)return null;const{supportedFormats:n,editFormats:r}=e,a=new Array,i=ee(e),u=se(e);let d=!1;for(const g of o){const f=Le(g,n);if(!f)return null;const{assetType:c}=f;if(s.checkForConversionRequired&&(c===i||c===u))return null;r.includes(c)&&(d=!0),a.push(f)}return d?a:null}function Le(t,e){const s=be(t,e);return s?{asset:t,assetType:s}:null}async function O(t,e,s){return B(t.map((o=>He(o,s))),e,s)}async function B(t,e,s){const o=y($.uploadAssetBlobs,s?.onProgress,"uploadAssetBlobs"),n=await Je(t,e,{...s,onProgress:o.makeOnProgress("prepareAssetItems")});l(s);const r=n.map((({item:i})=>i)),{uploadResults:a}=await Ve(r,e,{...s,onProgress:o.makeOnProgress("uploadAssetItems")});return l(s),t.map(((i,u)=>Ke(n[u],a[u],e)))}async function He(t,e){const{asset:s,assetType:o}=t;if(s instanceof File)return{blob:s,assetName:s.name,assetType:o};const n=await s.toBlob(e);return l(e),{blob:n,assetName:s.assetName,assetType:o}}async function Ge(t,e,s){const{blob:o,assetType:n,assetName:r}=t;let a=null;try{const i=await xe({data:o,name:r},e.url,s);l(s),a={assetType:n,assetUploadId:i.itemID}}catch(i){de(i),es().warnOnce(`Service ${e.url} does not support the REST Uploads API.`)}if(!a){const i=await ge(o);if(l(s),!i.isBase64)throw new he;a={assetType:n,assetData:i.data}}if(!a)throw new ye;return{item:a,assetName:r}}function Je(t,e,s){const o=y(t.length,s?.onProgress,"prepareAssetItems");return Promise.all(t.map((async(n,r)=>{const a=Ge(await n,e,{...s,onProgress:o.makeOnProgress(r)});return l(s),a})))}async function Ve(t,e,s){const o=R(s?.onProgress);try{const n=await m(h(e.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(t)},method:"post",responseType:"json"});if(l(s),n.data.uploadResults.length!==t.length)throw new pe(t.length,n.data.uploadResults.length);return n.data}finally{o.remove()}}function Ke(t,e,s){const{success:o}=e;if(!o){const{error:d}=e;throw new fe(t.assetName,d)}const{assetHash:n}=e,{assetName:r,item:{assetType:a}}=t,{infoFor3D:{supportedFormats:i}}=s,u=me(a,i);if(!u)throw new _(a);return new x(r,u,[new E(`${s.parsedUrl.path}/assets/${n}`,n)])}async function Qe({assets:t},e,s){const o=t.map((({assetName:r,parts:a})=>({assetName:r,assetHash:a[0].partHash})));let n;try{const r=h(e.parsedUrl.path,"convert3D"),a=e.capabilities?.operations.supportsAsyncConvert3D;n=(await(a?Ye:Xe)(r,{query:{f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:s,async:a},responseType:"json",timeout:0})).data}catch{throw new re}return We(e,n)}function We(t,e){const s={source:{type:"service",assets:e.assets.map((o=>{const n=ce(o.contentType,t.infoFor3D.supportedFormats);if(!n)throw new _(n);return new x(o.assetName,o.contentType,[new E(o.assetURL,o.assetHash)])}))},origin:void 0,transform:void 0};if(v("enable-feature:georeferenced-uploads")&&e.transform){if(s.transform=ve(e.transform),e.spatialReference){const o=le.fromJSON(e.spatialReference);s.origin=Ae(e.transform,o)}}else s.transform=ue(t.spatialReference);return s}function Xe(t,e){return m(t,e)}async function Ye(t,e){const s=(await m(t,e)).data.statusUrl;for(;;){const o=(await m(s,{query:{f:"json"},responseType:"json"})).data;switch(o.status){case"Completed":return m(o.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(o.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await ie(ss)}}function Ze(t){return!!t.infoFor3D&&!!t.url}function q({infoFor3D:t}){const e=oe(t);if(!e)throw new ne;return e}function es(){return we.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const ss=A(1e3);export{is as uploadAssets};

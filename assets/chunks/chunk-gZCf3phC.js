import{i2 as m,df as f,z as w,V as y,L as _,aN as g,aJ as r,aq as o,e2 as V,ai as v,al as C}from"./chunk-Dx0VeHfy.js";import{t as c}from"./chunk-7LTMrW3O.js";import{O as d}from"./chunk-Cv0n4_7q.js";import"./chunk-DHAEDrTs.js";import"./chunk-C8aUyMXt.js";import"./chunk-Dn-oRunx.js";import"./chunk-eIL3O1GI.js";import"./chunk-BaXc6uIe.js";import"./chunk-BELTRu_k.js";import"./chunk-Bb99Mywd.js";import"./chunk-QXap_35O.js";import"./chunk-JV9XATMi.js";import"./chunk-CUzevAry.js";import"./chunk-BfAy0xZC.js";import"./chunk-BFLErLYb.js";import"./chunk-C8owJ5SX.js";import"./chunk-CKwt2uXH.js";import"./chunk-Cb9v9vOk.js";import"./chunk-BOVoQ24I.js";import"./chunk-CpAIJfj0.js";import"./chunk-zNZJ-S-7.js";import"./chunk-wfo6GHsv.js";const u="sublayers",n="layerView",H=new Set(["default"]);let p=class extends m(f){constructor(){super(...arguments),this._highlightIds=new Map}*graphicsViews(){this._graphicsViewsFeatureCollectionMap==null?this._graphicsViews==null?yield*[]:yield*this._graphicsViews:yield*this._graphicsViewsFeatureCollectionMap.keys()}async hitTest(i,t){return Array.from(this.graphicsViews(),(e=>{const s=e.hitTest(i);if(this._graphicsViewsFeatureCollectionMap!=null){const h=this._graphicsViewsFeatureCollectionMap.get(e);for(const a of s)!a.popupTemplate&&h.popupTemplate&&(a.popupTemplate=h.popupTemplate),a.sourceLayer=a.layer=this.layer}return s})).flat().map((e=>({type:"graphic",graphic:e,layer:this.layer,mapPoint:i})))}highlight(i,t="default"){let e;typeof i=="number"?e=[i]:i instanceof w?e=[i.uid]:Array.isArray(i)&&i.length>0?e=typeof i[0]=="number"?i:i.map((h=>h&&h.uid)):y.isCollection(i)&&(e=i.map((h=>h&&h.uid)).toArray());const s=e?.filter(_);return s?.length?(this._addHighlight(s),g((()=>this._removeHighlight(s)))):g()}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(e!=null&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of e){const h=new c(this.view.featuresTilingScheme),a=new d({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:t,container:h});this._graphicsViewsFeatureCollectionMap.set(a,s),this.container.addChild(a.container),this.addHandles([r((()=>s.visible),(l=>a.container.visible=l),o),r((()=>a.updating),(()=>this.notifyChange("updating")),o)],n)}this._updateHighlight()}else this.layer.sublayers!=null&&this.addHandles(V((()=>this.layer.sublayers),"change",(()=>this._createGraphicsViews()),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),u)}detach(){this._destroyGraphicsViews(),this.removeHandles(u)}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.removeHandles(n);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),this.layer.sublayers==null)return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const s of this.layer.sublayers){const h=new c(this.view.featuresTilingScheme);h.fadeTransitionEnabled=!0;const a=new d({view:t,graphics:s.graphics,requestUpdateCallback:e,container:h});this.addHandles([s.on("graphic-update",a.graphicUpdateHandler),r((()=>s.visible),(l=>a.container.visible=l),o),r((()=>a.updating),(()=>this.notifyChange("updating")),o)],n),this.container.addChild(a.container),i.push(a)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys()),t=this._getHighlightBits(H.values());for(const e of this.graphicsViews())e.setHighlight(i.map((s=>({objectId:s,highlightFlags:t}))))}};p=v([C("esri.views.2d.layers.MapNotesLayerView2D")],p);const P=p;export{P as default};

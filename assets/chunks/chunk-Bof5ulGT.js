import{es as y,eb as h,dO as c,dP as u,dQ as m,dR as v,ec as f,ed as g,e2 as S,aK as w,ee as _,dS as T,et as n,s as a,ek as d,el as I,A as p,em as L,aL as x,ai as i,aj as s,eu as $,ev as b,ew as O,ex as A,en as M,dU as P,eo as V,al as j}from"./chunk-Dx0VeHfy.js";import{n as l}from"./chunk-CIPXswNh.js";import"./chunk-DHAEDrTs.js";import"./chunk-BBfJW5ip.js";let t=class extends y(h(c(u(m(v(f(g(x)))))))){constructor(...e){super(...e),this.geometryType="mesh",this.operationalLayerType="IntegratedMeshLayer",this.type="integrated-mesh",this.nodePages=null,this.materialDefinitions=null,this.textureSetDefinitions=null,this.geometryDefinitions=null,this.serviceUpdateTimeStamp=null,this.profile="mesh-pyramids",this.modifications=null,this.path=null,this.definitionExpression=null}initialize(){this.addHandles(S((()=>this.modifications),"after-changes",(()=>this.modifications=this.modifications),w))}normalizeCtorArgs(e,o){return typeof e=="string"?{url:e,...o}:e}readModifications(e,o,r){this._modificationsSource={url:_(e,r),context:r}}set elevationInfo(e){e!=null&&e.mode!=="absolute-height"||this._set("elevationInfo",e),this._validateElevationInfo(e)}async load(e){return this.addResolvingPromise(this._doLoad(e)),this}async _doLoad(e){const o=e?.signal;try{await this.loadFromPortal({supportedTypes:["Scene Service"]},e)}catch(r){T(r)}if(await this._fetchService(o),this._modificationsSource!=null){const r=await l.fromUrl(this._modificationsSource.url,this.spatialReference,e);this.setAtOrigin("modifications",r,this._modificationsSource.context.origin),this._modificationsSource=null}await this._fetchIndexAndUpdateExtent(this.nodePages,o)}beforeSave(){if(this._modificationsSource!=null)return this.load().then((()=>{}),(()=>{}))}async saveAs(e,o){return this._debouncedSaveOperations(n.SAVE_AS,{...o,getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"integrated-mesh"},e)}async save(){const e={getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"integrated-mesh"};return this._debouncedSaveOperations(n.SAVE,e)}validateLayer(e){if(e.layerType&&e.layerType!=="IntegratedMesh")throw new a("integrated-mesh-layer:layer-type-not-supported","IntegratedMeshLayer does not support this layer type",{layerType:e.layerType});if(isNaN(this.version.major)||isNaN(this.version.minor))throw new a("layer:service-version-not-supported","Service version is not supported.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"});if(this.version.major>1)throw new a("layer:service-version-too-new","Service version is too new.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"})}_getTypeKeywords(){return["IntegratedMeshLayer"]}_validateElevationInfo(e){const o="Integrated mesh layers";d(p.getLogger(this),I(o,"absolute-height",e)),d(p.getLogger(this),L(o,e))}};i([s({type:String,readOnly:!0})],t.prototype,"geometryType",void 0),i([s({type:["show","hide"]})],t.prototype,"listMode",void 0),i([s({type:["IntegratedMeshLayer"]})],t.prototype,"operationalLayerType",void 0),i([s({json:{read:!1},readOnly:!0})],t.prototype,"type",void 0),i([s({type:$,readOnly:!0})],t.prototype,"nodePages",void 0),i([s({type:[b],readOnly:!0})],t.prototype,"materialDefinitions",void 0),i([s({type:[O],readOnly:!0})],t.prototype,"textureSetDefinitions",void 0),i([s({type:[A],readOnly:!0})],t.prototype,"geometryDefinitions",void 0),i([s({readOnly:!0})],t.prototype,"serviceUpdateTimeStamp",void 0),i([s({type:l,clonable:e=>e.clone()}),M({origins:["web-scene","portal-item"],type:"resource",prefix:"modifications"})],t.prototype,"modifications",void 0),i([P(["web-scene","portal-item"],"modifications")],t.prototype,"readModifications",null),i([s(V)],t.prototype,"elevationInfo",null),i([s({type:String,json:{origins:{"web-scene":{read:!0,write:!0},"portal-item":{read:!0,write:!0}},read:!1}})],t.prototype,"path",void 0),t=i([j("esri.layers.IntegratedMeshLayer")],t);const N=t;export{N as default};

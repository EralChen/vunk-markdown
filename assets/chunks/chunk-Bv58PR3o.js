import{p as w}from"./chunk-DFHavFWt.js";import{_ as l,a4 as B,a5 as S,an as z,am as F,a6 as P,a7 as W,az as v,aR as T,a9 as A,as as D,aA as _,aB as E,l as x}from"./chunk-BkVevS4i.js";import{p as N}from"./chunk-EFiz88Wp.js";/* empty css              *//* empty css              */import"./chunk-DJw_0V8B.js";import"./chunk-C39j8-it.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-BnKKmNrP.js";import"./chunk-StKSnbLF.js";import"./chunk-BCaUP4eh.js";var C={packet:[]},h=structuredClone(C),L=E.packet,Y=l(()=>{const t=v({...L,..._().packet});return t.showBits&&(t.paddingY+=10),t},"getConfig"),I=l(()=>h.packet,"getPacket"),M=l(t=>{t.length>0&&h.packet.push(t)},"pushWord"),O=l(()=>{D(),h=structuredClone(C)},"clear"),u={pushWord:M,getPacket:I,getConfig:Y,clear:O,setAccTitle:W,getAccTitle:P,setDiagramTitle:F,getDiagramTitle:z,getAccDescription:S,setAccDescription:B},R=1e4,G=l(t=>{w(t,u);let e=-1,o=[],p=1;const{bitsPerRow:n}=u.getConfig();for(let{start:r,end:a,label:m}of t.blocks){if(a&&a<r)throw new Error(`Packet block ${r} - ${a} is invalid. End must be greater than start.`);if(r!==e+1)throw new Error(`Packet block ${r} - ${a??r} is not contiguous. It should start from ${e+1}.`);for(e=a??r,x.debug(`Packet block ${r} - ${e} with label ${m}`);o.length<=n+1&&u.getPacket().length<R;){const[f,s]=H({start:r,end:a,label:m},p,n);if(o.push(f),f.end+1===p*n&&(u.pushWord(o),o=[],p++),!s)break;({start:r,end:a,label:m}=s)}}u.pushWord(o)},"populate"),H=l((t,e,o)=>{if(t.end===void 0&&(t.end=t.start),t.start>t.end)throw new Error(`Block start ${t.start} is greater than block end ${t.end}.`);return t.end+1<=e*o?[t,void 0]:[{start:t.start,end:e*o-1,label:t.label},{start:e*o,end:t.end,label:t.label}]},"getNextFittingBlock"),K={parse:l(async t=>{const e=await N("packet",t);x.debug(e),G(e)},"parse")},U=l((t,e,o,p)=>{const n=p.db,r=n.getConfig(),{rowHeight:a,paddingY:m,bitWidth:f,bitsPerRow:s}=r,b=n.getPacket(),i=n.getDiagramTitle(),d=a+m,c=d*(b.length+1)-(i?0:a),g=f*s+2,k=T(e);k.attr("viewbox",`0 0 ${g} ${c}`),A(k,c,g,r.useMaxWidth);for(const[$,y]of b.entries())X(k,y,$,r);k.append("text").text(i).attr("x",g/2).attr("y",c-d/2).attr("dominant-baseline","middle").attr("text-anchor","middle").attr("class","packetTitle")},"draw"),X=l((t,e,o,{rowHeight:p,paddingX:n,paddingY:r,bitWidth:a,bitsPerRow:m,showBits:f})=>{const s=t.append("g"),b=o*(p+r)+r;for(const i of e){const d=i.start%m*a+1,c=(i.end-i.start+1)*a-n;if(s.append("rect").attr("x",d).attr("y",b).attr("width",c).attr("height",p).attr("class","packetBlock"),s.append("text").attr("x",d+c/2).attr("y",b+p/2).attr("class","packetLabel").attr("dominant-baseline","middle").attr("text-anchor","middle").text(i.label),!f)continue;const g=i.end===i.start,k=b-2;s.append("text").attr("x",d+(g?c/2:0)).attr("y",k).attr("class","packetByte start").attr("dominant-baseline","auto").attr("text-anchor",g?"middle":"start").text(i.start),g||s.append("text").attr("x",d+c).attr("y",k).attr("class","packetByte end").attr("dominant-baseline","auto").attr("text-anchor","end").text(i.end)}},"drawWord"),j={draw:U},q={byteFontSize:"10px",startByteColor:"black",endByteColor:"black",labelColor:"black",labelFontSize:"12px",titleColor:"black",titleFontSize:"14px",blockStrokeColor:"black",blockStrokeWidth:"1",blockFillColor:"#efefef"},J=l(({packet:t}={})=>{const e=v(q,t);return`
	.packetByte {
		font-size: ${e.byteFontSize};
	}
	.packetByte.start {
		fill: ${e.startByteColor};
	}
	.packetByte.end {
		fill: ${e.endByteColor};
	}
	.packetLabel {
		fill: ${e.labelColor};
		font-size: ${e.labelFontSize};
	}
	.packetTitle {
		fill: ${e.titleColor};
		font-size: ${e.titleFontSize};
	}
	.packetBlock {
		stroke: ${e.blockStrokeColor};
		stroke-width: ${e.blockStrokeWidth};
		fill: ${e.blockFillColor};
	}
	`},"styles"),se={parser:K,db:u,renderer:j,styles:J};export{se as diagram};

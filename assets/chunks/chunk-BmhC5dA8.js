import{kZ as D,aG as T,aM as j,V as q,g7 as F,lu as G,c8 as V,U as S,d0 as E,af as i,ag as s,g8 as U,ai as H,cD as A,dH as k,dK as I,aI as J,e2 as K}from"./chunk-CuaFhuP3.js";import{c as N}from"./chunk-DMTlERZL.js";import{T as Y}from"./chunk-Dpk1TJd9.js";import"./chunk-iOPJXyP1.js";import"./chunk-DGmg3LSc.js";import"./chunk-NDm1DwyJ.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */const z=q.ofType(N);let o=class extends D{constructor(e){super(e),this.type="viewshed",this._extent=null}initialize(){this.addHandles(T((()=>this._computeExtent()),(e=>{e.pending==null&&(this._extent=e.extent)}),j))}get viewsheds(){return this._get("viewsheds")||new z}set viewsheds(e){this._set("viewsheds",F(e,this.viewsheds,z))}get spatialReference(){for(const e of this.viewsheds)if(e.observer!=null)return e.observer.spatialReference;return null}get extent(){return this._extent}get valid(){return this.viewsheds.every((e=>e.valid))}async waitComputeExtent(){const e=this._computeExtent();e.pending!=null&&await e.pending}_computeExtent(){const{spatialReference:e}=this;if(e==null)return{pending:null,extent:null};const l=this.viewsheds.filter((r=>r.observer!=null)),u=l.map((r=>r.observer)).toArray(),p=G(u,e);return p.pending!=null?{pending:p.pending,extent:null}:{pending:null,extent:p.geometries.map(((r,d)=>{const g=l.at(d);return r!=null&&g!=null?this._computeViewshedExtent(this.viewsheds.at(d),r):null})).filter((r=>r!=null)).reduce(((r,d)=>Z(r,d)),null)}}_computeViewshedExtent(e,l){const{farDistance:u,heading:p,tilt:r,horizontalFieldOfView:d,verticalFieldOfView:g}=e,{spatialReference:R}=l,x=d/2,$=g/2,b=u/R.metersPerUnit,P=[V.normalize(p-x),p,V.normalize(p+x)],h=S.fromPoint(l),v=w=>{const m=P.map((a=>V.normalize(a-w)));if(m[0]>m[2]||d===360)return b;const c=m.map((a=>Math.abs(a>180?360-a:a))).reduce(((a,f)=>a>f?f:a));return c>90?0:b*Math.cos(E(c))};h.xmax+=v(90),h.xmin-=v(-90),h.ymax+=v(0),h.ymin-=v(180);const y=l.z;if(y!=null){let w=y,m=y;const c=r-90,a=A(c+$,-90,90),f=A(c-$,-90,90),O=R?.isGeographic?u:b;w+=O*_(a),m+=O*_(f);const C=L($)*O,M=_(c)*C*(1-L(x));r<90&&(w-=M),r>90&&(m-=M),h.zmax=Math.max(w,y),h.zmin=Math.min(m,y)}return h}equals(e){return this===e||super.equals(e)&&Y(this.viewsheds.toArray(),e.viewsheds.toArray(),((l,u)=>l.equals(u)))}clear(){this.viewsheds.removeAll()}};function Z(t,e){return t==null?e:e==null?t:t.union(e)}function L(t){return Math.cos(E(t))}function _(t){return Math.sin(E(t))}i([s({type:["viewshed"]})],o.prototype,"type",void 0),i([s({cast:U,type:z,nonNullable:!0})],o.prototype,"viewsheds",null),i([s({readOnly:!0})],o.prototype,"spatialReference",null),i([s()],o.prototype,"_extent",void 0),i([s()],o.prototype,"extent",null),i([s({readOnly:!0})],o.prototype,"valid",null),o=i([H("esri.analysis.ViewshedAnalysis")],o);let n=class extends k(I(J)){constructor(t){super(t),this.type="viewshed",this.operationalLayerType="ViewshedLayer",this.source=new o,this.opacity=1}initialize(){this.addHandles(T((()=>this.source),((t,e)=>{e!=null&&e.parent===this&&(e.parent=null),t!=null&&(t.parent=this)}),j))}async load(){return this.addResolvingPromise(this.source.waitComputeExtent()),this}get spatialReference(){return this.source.spatialReference}get fullExtent(){return this.source.extent}releaseAnalysis(t){this.source===t&&(this.source=new o)}get analysis(){return this.source}set analysis(t){this.source=t}get viewsheds(){return this.source.viewsheds}set viewsheds(t){this.source.viewsheds=t}writeViewsheds(t,e,l,u){e.viewsheds=t.filter((p=>p.valid)).toJSON(u)}};i([s({json:{read:!1},readOnly:!0})],n.prototype,"type",void 0),i([s({type:["ViewshedLayer"]})],n.prototype,"operationalLayerType",void 0),i([s({type:o,nonNullable:!0})],n.prototype,"source",void 0),i([s({readOnly:!0})],n.prototype,"spatialReference",null),i([s({readOnly:!0})],n.prototype,"fullExtent",null),i([s({readOnly:!0,json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],n.prototype,"opacity",void 0),i([s({type:["show","hide"]})],n.prototype,"listMode",void 0),i([s({type:q.ofType(N),json:{write:{ignoreOrigin:!0},origins:{"web-scene":{write:{ignoreOrigin:!0}}}}})],n.prototype,"viewsheds",null),i([K("web-scene","viewsheds")],n.prototype,"writeViewsheds",null),n=i([H("esri.layers.ViewshedLayer")],n);const De=n;export{De as default};

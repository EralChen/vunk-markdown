import{hl as d,hm as S}from"./chunk-BLrLWCUc.js";import{P as G,j as P,a as f,f as E,d as v}from"./chunk-BALWqwPe.js";import{w}from"./chunk-CSov4C1Q.js";import{G as T,a4 as L,N as C,o as X,p as D,a5 as N,m as Y,a6 as b,K as j,L as q}from"./chunk-DKexkKU1.js";import"./chunk-CWUYlh1e.js";import"./chunk-BDqMgIU1.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-B92kdZ15.js";class Tt{getOperatorType(){return 10311}supportsCurves(){return!0}accelerateGeometry(e,r,s){return!1}canAccelerateGeometry(e){return!1}execute(e,r,s,n){if(s===4)return new w().execute(e,r,n);if(r.getCoordinateSystemType()===0&&G(""),P(e),e.isEmpty()||e.getDimension()<1)return 0;const m=r.getGCS(),o=T();m.querySpheroidData(o);const a=o.majorSemiAxis,l=o.e2,c=m.getUnit().getUnitToBaseFactor();let t;const i=e.getGeometryType();if(i===f.enumPolygon?t=e.getBoundary():i===f.enumEnvelope?t=L(e):E(i)?(t=new C({vd:e.getDescription()}),t.addSegment(e,!0)):t=e,t.hasNonLinearSegments()&&(t=new X().execute(t,0,r.getTolerance(0),0,n)),m!==r){const p=r.getSRToGCSTransform();if(r.isPannable()){t=D(t,r),i===f.enumPolyline&&t===e&&(t=e.clone());const h=new v;r.getPannableExtent().queryIntervalX(h);for(let u=0,y=t.getPointCount();u<y;u++){const g=t.getXY(u);g.x=N(g.x,h),t.setXY(u,g)}}const x=t.createInstance();t=b(p,t,x,n)?x:new Y().execute(t,p,n)}return this._ExecuteMultiPathGeodeticLength(t,s,a,l,c)}_ExecuteMultiPathGeodeticLength(e,r,s,n,m){const o={stack:[],error:void 0,hasError:!1};try{const a=d(o,new j,!1);let l=0;const c=e.querySegmentIterator();for(;c.nextPath();)for(;c.hasNextSegment();){const t=c.nextSegment(),i=t.getStartXY(),p=t.getEndXY();i.scale(m),p.scale(m),q.geodeticDistance(s,n,i.x,i.y,p.x,p.y,a,null,null,r),l+=a.val}return l}catch(a){o.error=a,o.hasError=!0}finally{S(o)}}}export{Tt as OperatorGeodeticLength};

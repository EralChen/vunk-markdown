import{gY as y,H as f,h4 as j,m4 as u,h0 as d,eG as R}from"./chunk-XGpVqsM_.js";import"./chunk-DyqHK6XP.js";import"./chunk-Dix477Sg.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-CrMA_peF.js";function h(e,o){const t=e.toJSON();return t.objectIds&&(t.objectIds=t.objectIds.join(",")),t.orderByFields&&(t.orderByFields=t.orderByFields.join(",")),t.outFields&&!o?.returnCountOnly?t.outFields.includes("*")?t.outFields="*":t.outFields=t.outFields.join(","):delete t.outFields,t.outSR&&(t.outSR=j(t.outSR)),t.dynamicDataSource&&(t.layer=JSON.stringify({source:t.dynamicDataSource}),delete t.dynamicDataSource),t}async function F(e,o,t){const i=await l(e,o,t),r=i.data,s=r.geometryType,n=r.spatialReference,a={};for(const c of r.relatedRecordGroups){const m={fields:void 0,geometryType:s,spatialReference:n,hasZ:!!r.hasZ,hasM:!!r.hasM,features:c.relatedRecords};if(c.objectId!=null)a[c.objectId]=m;else for(const p of Object.keys(c))p!=="relatedRecords"&&(a[c[p]]=m)}return{...i,data:a}}async function b(e,o,t){const i=await l(e,o,t,{returnCountOnly:!0}),r=i.data,s={};for(const n of r.relatedRecordGroups)n.objectId!=null&&(s[n.objectId]=n.count);return{...i,data:s}}async function l(e,o,t={},i){const r=y({...e.query,f:"json",...i,...h(o,i)});return f(e.path+"/queryRelatedRecords",{...t,query:{...t.query,...r}})}async function at(e,o,t){o=u.from(o);const i=d(e);return F(i,o,t).then((r=>{const s=r.data,n={};return Object.keys(s).forEach((a=>n[a]=R.fromJSON(s[a]))),n}))}async function ct(e,o,t){o=u.from(o);const i=d(e);return b(i,o,{...t}).then((r=>r.data))}export{at as executeRelationshipQuery,ct as executeRelationshipQueryForCount};

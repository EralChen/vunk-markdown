import{qi as f,af as c,qj as u,ai as S,qk as y,ql as d,qm as i,qn as x,qo as h,qp as O,U as n,qq as N,qr as J,$ as g,qs as q,qt as B,qu as P,qv as k,qw as v,qx as b,qy as w,qz as z,gb as T,pL as D}from"./chunk-CuaFhuP3.js";import{c as $}from"./chunk-DHQBnuIN.js";import"./chunk-Dpk1TJd9.js";import"./chunk-iOPJXyP1.js";import"./chunk-DGmg3LSc.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */var l;let m=l=class extends f{constructor(){super(...arguments),this.type="identity"}clone(){return new l}};c([u({IdentityXform:"identity"})],m.prototype,"type",void 0),m=l=c([S("esri.layers.support.rasterTransforms.IdentityTransform")],m);const I={GCSShiftXform:d,IdentityXform:m,PolynomialXform:y};function j(a){if(!a?.type)return null;const e=I[a?.type];if(e){const r=new e;return r.read(a),r}return null}class qt{convertVectorFieldData(t){const e=i.fromJSON(t.pixelBlock),r=x(e,t.type);return Promise.resolve(r!=null?r.toJSON():null)}computeStatisticsHistograms(t){const e=i.fromJSON(t.pixelBlock),r=h(e);return Promise.resolve(r)}async decode(t){const e=await O(t.data,t.options);return e&&e.toJSON()}symbolize(t){t.pixelBlock=i.fromJSON(t.pixelBlock),t.extent=t.extent?n.fromJSON(t.extent):null;const e=this.symbolizer.symbolize(t);return Promise.resolve(e!=null?e.toJSON():null)}async updateSymbolizer(t){this.symbolizer=N.fromJSON(t.symbolizerJSON),t.histograms&&this.symbolizer?.rendererJSON.type==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=J(t.rasterFunctionJSON)}async process(t){const e=this.rasterFunction.process({extent:n.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map((r=>r!=null?i.fromJSON(r):null)),primaryPixelSizes:t.primaryPixelSizes?.map((r=>r!=null?g.fromJSON(r):null)),primaryRasterIds:t.primaryRasterIds});return e!=null?e.toJSON():null}stretch(t){const e=this.symbolizer.simpleStretch(i.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(e?.toJSON())}estimateStatisticsHistograms(t){const e=q(i.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=B(i.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel??0,t.useBilinear===!1);return e&&e.forEach(((r,o)=>{e.set(o,r?.toJSON())})),Promise.resolve(e)}clipTile(t){const e=i.fromJSON(t.pixelBlock),r=P({...t,pixelBlock:e});return Promise.resolve(r?.toJSON())}async mosaicAndTransform(t){const e=t.srcPixelBlocks.map((p=>p?new i(p):null)),r=k(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let o,s=r;return t.coefs&&(s=v(r,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(o=b(t.destDimension,t.gcsGrid),s=w(s,t.isUV?"vector-uv":"vector-magdir",o)),{pixelBlock:s?.toJSON(),localNorthDirections:o}}async createFlowMesh(t,e){const r={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:o,indexData:s}=await z(t.meshType,t.simulationSettings,r,e.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:s.buffer},transferList:[o.buffer,s.buffer]}}async getProjectionOffsetGrid(t){const e=n.fromJSON(t.projectedExtent),r=n.fromJSON(t.srcBufferExtent);let o=null;t.datumTransformationSteps?.length&&(o=new $({steps:t.datumTransformationSteps})),await T();const s=t.rasterTransform?j(t.rasterTransform):null;return D({...t,projectedExtent:e,srcBufferExtent:r,datumTransformation:o,rasterTransform:s})}}export{qt as default};

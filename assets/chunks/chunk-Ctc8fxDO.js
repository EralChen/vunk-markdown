import{fJ as w,i2 as y,df as I,fU as T,i3 as V,i4 as H,b_ as v,i5 as C,fT as U,aN as m,aD as q,I as b,aI as o,i6 as f,i7 as P,A as Q,ai as c,aj as d,al as S}from"./chunk-Dx0VeHfy.js";import"./chunk-eIL3O1GI.js";import"./chunk-Bb99Mywd.js";import"./chunk-Cb9v9vOk.js";import"./chunk-Bkyg3LhE.js";import"./chunk-BELTRu_k.js";import"./chunk-ZxcpJQZ8.js";import"./chunk-BFLErLYb.js";import{O as G}from"./chunk-Cv0n4_7q.js";import{r as L,o as p,n as _}from"./chunk-BdjLR-8D.js";import{a as k}from"./chunk-BKg-aPEV.js";import{i as F}from"./chunk-BUMHfC2K.js";import{_ as z,P as A}from"./chunk-OIr8Hb6Q.js";import"./chunk-DHAEDrTs.js";import"./chunk-QXap_35O.js";import"./chunk-JV9XATMi.js";import"./chunk-CUzevAry.js";import"./chunk-BOVoQ24I.js";import"./chunk-BfAy0xZC.js";import"./chunk-CujHzHWW.js";import"./chunk-BB7dF6BO.js";import"./chunk-C8owJ5SX.js";import"./chunk-CKwt2uXH.js";import"./chunk-ebPXD2Fm.js";import"./chunk-CpAIJfj0.js";import"./chunk-zNZJ-S-7.js";import"./chunk-wfo6GHsv.js";import"./chunk-BaXc6uIe.js";import"./chunk-C8aUyMXt.js";import"./chunk-Dn-oRunx.js";const E=[0,0];let l=class extends w(L(y(I))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new T,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume(),this._highlightView?.processUpdate(e)}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null,i=this.tilemapCache;if(this._tileInfoView=new V(this.layer.tileInfo,this.layer.fullExtent,i?.effectiveMinLOD,i?.effectiveMaxLOD),this._fetchQueue=new H({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(t,h)=>this.fetchTile(t,h),scheduler:this.scheduler,priority:v.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new C({cachePolicy:"keep",resampling:this.resampling,acquireTile:t=>this.acquireTile(t),releaseTile:t=>this.releaseTile(t),tileInfoView:this._tileInfoView}),z(this,this.layer)){const t=this._highlightView=new G({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new k(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new A({createFetchPopupFeaturesQueryGeometry:(h,s)=>U(h,s,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:({graphic:h,property:s})=>t.graphicUpdateHandler({graphic:h,property:s}),layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add((()=>this.resampling),(()=>{this.doRefresh()}))),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._popupHighlightHelper?.destroy(),this._highlightView?.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeaturesAtLocation(e,i){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeaturesAtLocation(e,i):[]}highlight(e,i){const t=F(e);if(t.length===0)return m();const h=i?.name??q;return this._addHighlightGraphics(t,h),m((()=>!this.destroyed&&this._removeHighlightGraphics(t,h)))}_processHighlight(){const e=this._getHighlights();this._highlightView?.setHighlight(e)}_addHighlightGraphics(e,i){this._highlightGraphics.addMany(e),this._addHighlights(e.map((t=>t.uid)),i)}_removeHighlightGraphics(e,i){this._highlightGraphics.removeMany(e),this._removeHighlights(e.map((t=>t.uid)),i)}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(e){return b(this.layer.tileInfo?.spatialReference,e)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh((e=>this._updatingHandles.addPromise(this._enqueueTileFetch(e))))}}acquireTile(e){const i=this._bitmapView.createTile(e),t=i.bitmap;return[t.x,t.y]=this._tileInfoView.getTileCoords(E,i.key),t.resolution=this._tileInfoView.getTileResolution(i.key),[t.width,t.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(i)),this._bitmapView.addChild(i),this.requestUpdate(),i}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",(()=>e.destroy())),this.requestUpdate()}async fetchTile(e,i={}){return this.tilemapCache?this._fetchTileWithTilemapCache(e,i):this._fetchTileWithoutTilemapCache(e,i)}async _fetchTileWithoutTilemapCache(e,i={}){const{signal:t,resamplingLevel:h=0}=i;try{return await this._fetchImage(e,t)}catch(s){if(o(s))throw s;if(!this.resampling)return p(this._tileInfoView.tileInfo.size);if(h<3){const a=this._tileInfoView.getTileParentId(e.id);if(a){const r=new f(a),n=await this._fetchTileWithoutTilemapCache(r,{...i,resamplingLevel:h+1});return _(this._tileInfoView,n,r,e)}}return p(this._tileInfoView.tileInfo.size)}}async _fetchTileWithTilemapCache(e,i={}){const t=this.tilemapCache,{signal:h,resamplingLevel:s=0}=i,a=new f(0,0,0,0);let r,n=null;try{if(n=await t.fetchAvailabilityUpsample(e.level,e.row,e.col,a,{signal:h}),!this.resampling&&a.level!==e.level)return await P(i),p(this._tileInfoView.tileInfo.size);r=await this._fetchImage(a,h)}catch(g){if(o(g))throw g;if(this.resampling&&n==="unknown"&&s<3){const u=this._tileInfoView.getTileParentId(e.id);if(u){a.set(u);try{r=await this._fetchTileWithTilemapCache(a,{...i,resamplingLevel:s+1})}catch{}}}}return r?this.resampling?_(this._tileInfoView,r,a,e):r:p(this._tileInfoView.tileInfo.size)}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const i=await this._fetchQueue.push(e.key);e.bitmap.source=i,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",(()=>this.requestUpdate()))}catch(i){o(i)||Q.getLogger(this).error(i)}this.requestUpdate()}}async _fetchImage(e,i){return this.layer.fetchImageBitmapTile(e.level,e.row,e.col,{signal:i})}};c([d()],l.prototype,"resampling",null),c([d()],l.prototype,"tilemapCache",null),l=c([S("esri.views.2d.layers.TileLayerView2D")],l);const fe=l;export{fe as default};

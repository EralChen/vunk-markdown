import{dM as _,s as D,jf as L,A as U,y as ee,j as N,z as te,dn as G,dq as M,dp as O,eG as re,eW as ae}from"./chunk-XGpVqsM_.js";import{t as ne}from"./chunk-BPVd6ESQ.js";import"./chunk-DyqHK6XP.js";import"./chunk-Dix477Sg.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-CrMA_peF.js";let v=null;function oe(e,n,a,o={}){const r=n.elementType,i="value",s=r.type==="array"?[{name:i,type:r.type,elementType:r.elementType}]:r.type==="dictionary"?[{name:i,type:r.type,properties:r.properties}]:[{name:i,type:r.type}];return new ne(e.map((c=>{const t={};return P(t,s,{[i]:c},a,o),t[i]})))}function ie(e,n,a={}){const o=e instanceof re?new ae({source:e.features,geometryType:e.geometryType,fields:e.fields,spatialReference:e.spatialReference}):e;return n.constructFeatureSet(o,a.spatialReference,null,!0,a.lruCache,a.interceptor)}function ce(e,n,a={}){const{spatialReference:o,interceptor:r,lruCache:i}=a;return typeof e=="string"?n.createFeatureSetCollectionFromService(e,o,i,r):n.createFeatureSetCollectionFromMap(e,o,i,r)}function pe(e,n,a,o={}){const r=Object.create(null);return P(r,n.properties,e,a,o),new v.Dictionary(r)}function P(e,n,a,o,r={}){const i={};for(const s of Object.keys(a))i[s.toLowerCase()]=a[s];for(const s of n){const c=s.name.toLowerCase();if(r.variablesPreProcessed)e[c]=i[c];else switch(s.type){case"array":{const t=i[c];e[c]=t==null?null:oe(t,s,o,r);break}case"feature":{const t=i[c];e[c]=t==null?null:v.Feature.createFromGraphic(t,r?.timeZone);break}case"featureSet":{const t=i[c];e[c]=t==null?null:o?ie(t,o,r):null;break}case"featureSetCollection":{const t=i[c];e[c]=t==null?null:o?ce(t,o,r):null;break}case"dictionary":{const t=i[c];e[c]=t==null?null:pe(t,s,o,r);break}case"date":{const t=i[c];e[c]=t?t instanceof O?t:r?.timeZone?O.dateJSAndZoneToArcadeDate(t,r?.timeZone):O.dateJSToArcadeDate(t):null;break}case"dateOnly":{const t=i[c];e[c]=t?t instanceof M?t:M.fromReader(t):null;break}case"time":{const t=i[c];e[c]=t?t instanceof G?t:G.fromReader(t):null;break}case"knowledgeGraph":case"geometry":case"boolean":case"text":case"number":e[c]=i[c];break;case"voxel":{const t=i[c];e[c]=t==null?null:new v.Voxel(t,r?.timeZone);break}}}}function V(e,n){for(const a of e)n.push(a),a.type==="dictionary"&&V(a.properties,n);return n}function j(e,n,a,o,r){const{spatialReference:i,interceptor:s,lruCache:c,console:t,abortSignal:x,timeZone:C,services:S={portal:N.getDefault()}}=a,d={vars:{},spatialReference:i,interceptor:s,timeZone:C,lrucache:c,useAsync:r,services:S,console:t,abortSignal:x};return n&&P(d.vars,e.variables,n,o,a),d}function w(e,n){switch(n.getArcadeType(e)){case"number":case"text":case"boolean":case"point":case"polygon":case"polyline":case"multipoint":case"extent":return e;case"date":return e.toJSDate();case"time":case"dateOnly":return e.toString();case"feature":{const a=(e.type,e),o="geometry"in a?a.geometry():null,r="readAttributes"in a?a.readAttributes():a.attributes;return new te({geometry:o,attributes:r})}case"dictionary":{const a=e,o=a.attributes,r={};for(const i of Object.keys(o))r[i]=w(a.field(i),n);return r}case"array":return("toArray"in e?e.toArray():e).map((a=>w(a,n)))}return e}const z={variables:[{name:"$feature",type:"feature"},{name:"$layer",type:"featureSet"},{name:"$datastore",type:"featureSetCollection"},{name:"$map",type:"featureSetCollection"},{name:"$userInput",type:"geometry"},{name:"$graph",type:"knowledgeGraph"},{name:"$view",type:"dictionary",properties:[{name:"scale",type:"number"},{name:"timeProperties",type:"dictionary",properties:[{name:"currentStart",type:"date"},{name:"currentEnd",type:"date"},{name:"startIncluded",type:"boolean"},{name:"endIncluded",type:"boolean"}]}]}]},B={variables:[{name:"$feature",type:"feature"},{name:"$aggregatedFeatures",type:"featureSet"},{name:"$view",type:"dictionary",properties:[{name:"scale",type:"number"},{name:"timeProperties",type:"dictionary",properties:[{name:"currentStart",type:"date"},{name:"currentEnd",type:"date"},{name:"startIncluded",type:"boolean"},{name:"endIncluded",type:"boolean"}]}]}]},J={variables:[{name:"$voxel",type:"voxel"}]},q=new Map([["aggregate-field",{variables:[{name:"$feature",type:"feature"}]}],["form-constraint",{variables:[{name:"$feature",type:"feature"}]}],["feature-z",{variables:[{name:"$feature",type:"feature"}]}],["field-calculation",{variables:[{name:"$feature",type:"feature"},{name:"$datastore",type:"featureSetCollection"}]}],["form-calculation",{variables:[{name:"$feature",type:"feature"},{name:"$originalFeature",type:"feature"},{name:"$layer",type:"featureSet"},{name:"$featureSet",type:"featureSet"},{name:"$datastore",type:"featureSetCollection"},{name:"$map",type:"featureSetCollection"},{name:"$editContext",type:"dictionary",properties:[{name:"editType",type:"text"}]}]}],["labeling",{variables:[{name:"$feature",type:"feature"},{name:"$view",type:"dictionary",properties:[{name:"scale",type:"number"},{name:"timeProperties",type:"dictionary",properties:[{name:"currentStart",type:"date"},{name:"currentEnd",type:"date"},{name:"startIncluded",type:"boolean"},{name:"endIncluded",type:"boolean"}]}]}]}],["popup",z],["popup-element",z],["popup-feature-reduction",B],["popup-element-feature-reduction",B],["visualization",{variables:[{name:"$feature",type:"feature"},{name:"$view",type:"dictionary",properties:[{name:"scale",type:"number"},{name:"timeProperties",type:"dictionary",properties:[{name:"currentStart",type:"date"},{name:"currentEnd",type:"date"},{name:"startIncluded",type:"boolean"},{name:"endIncluded",type:"boolean"}]}]}]}],["popup-voxel",J],["popup-element-voxel",J]]);function _e(e){e==="feature-reduction-popup"?(L(U.getLogger("esri.arcade"),'profile name: "feature-reduction-popup"',{replacement:'"popup-feature-reduction"',version:"4.32",warnOnce:!0}),e="popup-feature-reduction"):e==="feature-reduction-popup-element"&&(L(U.getLogger("esri.arcade"),'profile name: "feature-reduction-popup-element"',{replacement:'"popup-element-feature-reduction"',version:"4.32",warnOnce:!0}),e="popup-element-feature-reduction");const n=q.get(e);if(!n){const a=Array.from(q.keys()).map((o=>`'${o}'`)).join(", ");throw new D("createArcadeProfile:invalid-profile-name",`Invalid profile name '${e}'. You must specify one of the following values: ${a}`)}return ee(n)}async function et(e,n,a={}){v||(v=await _());const{arcade:o,arcadeUtils:r,batchExec:{createBatchExecutor:i},aiServices:{BatchTranslationServiceFactory:s,PortalTranslationService:c}}=v,{loadScriptDependencies:t,referencesMember:x,scriptIsAsync:C}=o,S=V(n.variables,[]),d=S.filter((p=>p.type==="featureSet"||p.type==="featureSetCollection")).map((p=>p.name.toLowerCase())),m=o.parseScript(e,d);if(!m)throw new D("arcade:invalid-script","Unable to create SyntaxTree");const W=r.extractFieldNames(m),X=o.scriptTouchesGeometry(m),R=S.map((p=>p.name.toLowerCase())).filter((p=>x(m,p))),f=C(m,d);await t(m,f,d);const E={vars:{},useAsync:f};for(const p of R)E.vars[p]="any";const{lruCache:A,services:k}=a,T=o.compileScript(m,E),I=o.featureSetUtils();return{execute:(p,l={})=>{if(f)throw new D("arcade:invalid-execution-mode","Cannot execute the script in synchronous mode");const u={...k,...l.services},b={lruCache:A,...l,services:u},y=T(j(n,p,b,I,f));return l.rawOutput?y:w(y,r)},executeAsync:async(p,l={})=>{const u={...k,...l.services},b={lruCache:A,...l,services:u},y=await T(j(n,p,b,I,f));return l.rawOutput?y:w(y,r)},executeAsyncBatch:async(p,l,u={})=>{const b=[],y=i(p,(async($,g)=>{const H=l($);try{const h={...F,translation:Y.create(g)},K={lruCache:A,...u,services:h},Z=await T(j(n,H,K,I,f)),Q=u.rawOutput?Z:w(Z,r);b.push({id:g.id,result:{status:"fulfilled",value:Q}})}catch(h){throw b.push({id:g.id,result:{status:"rejected",reason:h}}),h}}),u.maxConcurrency??64,u.abortSignal),F={...k,...u.services},Y=new s(y,F.translation??new c(F.portal??N.getDefault(),u.console));return await y.run(),b.sort((({id:$},{id:g})=>$-g)).map((({result:$})=>$))},isAsync:f,variablesUsed:R,fieldsUsed:W,geometryUsed:X,syntaxTree:m}}export{et as createArcadeExecutor,_e as createArcadeProfile};

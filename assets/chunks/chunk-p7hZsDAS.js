import{s as c,eJ as d,eK as h,eF as y,eL as m,eG as u,Y as f,eM as g,c3 as v,ar as l,as as p,au as w}from"./chunk-BrJ3DEnk.js";import{l as $}from"./chunk-B-_yJ0Do.js";import{p as D}from"./chunk-u71fngQ3.js";import"./chunk-B5uEfUiB.js";import"./chunk-BY4ynHbL.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-SqlbPPT2.js";let i=class extends D($(v)){constructor(){super(...arguments),this.type="elevation-3d"}get tileInfo(){return this.layer.tileInfo}initialize(){const t=this.view,e=t.map?.allLayers,r=e&&e.includes(this.layer),o=t.map?.ground?.layers,a=o&&o.includes(this.layer);if(r&&!a){const s=new c("layerview:elevation-layer-only",`3D elevation layer '${this.layer.id}' can only be added to layers in map.ground`);this.addResolvingPromise(Promise.reject(s))}this._lercDecoder=d(t.resourceController),this._addTilingSchemeMatchPromise()}destroy(){this._lercDecoder=h(this._lercDecoder)}async fetchTile(t,e){const r=this.layer;if(y(r)){const n=await r.fetchTile(t[0],t[1],t[2],{noDataValue:m,signal:e.signal});return u(e)?void f.getLogger(this).warnOnce("A call to fetchTile resolved even though the request was aborted. fetchTile should not resolve if options.signal.aborted is true."):n}const o=this.getTileUrl(t),a=await e.requester.request(o,"binary",e),s=await this._lercDecoder.decode(a,{noDataValue:m},e.signal);if(s)return new g(s);throw new Error("LERC decoding failed")}};l([p()],i.prototype,"layer",void 0),l([p()],i.prototype,"tileInfo",null),i=l([w("esri.views.3d.layers.ElevationLayerView3D")],i);const nt=i;export{nt as default};

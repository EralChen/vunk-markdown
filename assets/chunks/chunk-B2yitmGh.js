import{pS as Y,hw as E,hy as k,pT as Q,pU as x,pV as Z,pW as J,pX as tt,af as i,pY as G,pZ as n,p_ as et,p$ as st,q0 as I,q1 as U,q2 as ot,q3 as X,q4 as it,q5 as rt,q6 as at,q7 as A,q8 as nt,az as pt,l$ as dt,l_ as B,lV as L,hm as ht,py as lt,gX as ut,pB as ct,pC as ft,l2 as vt,pD as yt,pE as mt,pF as wt,pG as xt,pH as gt,eX as _t,q9 as Mt,qa as W}from"./chunk-CuaFhuP3.js";import{o as $t}from"./chunk-r1DUUOIi.js";import{t as j}from"./chunk-ehcGqGxa.js";class P extends ot{}i([G(0,x)],P.prototype,"pos",void 0),i([G(1,x)],P.prototype,"uv",void 0);class St extends it{}class F extends X{}i([n(et)],F.prototype,"dvs",void 0);class y extends X{}i([n(x)],y.prototype,"perspective",void 0),i([n(x)],y.prototype,"texSize",void 0),i([n(E)],y.prototype,"wrapAroundShift",void 0),i([n(E)],y.prototype,"opacity",void 0),i([n(st)],y.prototype,"texture",void 0);class w extends Y{constructor(){super(...arguments),this.type="OverlayShader"}vertex(e){const t=e.uv.divide(this.config.texSize),s=new E(1).add(k(t,this.config.perspective)),o=new Q(e.pos.add(new x(this.config.wrapAroundShift,0)),1),r=this.transform.dvs.multiply(o);return{uv:t,glPosition:new Z(r.xy.multiply(s),0,s)}}fragment(e){const t=J(this.config.texture,e.uv).multiply(this.config.opacity),s=new tt;return s.fragColor=t,s}}i([n(F)],w.prototype,"transform",void 0),i([n(y)],w.prototype,"config",void 0),i([I(0,U(P))],w.prototype,"vertex",null),i([I(0,U(St))],w.prototype,"fragment",null);class qt extends rt{constructor(){super(...arguments),this.type=at.Overlay,this._mesh=null,this.shaders={overlay:new w}}render(e,t){const{context:s,painter:o}=e,r=this._getMesh(e,t);o.setPipelineState(j);const{isWrapAround:p,wrapAroundShift:u}=t.config,c={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:c},defines:null,optionalAttributes:null,useComputeBuffer:!1};o.setPipelineState({...j,stencil:{write:!1,test:{compare:nt.EQUAL,op:{fail:A.KEEP,zFail:A.KEEP,zPass:A.REPLACE},ref:0,mask:255}}}),o.submitDrawMeshUntyped(s,f,r),p&&(c.wrapAroundShift=u,o.submitDrawMeshUntyped(s,f,r))}shutdown(){pt(this._mesh)}_getMesh(e,t){const{context:s}=e;if(this._mesh){const o=this._mesh.vertexBuffers.get("positions");if(!o)throw new Error("Buffer not found");o.buffer.setData(t.position)}else{const o=t.index!=null?t.index.length:t.position.length/2;this._mesh=new $t(s,{vertex:{positions:{data:t.position,attributes:[new B("pos",2,L.FLOAT,0,8)]},uvs:{data:t.tex,attributes:[new B("uv",2,L.UNSIGNED_SHORT,0,4)]}},index:t.index!=null?{index:{data:t.index}}:void 0,groups:[{index:t.index!=null?"index":void 0,primitive:dt.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:o}]})}return this._mesh}}class At extends ht{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=lt(),this._overlayTechnique=new qt}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==ut.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const s of this.children)s.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:s,size:o,pixelRatio:r,resolution:p,rotation:u,viewpoint:c,displayMat3:f}=t;if(this._viewStateId===s)return;const g=W(u),d=r*o[0],v=r*o[1];this._localOrigin=c.targetGeometry.clone();const{x:m,y:$}=this._localOrigin,_=ct(m,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=$;const S=p*d,q=p*v,a=ft(this._dvsMat3);vt(a,a,f),yt(a,a,mt(d/2,v/2)),wt(a,a,xt(d/S,-v/q,1)),gt(a,a,-g),this._viewStateId=s}_updateOverlays(e,t){const{state:s}=e,{rotation:o,spatialReference:r,worldScreenWidth:p,size:u,viewpoint:c}=s,f=this._localOrigin;let g,d=0;const v=_t(r);if(v&&r.isWrappable){const m=u[0],$=u[1],_=W(o),S=Math.abs(Math.cos(_)),q=Math.abs(Math.sin(_)),a=Math.round(m*S+$*q),[C,D]=v.valid,h=Mt(r),{x:T,y:N}=c.targetGeometry,H=[T,N],b=[0,0];s.toScreen(b,H);const M=[0,0];let O;O=a>p?.5*p:.5*a;const z=Math.floor((T+.5*h)/h),K=C+z*h,V=D+z*h,R=[b[0]+O,0];s.toMap(M,R),M[0]>V&&(d=h),R[0]=b[0]-O,s.toMap(M,R),M[0]<K&&(d=-h),g={worldWidth:h,xBounds:[C,D]}}for(const m of t)m.updateDrawCoords(f,d,s,g)}}export{At as u};

import{s as m,Y as d,ai as l,al as c}from"./chunk-Dx0VeHfy.js";import{h as u}from"./chunk-DbweChWy.js";import{m as f}from"./chunk-C-NP8f-P.js";import"./chunk-DHAEDrTs.js";import"./chunk-DWeGsYYR.js";import"./chunk-7H9fqpeH.js";import"./chunk-C0iCUcfl.js";import"./chunk-BWpm2_ve.js";import"./chunk-BUvM60zF.js";import"./chunk-T1gcu7De.js";let s=class extends f(u){constructor(){super(...arguments),this.type="wms-3d"}initialize(){this.layer.serviceSupportsSpatialReference(this.view.spatialReference)||this.addResolvingPromise(Promise.reject(new m("layerview:spatial-reference-incompatible","The spatial references supported by this WMS layer are incompatible with the spatial reference of the view"))),this._updatingHandles.add((()=>this.exportImageParameters?.version),(()=>{this._updatingHandles.addPromise(this.refreshDebounced())}))}createFetchPopupFeaturesQuery(i){const{subView:r}=this;if(r.type!=="draped")return null;const a=r.findExtentInfoAt(i),e=a.extent,t=new d(e[0],e[1],e[2],e[3],r.spatialReference),n=a.imageSize,o=n.width,h=n.height,p=t.width/o;return{extent:t,width:o,height:h,x:Math.round((i.x-t.xmin)/p),y:Math.round((t.ymax-i.y)/p)}}getFetchOptions(){return{timeExtent:this.timeExtent}}};s=l([c("esri.views.3d.layers.WMSLayerView3D")],s);const z=s;export{z as default};

import{_ as g}from"./chunk-C39j8-it.js";import{gG as D,pj as p,pk as A}from"./chunk-Bj5pIyxE.js";import"./chunk-DJw_0V8B.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-SqlbPPT2.js";function S(){return C??=(async()=>{const t=await g(()=>import("./chunk-sWYVw54x.js"),[]),r=await t.default({locateFile:e=>D(`esri/libs/basisu/${e}`)});return r.initializeBasis(),r})(),C}let C;function R(){return y??=(async()=>await(await g(()=>import("./chunk-CMbor95M.js"),[])).default({locateFile:r=>D(`esri/libs/dxtEncoder/${r}`)}))(),y}let y,X,b,c=null,T=null;class h{constructor(r,e){this.internalFormat=r,this.compressedTexture=e}}async function Gt(t){const r=M(t.data,t.flipped);if(t.hasS3TC){T||await B();const e=new Uint8Array(r.length);T?.encode(new Uint8Array(r),t.width,t.height,e);const n=j(e,!0),s=[e.buffer];return{result:new h(n?.internalFormat??null,n?.textureData??null),transferList:s}}if(t.hasETC){c||await x();const e=await F(r,t.width,t.height,t.hasMipmap),n=e?await G(e):null,s=n?.compressedTexture?.levels.map(l=>l.buffer)||[];return{result:new h(n?.internalFormat??null,n?.compressedTexture??null),transferList:s}}return{result:new h(null,null)}}async function x(){c||(c=await(X??=S()))}async function B(){T||(T=await(b??=R()))}async function F(t,r,e,n,s=255,l=0,a=!1,o=!1){if(!c)return null;const i=new c.BasisEncoder;i.setPerceptual(!o),i.setCheckForAlpha(!0),i.setForceAlpha(!1),i.setRenormalize(o),i.setMipGen(n),i.setMipSRGB(!o),i.setCreateKTX2File(!0),i.setKTX2SRGBTransferFunc(!o),i.setQualityLevel(s),i.setCompressionLevel(l);const f=new Uint8Array(t.byteLength);i.setSliceSourceImage(0,new Uint8Array(t),r,e,a);const d=i.encode(f),u=new Uint8Array(f.buffer,0,d),m=new c.KTX2File(new Uint8Array(u));return m.isValid()?(i.delete(),u):(m.close(),m.delete(),i.delete(),null)}async function G(t){if(!c)return new h(null,null);const r=new c.KTX2File(new Uint8Array(t));r.startTranscoding();const[e,n]=r.getHasAlpha()?[A.ETC2_RGBA,p.COMPRESSED_RGBA8_ETC2_EAC]:[A.ETC1_RGB,p.COMPRESSED_RGB8_ETC2],s=r.getLevels(),l=[];for(let a=0;a<s;a++)l.push(new Uint8Array(r.getImageTranscodedSizeInBytes(a,0,0,e))),r.transcodeImage(l[a],a,0,0,e,0,-1,-1);return r.close(),r.delete(),{internalFormat:n,compressedTexture:{type:"compressed",levels:l}}}function M(t,r=!1){const e=new OffscreenCanvas(t.width,t.height),n=e.getContext("2d");return r&&n.scale(1,-1),n.drawImage(t,0,r?-t.height:0),n.getImageData(0,0,e.width,e.height).data}const O=31,v=1,I=2,P=3,U=4,L=7,k=21,K=131072;function w(t){return t.charCodeAt(0)+(t.charCodeAt(1)<<8)+(t.charCodeAt(2)<<16)+(t.charCodeAt(3)<<24)}const z=w("DXT1"),$=w("DXT3"),V=w("DXT5");function j(t,r){const e=new Int32Array(t.buffer,t.byteOffset,O);let n,s;switch(e[k]){case z:n=8,s=p.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case $:n=16,s=p.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case V:n=16,s=p.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;default:return null}let l=1,a=e[U],o=e[P];(3&a||3&o)&&(a=a+3&-4,o=o+3&-4);const i=a,f=o;let d,u;e[I]&K&&r!==!1&&(l=Math.max(1,e[L]));let m=t.byteOffset+e[v]+4;const _=[];for(let E=0;E<l;++E)u=(a+3>>2)*(o+3>>2)*n,d=new Uint8Array(t.buffer,m,u),_.push(d),m+=u,a=Math.max(1,a>>1),o=Math.max(1,o>>1);return{textureData:{type:"compressed",levels:_},internalFormat:s,width:i,height:f}}export{h as TextureCompressionWorkerOutput,Gt as compress,F as compressRGBADataToKTX2,G as createTextureDataKTX2,x as initializeBasisEncoder,B as initializeDXTEncoder};

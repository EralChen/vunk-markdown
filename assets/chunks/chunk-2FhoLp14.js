import{aq as c,db as h,dc as u,aC as y,e0 as m,V as p,aJ as d,dd as g,aF as f,aD as b,aG as v,de as w,df as I,ai as i,aj as o,al as _}from"./chunk-DadqOv6U.js";import{c as S,a as C,S as G,h as O,d as V,f as $,b as E}from"./chunk-DZhFt61A.js";import{l as P}from"./chunk-BWusSGZf.js";import{x as D}from"./chunk-vSMS8F6q.js";import{r as H}from"./chunk-B1zgrWX7.js";import"./chunk-CPKck_yD.js";import"./chunk-CXbPWOUs.js";import"./chunk-BXWC5oiM.js";import"./chunk--Yp3882x.js";import"./chunk-CtCZxQAF.js";import"./chunk-BZlErB4t.js";import"./chunk-DzaTkaQi.js";import"./chunk-Elt058NQ.js";function R(e){return e instanceof S||e instanceof C||e instanceof G||e instanceof O||e instanceof V||e instanceof $||e instanceof E}let s=class extends P(I){constructor(){super(...arguments),this.type="route-3d",this.loadedGraphics=new H,this._byObjectID=new Map,this.slicePlaneEnabled=!1,this.fullExtentInLocalViewSpatialReference=null}initialize(){this._set("processor",new D({owner:this,scaleVisibilityEnabled:!0,frustumVisibilityEnabled:!0})),this.addResolvingPromise(this.processor.initializePromise),this._updatingHandles.addOnCollectionChange((()=>this._routeItems),(e=>this._routeItemsChanged(e)),c),this.view.viewingMode==="local"&&this.addResolvingPromise((async()=>this.fullExtentInLocalViewSpatialReference=await h(this.layer.fullExtent,this.view.spatialReference))()),this.addHandles(u((()=>this.view?.basemapTerrain?.ready),(()=>()=>this.notifyChange("updating")),{once:!0}))}destroy(){this._updatingHandles.removeAll(),this._set("processor",y(this.processor)),this._get("_routeItems")?.destroy()}get _routeItems(){return new m({getCollections:()=>[this.layer.pointBarriers,this.layer.polygonBarriers,this.layer.polylineBarriers,this.layer.stops,this.layer.directionLines,this.layer.directionPoints,this.layer.routeInfo!=null?new p([this.layer.routeInfo]):null]})}_routeItemsChanged(e){if(e.removed.length){this.loadedGraphics.removeMany(e.removed.map((t=>{const r=this._byObjectID.get(t);return this._byObjectID.delete(t),r})));for(const t of e.removed)this.removeHandles(t)}if(e.added.length){this.loadedGraphics.addMany(e.added.map((t=>{const r=t.toGraphic();return this._byObjectID.set(t,r),r})));for(const t of e.added)this.addHandles([d((()=>t.geometry),((r,a)=>{this._updateGraphic(t,"geometry",r,a)})),d((()=>t.symbol),((r,a)=>{this._updateGraphic(t,"symbol",r,a)}))],t)}}get legendEnabled(){return this.canResume()&&!this.processor?.frustumVisibilitySuspended}get visibleAtCurrentScale(){return f()?g(this.layer.effectiveScaleRange,this.view.scale):!this.processor?.scaleVisibilitySuspended}getSuspendInfo(){const e=super.getSuspendInfo();return e.outsideOfView=this.processor?.frustumVisibilitySuspended??!1,e}getHit(e){return this.processor.getHit(e)}whenGraphicBounds(e,t){return this.processor.whenGraphicBounds(e,t)}computeAttachmentOrigin(e,t){return this.processor?.computeAttachmentOrigin(e,t)}getSymbolLayerSize(e,t){return this.processor.getSymbolLayerSize(e,t)}async queryGraphics(){return new p(this.loadedGraphics.toArray())}maskOccludee(e){return this.processor.maskOccludee(e)}highlight(e,t){return R(e)&&(e=this._byObjectID.get(e)),this.processor.highlight(e,t?.name??b)}notifyContentGeometryUpdate(){this.emit("visible-geometry-changed")}get updatePolicy(){return this.processor?.graphicsCore.effectiveUpdatePolicy||v.SYNC}isUpdating(){return!(!this.processor?.updating&&this.view?.basemapTerrain?.ready)}get performanceInfo(){return new w(this.processor?.graphicsCore.usedMemory??0,this.loadedGraphics.length,-1,-1,0,this.processor?.graphicsCore.performanceInfo??null)}_updateGraphic(e,t,r,a){const l=this._byObjectID.get(e);l[t]=r,n.graphic=l,n.property=t,n.oldValue=a,n.newValue=r,this.processor?.graphicsCore.graphicUpdateHandler(n)}};i([o()],s.prototype,"_routeItems",null),i([o()],s.prototype,"loadedGraphics",void 0),i([o({readOnly:!0})],s.prototype,"legendEnabled",null),i([o({readOnly:!0})],s.prototype,"visibleAtCurrentScale",null),i([o()],s.prototype,"layer",void 0),i([o({readOnly:!0})],s.prototype,"processor",void 0),i([o({type:Boolean})],s.prototype,"slicePlaneEnabled",void 0),s=i([_("esri.views.3d.layers.RouteLayerView3D")],s);const n={graphic:null,property:null,oldValue:null,newValue:null},N=s;export{N as default};

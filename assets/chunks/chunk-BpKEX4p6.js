import{ar as g,aE as f,ap as m,aF as b,aG as C,aH as w,aI as V,aJ as h,aK as v,aC as c,aL as E,aM as G,aN as d,aO as O,z as S,aP as x,aQ as P,aR as _,ai as s,aj as a,al as $}from"./chunk-CET6Djna.js";import{r as H,n as I}from"./chunk-BADwmne0.js";import{H as R,u as A}from"./chunk-EFWiA1C3.js";import{a as z,p as U,u as j}from"./chunk-gMg-gRKd.js";import{e as D}from"./chunk-BJEGZeu-.js";let i=class extends g{constructor(e){super(e),this.drapeSourcePriorityOffset=0,this.type="graphics-3d",this.graphicsCore=null,this.drapeSourceType=f.Features,this.scaleVisibilityEnabled=!1,this.frustumVisibilityEnabled=!1,this._suspendResumeExtent=null,this._updatingHandles=new m}initialize(){const{layer:e}=this,t="effectiveScaleRange"in e?e:null,l=!b()&&this.scaleVisibilityEnabled&&t!=null,r=new R({owner:this,layer:this.owner.layer,preferredUpdatePolicy:C.SYNC,graphicSymbolSupported:!0,componentFactories:{elevationAlignment:(n,o)=>new U({graphicsCoreOwner:this,graphicsCore:n,queryGraphicUIDsInExtent:o,elevationProvider:this.view.elevationProvider}),scaleVisibility:l?(n,o)=>new A({graphicsCoreOwner:this,layer:t,queryGraphicUIDsInExtent:o,graphicsCore:n,basemapTerrain:this.owner.view.basemapTerrain}):null,objectStates:n=>new z(n)}});if(this._set("graphicsCore",r),this.frustumVisibilityEnabled&&this._set("frustumVisibility",new j({graphicsCoreOwner:this})),"fullOpacity"in this.owner){const n=this.owner;this._updatingHandles.add((()=>n.fullOpacity),(()=>this.graphicsCore.opacityChange()))}if("elevationInfo"in e){const n=e;this._updatingHandles.add((()=>n.elevationInfo),((o,p)=>{w(o,p)&&this._updatingHandles.addPromise(this.graphicsCore.elevationInfoChange())}))}this._set("initializePromise",this._initializeAsync()),this._updatingHandles.addPromise(this.initializePromise)}async _initializeAsync(){try{await this.graphicsCore.initializePromise}catch(e){if(V(e))return;throw e}this.destroyed||(this.addHandles(h((()=>this.view.clippingArea),(()=>this._updateClippingExtent()),v)),this._updateClippingExtent(),this._setupSuspendResumeExtent(),this.graphicsCore.startCreateGraphics())}destroy(){this._updatingHandles.destroy(),this._set("frustumVisibility",c(this.frustumVisibility)),this._set("graphicsCore",c(this.graphicsCore))}get layer(){return this.owner.layer}get layerViewUid(){return this.owner.uid}get view(){return this.owner.view}get scaleVisibility(){return this.graphicsCore?.scaleVisibility}get elevationAlignment(){return this.graphicsCore?.elevationAlignment}get scaleVisibilitySuspended(){return!(this.scaleVisibility==null||!this.scaleVisibility.suspended)}get frustumVisibilitySuspended(){return this.frustumVisibility!=null&&this.frustumVisibility.suspended}get suspended(){return this.owner.suspended??!1}get updating(){return!!(this.graphicsCore?.updating||this.scaleVisibility!=null&&this.scaleVisibility.updating||this.frustumVisibility!=null&&this.frustumVisibility.updating||this._updatingHandles.updating)}get graphics3DGraphics(){return this.graphicsCore?.graphics3DGraphics}get graphics3DGraphicsByObjectID(){return this.graphicsCore?.graphics3DGraphicsByObjectID}get loadedGraphics(){return this.owner.loadedGraphics}get fullOpacity(){return this.owner.fullOpacity??1}get slicePlaneEnabled(){return this.owner.slicePlaneEnabled}get updatePolicy(){return this.owner.updatePolicy}notifyGraphicGeometryChanged(e){this.graphicsCore.notifyGraphicGeometryChanged(e)}notifyGraphicVisibilityChanged(e){this.graphicsCore.notifyGraphicVisibilityChanged(e)}notifyContentGeometryUpdate(){this.owner.notifyContentGeometryUpdate?.()}getRenderingInfo(e,t,l){const r=H(e,{renderer:t,arcade:l});if(r?.color){const n=r.color;n[0]=n[0]/255,n[1]=n[1]/255,n[2]=n[2]/255}return r}getRenderingInfoAsync(e,t,l,r){return I(e,{renderer:t,arcade:l,...r})}getHit(e){if(this.owner.loadedGraphics){const t=this.owner.loadedGraphics.find((l=>l.uid===e));if(t){const l=this.layer instanceof E?this.layer:null,r=G(t,l);return{type:"graphic",graphic:r,layer:r.layer}}}return null}whenGraphicBounds(e,t){return this.graphicsCore?this.graphicsCore.whenGraphicBounds(e,t):Promise.reject()}computeAttachmentOrigin(e,t){return this.graphicsCore?this.graphicsCore.computeAttachmentOrigin(e,t):null}getSymbolLayerSize(e,t){return this.graphicsCore?this.graphicsCore.getSymbolLayerSize(e,t):null}maskOccludee(e){const t=this.graphicsCore?.objectStates;if(!t)return d();const{set:l,handle:r}=t.acquireOccludeeSet(null);return t.setUid(l,e.uid),r}highlight(e,t){const l=this.graphicsCore?.objectStates;if(!l||e instanceof O)return u;const r=D(e);if(r.length===0)return u;if(r[0]instanceof S){const n=r.map((y=>y.uid)),{set:o,handle:p}=l.acquireHighlightSet(t,null);return l.setUids(o,n),p}if(typeof r[0]=="number"){const n=r,{set:o,handle:p}=l.acquireHighlightSet(t,null);return l.setObjectIds(o,n),p}return u}_setupSuspendResumeExtent(){const{scaleVisibility:e,frustumVisibility:t}=this;if(e==null&&t==null)return;const l=({computedExtent:r,extentPadding:n})=>{this._suspendResumeExtent=P(r,this._suspendResumeExtent,_,n),e?.setExtent(this._suspendResumeExtent),t?.setExtent(this._suspendResumeExtent)};this.addHandles(h((()=>({computedExtent:this.graphicsCore?.computedExtent,extentPadding:this.graphicsCore?.extentPadding})),(r=>l(r)),x))}_updateClippingExtent(){const e=this.view.clippingArea;this.graphicsCore.setClippingExtent(e,this.view.spatialReference)&&this.graphicsCore.recreateAllGraphics()}};s([a()],i.prototype,"drapeSourcePriorityOffset",void 0),s([a()],i.prototype,"type",void 0),s([a({constructOnly:!0})],i.prototype,"owner",void 0),s([a()],i.prototype,"layer",null),s([a()],i.prototype,"layerViewUid",null),s([a()],i.prototype,"view",null),s([a({constructOnly:!0})],i.prototype,"graphicsCore",void 0),s([a()],i.prototype,"scaleVisibility",null),s([a({constructOnly:!0})],i.prototype,"frustumVisibility",void 0),s([a()],i.prototype,"elevationAlignment",null),s([a()],i.prototype,"scaleVisibilitySuspended",null),s([a({readOnly:!0})],i.prototype,"frustumVisibilitySuspended",null),s([a()],i.prototype,"suspended",null),s([a({readOnly:!0})],i.prototype,"updating",null),s([a()],i.prototype,"loadedGraphics",null),s([a()],i.prototype,"fullOpacity",null),s([a()],i.prototype,"slicePlaneEnabled",null),s([a()],i.prototype,"drapeSourceType",void 0),s([a()],i.prototype,"updatePolicy",null),s([a({constructOnly:!0})],i.prototype,"scaleVisibilityEnabled",void 0),s([a({constructOnly:!0})],i.prototype,"frustumVisibilityEnabled",void 0),s([a()],i.prototype,"initializePromise",void 0),i=s([$("esri.views.3d.layers.graphics.GraphicsProcessor")],i);const u=d();export{i as x};

import{fK as M,i3 as S,dg as R,i9 as f,aJ as q,A as U,aK as I,aD as A,$ as E,aj as h,ak as w,am as H}from"./chunk-XGpVqsM_.js";import{M as W}from"./chunk-Bmr7vQ45.js";import{m as z}from"./chunk-Be4mQ64O.js";import"./chunk-DyqHK6XP.js";import"./chunk-Dix477Sg.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-CrMA_peF.js";import"./chunk-aL52J51R.js";let o=class extends z(M(S(R))){constructor(){super(...arguments),this.bitmapContainer=new f}supportsSpatialReference(t){return this.layer.serviceSupportsSpatialReference(t)}update(t){this.strategy.update(t).catch((i=>{q(i)||U.getLogger(this).error(i)}))}attach(){const{layer:t}=this,{imageMaxHeight:i,imageMaxWidth:r}=t;this.bitmapContainer=new f,this.container.addChild(this.bitmapContainer),this.strategy=new W({container:this.bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxHeight:i,imageMaxWidth:r,imageRotationSupported:!1,imageNormalizationSupported:!1,hidpi:!1}),this.addAttachHandles(I((()=>this.exportImageVersion),(()=>this.requestUpdate())))}detach(){this.strategy=A(this.strategy),this.container.removeAllChildren()}viewChange(){}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQuery(t){const{view:i,bitmapContainer:r}=this,{x:a,y:s}=t,{spatialReference:$}=i;let e,p=0,d=0;if(r.children.some((C=>{const{width:c,height:g,resolution:l,x:m,y:n}=C,y=m+l*c,x=n-l*g;return a>=m&&a<=y&&s<=n&&s>=x&&(e=new E({xmin:m,ymin:x,xmax:y,ymax:n,spatialReference:$}),p=c,d=g,!0)})),!e)return null;const u=e.width/p,b=Math.round((a-e.xmin)/u),v=Math.round((e.ymax-s)/u);return{extent:e,width:p,height:d,x:b,y:v}}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(t,i,r,a){return this.layer.fetchImageBitmap(t,i,r,{timeExtent:this.timeExtent,...a})}};h([w()],o.prototype,"strategy",void 0),h([w()],o.prototype,"updating",void 0),o=h([H("esri.views.2d.layers.WMSLayerView2D")],o);const Mt=o;export{Mt as default};

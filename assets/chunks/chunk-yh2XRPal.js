import{mx as I,my as J,bv as N,dc as X,aq as p,mz as Y,lU as B,gP as Q,gQ as K,gR as Z,f1 as b,mD as ee,a1 as te,a2 as z,mE as V,i2 as ie,df as se,f2 as re,z as x,as as ae,at as oe,bM as F,bN as H,aC as q,aJ as c,mF as ne,ai as S,aj as L,mG as le,al as he}from"./chunk-CET6Djna.js";import{p as U,h as me}from"./chunk-BjQ_gRQU.js";import{u as ye}from"./chunk-Bi3pz3Tk.js";import{t as pe}from"./chunk-Ciwv7MKQ.js";import{O as ce}from"./chunk-CA6diaKY.js";import"./chunk-BoJEKryr.js";import"./chunk-DjXKmJgq.js";import"./chunk-DvpRAiWy.js";import"./chunk-QXap_35O.js";import"./chunk-LAsmWdb2.js";import"./chunk-CUzevAry.js";import"./chunk-CEplUXYF.js";import"./chunk-D0O1cXCS.js";import"./chunk-BFLErLYb.js";import"./chunk-CjHvAPdT.js";import"./chunk-CKwt2uXH.js";import"./chunk-ehcGqGxa.js";import"./chunk-DpafT5mc.js";import"./chunk-DELXsNEy.js";import"./chunk-jduAaT_8.js";import"./chunk-Xp1DVuOB.js";import"./chunk-BepYVpnq.js";import"./chunk-77tOcGGO.js";import"./chunk-aGeVxf8w.js";import"./chunk-B_IOha9r.js";const T=2;class ue extends I{constructor(e){super(),this.element=e,this._handles=new J,this.isWrapAround=!1,this.perspectiveTransform=N(),this.wrapAroundShift=0,this.clipGeometry=null,this._handles.add(X((()=>this.element),(()=>{const t=this.element;this.ready(),t&&this._handles.add(Y(t,"play",(()=>this.requestRender())))}),p))}getMesh(e){throw new Error("Method not implemented.")}destroy(){this._handles.destroy(),this.texture=B(this.texture)}get textureSize(){if(!this.texture)return[1,1];const e=this.texture.descriptor;return[e.width,e.height]}get dvsMat3(){return this.parent.dvsMat3}beforeRender(e){const t=this.element;if(t==null)return;const{context:l}=e,{videoWidth:o,videoHeight:s}=t;if(o!==0&&s!==0){if(this.texture)t.paused||this.texture.setData(t);else{const i=new Q;i.wrapMode=K.CLAMP_TO_EDGE,i.preMultiplyAlpha=!0,i.width=o,i.height=s,this.texture=new Z(l,i,t)}t.paused||(this.texture.generateMipmap(),this.requestRender()),super.beforeRender(e)}}_createTransforms(){return null}updateDrawCoords(e,t,l,o){const s=this.element,i=this._getFrameInfo();if(!s||!i)return;const{spatialReference:n}=l;this._initializeData(e,i,n);const{controlPoints:h,horizon:m}=i,y=Math.sqrt(h.length),a=y,{x:u,y:_}=e,v=this._vertices,O=h[0],W=h[y-1],k=h[(a-1)*y],j=h[(a-1)*y+y-1],G=b(m?m[0].mapPoint:O.mapPoint,n),P=b(m?m[1].mapPoint:W.mapPoint,n),g=b(k.mapPoint,n),A=b(j.mapPoint,n);this.clipGeometry=m?new ee({geometry:te.fromJSON({rings:[[[g.x,g.y],[A.x,A.y],[P.x,P.y],[G.x,G.y],[g.x,g.y]]],spatialReference:n})}):null;for(let d=0;d<h.length;d++){const E=h[d],{sourcePoint:M,mapPoint:$}=E;if(M==null||$==null)continue;const w=b($,n);v[d*T+0]=w.x-u,v[d*T+1]=w.y-_}let D=t;if(o){const d=Math.min(G.x,P.x,g.x,A.x),E=Math.max(G.x,P.x,g.x,A.x),{worldWidth:M,xBounds:$}=o,[w,R]=$;d<w&&E>w?D=M:E>R&&d<R&&(D=-M)}this.wrapAroundShift=D,this.isWrapAround=D!==0}draw(e,t){if(this.visible){if(!(this.isReady&&this._vertices&&this._indices&&this._texCoords))return void this.requestRender();this.stage||console.warn("OverlayMultipoint: stage is null"),t.render(e,{transform:{dvs:this.dvsMat3},config:{perspective:this.perspectiveTransform,texSize:this.textureSize,wrapAroundShift:this.wrapAroundShift,isWrapAround:this.isWrapAround,opacity:this.opacity,texture:{texture:this.texture,unit:0}},position:this._vertices,tex:this._texCoords,index:this._indices})}}_initializeData(e,t,l){if(this._vertices!=null&&this._indices!=null)return;const{controlPoints:o}=t,s=Math.sqrt(o.length),i=s,n=new Float32Array(T*o.length),h=new Uint16Array(2*o.length);for(let a=0;a<o.length;a++){const u=o[a],{sourcePoint:_,mapPoint:v}=u;if(_==null||v==null)continue;const O=b(v,l);n[a*T+0]=O.x-e.x,n[a*T+1]=O.y-e.y,h[2*a+0]=_.x,h[2*a+1]=_.y}const m=new Uint16Array(i*s+(i-2)*(s+2));let y=0;for(let a=0;a<i;a++){for(let u=0;u<s;u++)m[y++]=a*s+u,m[y++]=(a+1)*s+u;a<i-2&&(m[y++]=(a+1)*s+(s-1),m[y++]=(a+1)*s)}this._vertices=n,this._texCoords=h,this._indices=m}_getFrameInfo(){if(!this.groundControlPoints)return null;const e=this._getFrameControlPoints(),t=this.frameHorizonPoints;let l=null;if(t){const o=t.startX,s=t.startY,i=t.endX,n=t.endY;l=[{sourcePoint:V(o,s),mapPoint:new z(t.startLongitude,t.startLatitude)},{sourcePoint:V(i,n),mapPoint:new z(t.endLongitude,t.endLatitude)}]}return{controlPoints:e,horizon:l}}_getFrameControlPoints(){const e=this.groundControlPoints,t=e?.length;if(!t)return[];const l=new Array(t),o=Math.max(...e.map((({x:i})=>i))),s=this.element.videoWidth/o;for(let i=0;i<t;i++){const{x:n,y:h,lat:m,lon:y}=e[i];l[i]={sourcePoint:V(n*s,-h*s),mapPoint:new z(y,m)}}return l}}const C=new oe([255,127,0]),de=10005,fe=10018;let f=class extends ie(se){constructor(){super(...arguments),this._graphicsLayer=new re,this._frameOutlineGraphic=new x({symbol:new ae({outline:{type:"simple-line",color:C}})}),this._frameCenterGraphic=new x({symbol:new F({color:C,style:"cross"})}),this._sensorTrailGraphic=new x({symbol:new H({color:C})}),this._sensorSightlineGraphic=new x({symbol:new H({color:C})}),this._sensorLocationGraphic=new x({symbol:new F({color:C})}),this._overlayContainer=null,this._sensorLocationSymbolType=null,this.layer=null,this.sensorLocationSymbol=null,this.symbolAngle=0,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=q(this._graphicsLayer)}initialize(){this._sensorLocationSymbolType=this.layer?.sensorSymbol.type,this._graphicsLayer.graphics.addMany([this._frameCenterGraphic,this._frameOutlineGraphic,this._sensorLocationGraphic,this._sensorSightlineGraphic,this._sensorTrailGraphic]),this.visibleTelemetryElements=new U({frame:this.layer.telemetryDisplay?.frame??!1,frameCenter:this.layer.telemetryDisplay?.frameCenter??!0,frameOutline:this.layer.telemetryDisplay?.frameOutline??!0,lineOfSight:this.layer.telemetryDisplay?.lineOfSight??!0,sensorLocation:this.layer.telemetryDisplay?.sensorLocation??!0,sensorTrail:this.layer.telemetryDisplay?.sensorTrail??!0})}attach(){this._overlayContainer=new ye,this.container.addChild(this._overlayContainer),this._addOverlayMultipoint(),this.graphicsView=new ce({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new pe(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([c((()=>[this.layer.telemetryDisplay?.frame,this.layer.telemetryDisplay?.frameCenter,this.layer.telemetryDisplay?.frameOutline,this.layer.telemetryDisplay?.sensorLocation,this.layer.telemetryDisplay?.sensorTrail,this.layer.telemetryDisplay?.lineOfSight]),(()=>this._updateVisibleTelemetryElements()),p),c((()=>[this.layer.telemetry,this.visibleTelemetryElements?.frameCenter,this.visibleTelemetryElements?.frameOutline,this.visibleTelemetryElements?.sensorLocation,this.visibleTelemetryElements?.sensorTrail,this.visibleTelemetryElements?.lineOfSight]),(()=>this._updateGraphicGeometries()),p),c((()=>this.layer.metadata),(()=>this._updateSensorLocationSymbolAngle()),p),c((()=>this.layer?.frameCenterSymbol),(()=>this._updateFrameCenterSymbol()),p),c((()=>this.layer?.frameOutlineSymbol),(()=>this._updateFrameOutlineSymbol()),p),c((()=>this.layer?.sensorSightLineSymbol),(()=>this._updateSensorSightlineSymbol()),p),c((()=>this.layer?.sensorSymbol),(()=>this._updateSensorLocationSymbol()),p),c((()=>this.layer?.sensorTrailSymbol),(()=>this._updateSensorTrailSymbol()),p),c((()=>this.symbolAngle),(()=>this._updateSensorLocationSymbol()),p)])}detach(){this._overlayContainer.removeAllChildren(),this.container.removeAllChildren(),this.graphicsView=q(this.graphicsView)}supportsSpatialReference(r){return!0}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(r){this.graphicsView.processUpdate(r)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frame=this.layer.telemetryDisplay.frame,this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:r}=this.layer,{visibleTelemetryElements:e}=this;r&&e&&(e.frameOutline&&r.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,e.sensorTrail&&r.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,e.lineOfSight&&r.lineOfSight?this._sensorSightlineGraphic.geometry=this.layer.telemetry.lineOfSight:this._sensorSightlineGraphic.geometry=null,e.sensorLocation&&r.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,e.frameCenter&&r.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}_updateSensorLocationSymbolAngle(){if(!this.layer?.metadata?.size)return;const{source:r,symbolOffset:e=0}=this.layer.sensorSymbolOrientation||{};if(!r&&!e)return;const t=this.layer?.metadata?.get(de)?.value??0,l=this.layer?.metadata?.get(fe)?.value??0,o=me({cameraAzimuth:l,platformHeading:t,source:this.layer.sensorSymbolOrientation?.source,symbolOffset:this.layer.sensorSymbolOrientation?.symbolOffset??0});this.symbolAngle=Math.round(Math.abs(o))}_updateSensorLocationSymbol(){switch(this._sensorLocationSymbolType){case"simple-marker":this.sensorLocationSymbol=this.layer.sensorSymbol.clone(),this.sensorLocationSymbol.angle=this.symbolAngle,this._sensorLocationGraphic.symbol=this.sensorLocationSymbol.clone();break;case"picture-marker":this.sensorLocationSymbol=this.layer.sensorSymbol,this.sensorLocationSymbol.angle=this.symbolAngle,this._sensorLocationGraphic.symbol=this.sensorLocationSymbol;break;case"cim":this.sensorLocationSymbol=this.layer.sensorSymbol,ne(this.sensorLocationSymbol,this.symbolAngle,!0),this._sensorLocationGraphic.symbol=this.sensorLocationSymbol}}_updateFrameCenterSymbol(){this.layer?.frameCenterSymbol&&(this._frameCenterGraphic.symbol=this.layer.frameCenterSymbol.clone())}_updateFrameOutlineSymbol(){this.layer?.frameOutlineSymbol&&(this._frameOutlineGraphic.symbol=this.layer.frameOutlineSymbol.clone())}_updateSensorSightlineSymbol(){this.layer?.sensorSightLineSymbol&&(this._sensorSightlineGraphic.symbol=this.layer.sensorSightLineSymbol.clone())}_updateSensorTrailSymbol(){this.layer?.sensorTrailSymbol&&(this._sensorTrailGraphic.symbol=this.layer.sensorTrailSymbol.clone())}async _addOverlayMultipoint(){if(!this.layer.videoElement)return;const r=new ue(this.layer.videoElement);this.addAttachHandles([c((()=>[this.layer.frameHorizonPoints,this.layer.groundControlPoints,this.layer.frameOpacity,this.layer.telemetryDisplay?.frame]),(()=>{const{visibleTelemetryElements:e}=this;r.frameHorizonPoints=this.layer.frameHorizonPoints,r.groundControlPoints=this.layer.groundControlPoints,r.opacity=this.layer.frameOpacity,r.visible=e?.frame??!1}),p)]),this._overlayContainer.addChild(r),this.view.stage.requestRender()}};S([L()],f.prototype,"graphicsView",void 0),S([L()],f.prototype,"layer",void 0),S([L({types:le})],f.prototype,"sensorLocationSymbol",void 0),S([L()],f.prototype,"symbolAngle",void 0),S([L({type:U})],f.prototype,"visibleTelemetryElements",void 0),f=S([he("esri.views.2d.layers.VideoLayerView2D")],f);const We=f;export{We as default};

import{oK as f,ar as p,oL as u,au as S,oM as d,oN as y,oO as i,oP as x,oQ as O,oR as h,cR as n,oS as N,oT as J,b9 as P,oU as B,oV as g,oW as w,oX as b,oY as k,oZ as v,o_ as z,o$ as T,p0 as D,p1 as $,f4 as R,o8 as j}from"./chunk-BLrLWCUc.js";import"./chunk-CWUYlh1e.js";import"./chunk-BDqMgIU1.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */var l;let m=l=class extends f{constructor(){super(...arguments),this.type="identity"}clone(){return new l}};p([u({IdentityXform:"identity"})],m.prototype,"type",void 0),m=l=p([S("esri.layers.support.rasterTransforms.IdentityTransform")],m);const F=m,I={GCSShiftXform:y,IdentityXform:F,PolynomialXform:d};function E(a){if(!a?.type)return null;const o=I[a?.type];if(o){const e=new o;return e.read(a),e}return null}class Bt{convertVectorFieldData(t){const o=i.fromJSON(t.pixelBlock),e=x(o,t.type);return Promise.resolve(e!=null?e.toJSON():null)}computeStatisticsHistograms(t){const o=i.fromJSON(t.pixelBlock),e=O(o);return Promise.resolve(e)}async decode(t){const o=await h(t.data,t.options);return o&&o.toJSON()}symbolize(t){t.pixelBlock=i.fromJSON(t.pixelBlock),t.extent=t.extent?n.fromJSON(t.extent):null;const o=this.symbolizer.symbolize(t);return Promise.resolve(o!=null?o.toJSON():null)}async updateSymbolizer(t){this.symbolizer=N.fromJSON(t.symbolizerJSON),t.histograms&&this.symbolizer?.rendererJSON.type==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=J(t.rasterFunctionJSON)}async process(t){const o=this.rasterFunction.process({extent:n.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map(e=>e!=null?i.fromJSON(e):null),primaryPixelSizes:t.primaryPixelSizes?.map(e=>e!=null?P.fromJSON(e):null),primaryRasterIds:t.primaryRasterIds});return o!=null?o.toJSON():null}stretch(t){const o=this.symbolizer.simpleStretch(i.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(o?.toJSON())}estimateStatisticsHistograms(t){const o=B(i.fromJSON(t.srcPixelBlock));return Promise.resolve(o)}split(t){const o=g(i.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel??0,t.useBilinear===!1);return o&&o.forEach((e,r)=>{o.set(r,e?.toJSON())}),Promise.resolve(o)}clipTile(t){const o=i.fromJSON(t.pixelBlock),e=w({...t,pixelBlock:o});return Promise.resolve(e?.toJSON())}async mosaicAndTransform(t){const o=t.srcPixelBlocks.map(c=>c?new i(c):null),e=b(o,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let r,s=e;return t.coefs&&(s=k(e,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(r=v(t.destDimension,t.gcsGrid),s=z(s,t.isUV?"vector-uv":"vector-magdir",r)),{pixelBlock:s?.toJSON(),localNorthDirections:r}}async createFlowMesh(t,o){const e={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:r,indexData:s}=await T(t.meshType,t.simulationSettings,e,o.signal);return{result:{vertexBuffer:r.buffer,indexBuffer:s.buffer},transferList:[r.buffer,s.buffer]}}async getProjectionOffsetGrid(t){const o=n.fromJSON(t.projectedExtent),e=n.fromJSON(t.srcBufferExtent);let r=null;t.datumTransformationSteps&&(r=new D({steps:t.datumTransformationSteps})),(t.includeGCSGrid||$(o.spatialReference,e.spatialReference,r))&&await R();const s=t.rasterTransform?E(t.rasterTransform):null;return j({...t,projectedExtent:o,srcBufferExtent:e,datumTransformation:r,rasterTransform:s})}}export{Bt as default};

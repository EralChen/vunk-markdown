import{c1 as g,dc as u,ai as n,al as p,fK as w,aJ as d,aP as c,aq as y,d6 as x,aj as o}from"./chunk-Dx0VeHfy.js";import{C as _,h as f}from"./chunk-DbweChWy.js";import{b as D}from"./chunk-C5YQ0d5Y.js";import{w as H}from"./chunk-BkZXsqSJ.js";import{m as b}from"./chunk-C4Haa5O0.js";import"./chunk-DHAEDrTs.js";import"./chunk-DWeGsYYR.js";import"./chunk-7H9fqpeH.js";import"./chunk-C0iCUcfl.js";import"./chunk-BWpm2_ve.js";import"./chunk-BUvM60zF.js";import"./chunk-J3dMjFKK.js";import"./chunk-ChZp28Vs.js";import"./chunk-BUMHfC2K.js";import"./chunk-T1gcu7De.js";let l=class extends _{constructor(e){super(e),this.redrawDebounced=g((async t=>{this.redraw(((i,a)=>this._redrawImage(i,a)),t)}),2e3)}initialize(){this.addHandles([u((()=>this.view.basemapTerrain.ready),(()=>this._initializeMaximumDataResolution()),{once:!0,initial:!0}),this.layer.on("redraw",(()=>this.updatingHandles.addPromise(this.redrawDebounced())))])}_initializeMaximumDataResolution(){this.maximumDataResolution=this.layer.loaded?this.layer.serviceRasterInfo.pixelSize:null}async processResult(e,t,i){t.imageOrCanvasElement?e.image=t.imageOrCanvasElement:(e.image=document.createElement("canvas"),e.pixelData=t.pixelData,await this._redrawImage(e,i))}async _redrawImage(e,t){if(!(e.image instanceof HTMLCanvasElement)||e.pixelData==null)throw new Error;const i=e.image,a=i.getContext("2d"),m=await this.layer.applyRenderer(e.pixelData,{signal:t}),s=this.layer.applyFilter(m).pixelBlock;if(s==null)throw new Error;i.width=s.width,i.height=s.height;const h=a.createImageData(s.width,s.height);h.data.set(s.getAsRGBA()),a.putImageData(h,0,0)}};l=n([p("esri.views.3d.layers.ImagerySubView3D")],l);let r=class extends b(f){constructor(){super(...arguments),this.type="imagery-3d"}get highlightOptions(){return null}get pixelData(){return null}initialize(){const e=()=>this._updatingHandles.addPromise(this.refreshDebounced());this._updatingHandles.add((()=>this.layer?.exportImageServiceParameters?.version),e),this._updatingHandles.add((()=>this.layer?.renderer),e),this._updatingHandles.add((()=>this.timeExtent),e),this._highlightHelper=new H({view:this.view,layer:this.layer,updatingHandles:this._updatingHandles}),this.addHandles([w(this._highlightHelper),d((()=>this.suspended),(t=>this._highlightHelper.suspended=t),c)])}_initSubView(){this.addHandles([d((()=>this.layer.renderer),(e=>this._recreateSubView(e)),y)])}_recreateSubView(e){const t=e?.type==="flow",i=this.subView?.type==="flow",a=this.subView;a&&t===i||(this.subView=t&&x("enable-feature:3d-flow")?new D({layerView:this}):new l({layerView:this}),a?.destroy())}getFetchOptions(){return{timeExtent:this.timeExtent}}highlight(e,t){return this._highlightHelper.highlight(e,t)}isUpdating(){return super.isUpdating()||this._highlightHelper.updating}};n([o()],r.prototype,"highlightOptions",null),n([o()],r.prototype,"pixelData",null),r=n([p("esri.views.3d.layers.ImageryLayerView3D")],r);const F=r;export{F as default};

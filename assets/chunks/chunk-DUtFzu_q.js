import"./chunk-Dpk1TJd9.js";import{dk as c,L as n,dl as p,dm as m,dn as f}from"./chunk-CuaFhuP3.js";import"./chunk-iOPJXyP1.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-DGmg3LSc.js";function ot(a,t,e,i){return new w(a,t,e,i)}class b{constructor(t,e,i){this._executor=t,this._data=e,this._impl=i,this._closed=!1,this._resolver=n(),this._impl.open(this)}assertOpen(){if(this._closed)throw new Error("Batch closed.")}get data(){return this.assertOpen(),this._data}get results(){return this._resolver.promise}send(){try{this.assertOpen(),this._closed=!0,this._executor.resume(this),this._impl.close(this),p(this._resolver,this._impl.execute(this._data))}catch(t){this._resolver.reject(t)}}}class w{constructor(t,e,i,s){if(this._runJob=e,this._maxRunning=i,this._abortSignal=s,this._jobIdSeq=0,this._running=new Set,this._blocked=new Set,this._openBatches=new Map,this._state="ready",this._runResolver=null,i<1)throw new Error(`_maxRunning=${i} but cannot be < 1`);this._todo=t[Symbol.iterator](),this._queue=new c({concurrency:1,process:async r=>{if(r.type==="start"){const{id:o,args:d}=r,h=n(),u=n(),l={id:o,interrupt:h,finished:u.promise};return p(u,this._runJob(d,{id:o,yieldFor:_=>this.yieldFor(l,_)}).then((()=>{this._blocked.has(o)&&this._fail(new Error(`job ${o} completed before resuming`)),this._running.delete(o)||this._fail(new Error(`job ${o} not running?`))}))),await Promise.race([h.promise,l.finished]),void this._tryQueue()}if(r.type==="continue")return r.job.interrupt=n(),r.data.status==="fulfilled"?r.continuation.resolve(r.data.value):r.continuation.reject(r.data.reason),await Promise.race([r.job.interrupt.promise,r.job.finished]),void this._tryQueue()}})}openBatch(t,e){return new b(this,t,e)}_fail(t,e=!1){if(this._runResolver?.reject(t),this._state="stopped",!e)throw t}_schedule(t){this._queue.push(t).catch((e=>this._fail(e,!0)))}_tryQueue(){if(this._state==="running")if(this._abortSignal?.aborted)this._fail(m(),!0);else{if(this._running.size<this._maxRunning){const t=this._todo.next();if(!t.done){const e=this._jobIdSeq++;return this._running.add(e),void this._schedule({type:"start",id:e,args:t.value})}}if(this._running.size===0)return this._runResolver?.resolve(),this._runResolver=null,void(this._state="stopped");if(this._blocked.size===this._running.size){let t=null,e=-1/0;for(const[i,s]of this._openBatches)s.size>e&&(t=i,e=s.size);return t==null&&this._fail(new Error("deadlock")),void t.send()}}}resume(t){const e=this._openBatches.get(t);if(this._openBatches.delete(t),e!=null)for(const i of e)this._blocked.delete(i)||this._fail(new Error(`job ${i} not suspended`))}async yieldFor(t,e){e.assertOpen(),this._running.has(t.id)||this._fail(new Error(`job ${t.id} not running`)),this._blocked.has(t.id)&&this._fail(new Error(`job ${t.id} already suspended`)),this._blocked.add(t.id),f(this._openBatches,e,(()=>new Set)).add(t.id),t.interrupt==null&&this._fail(new Error(`job ${t.id} hasn't resumed yet`)),t.interrupt.resolve(),t.interrupt=null;const i=n();let s;try{s={status:"fulfilled",value:await e.results}}catch(r){s={status:"rejected",reason:r}}return this._schedule({type:"continue",continuation:i,data:s,job:t}),i.promise}run(){this._state!=="ready"&&this._fail(new Error(`executor not ready to start. state=${this._state}`));const t=n();return this._state="running",this._runResolver=t,this._tryQueue(),t.promise}}export{ot as createBatchExecutor};

import{jR as C,aP as A,aX as T,V as j,f0 as H,kn as J,ew as V,cR as k,b$ as _,ar as r,as as s,f1 as D,au as F,fz as L,cL as G,cO as U,aT as X,dg as Y}from"./chunk-CxUoqtmM.js";import{d as N}from"./chunk-DGBTn94Z.js";import"./chunk-BU9ye7sd.js";import"./chunk-RlmIMeXG.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-CILpPTV7.js";const E=j.ofType(N);let l=class extends C{constructor(e){super(e),this.type="viewshed",this._extent=null}initialize(){this.addHandles(A(()=>this._computeExtent(),e=>{e.pending==null&&(this._extent=e.extent)},T))}get viewsheds(){return this._get("viewsheds")||new E}set viewsheds(e){this._set("viewsheds",H(e,this.viewsheds,E))}get spatialReference(){for(const e of this.viewsheds)if(e.observer!=null)return e.observer.spatialReference;return null}get extent(){return this._extent}get requiredPropertiesForEditing(){return this.viewsheds.items.map(({observer:e})=>e)}async waitComputeExtent(){const e=this._computeExtent();e.pending!=null&&await e.pending}_computeExtent(){const{spatialReference:e}=this;if(e==null)return{pending:null,extent:null};const i=this.viewsheds.filter(t=>t.observer!=null),m=i.map(t=>t.observer).toArray(),a=J(m,e);return a.pending!=null?{pending:a.pending,extent:null}:{pending:null,extent:a.geometries.map((t,p)=>{const v=i.at(p);return t!=null&&v!=null?this._computeViewshedExtent(this.viewsheds.at(p),t):null}).filter(t=>t!=null).reduce((t,p)=>B(t,p),null)}}_computeViewshedExtent(e,i){const{farDistance:m,heading:a,tilt:t,horizontalFieldOfView:p,verticalFieldOfView:v}=e,{spatialReference:z}=i,g=p/2,x=v/2,O=m/z.metersPerUnit,S=[V.normalize(a-g),a,V.normalize(a+g)],u=k.fromPoint(i),w=y=>{const d=S.map(o=>V.normalize(o-y));if(d[0]>d[2]||p===360)return O;const h=d.map(o=>Math.abs(o>180?360-o:o)).reduce((o,f)=>o>f?f:o);return h>90?0:O*Math.cos(_(h))};u.xmax+=w(90),u.xmin-=w(-90),u.ymax+=w(0),u.ymin-=w(180);const c=i.z;if(c!=null){let y=c,d=c;const h=t-90,o=L(h+x,-90,90),f=L(h-x,-90,90),b=z?.isGeographic?m:O;y+=b*$(o),d+=b*$(f);const q=P(x)*b,M=$(h)*q*(1-P(g));t<90&&(y-=M),t>90&&(d-=M),u.zmax=Math.max(y,c),u.zmin=Math.min(d,c)}return u}clear(){this.viewsheds.removeAll()}};function B(e,i){return e==null?i:i==null?e:e.union(i)}function P(e){return Math.cos(_(e))}function $(e){return Math.sin(_(e))}r([s({type:["viewshed"]})],l.prototype,"type",void 0),r([s({cast:D,type:E,nonNullable:!0})],l.prototype,"viewsheds",null),r([s({readOnly:!0})],l.prototype,"spatialReference",null),r([s()],l.prototype,"_extent",void 0),r([s({readOnly:!0})],l.prototype,"extent",null),r([s({readOnly:!0})],l.prototype,"requiredPropertiesForEditing",null),l=r([F("esri.analysis.ViewshedAnalysis")],l);const R=l;let n=class extends G(U(X)){constructor(e){super(e),this.type="viewshed",this.operationalLayerType="ViewshedLayer",this.source=new R,this.opacity=1}initialize(){this.addHandles(A(()=>this.source,(e,i)=>{i!=null&&i.parent===this&&(i.parent=null),e!=null&&(e.parent=this)},T))}async load(){return this.addResolvingPromise(this.source.waitComputeExtent()),this}get spatialReference(){return this.source.spatialReference}get fullExtent(){return this.source.extent}releaseAnalysis(e){this.source===e&&(this.source=new R)}get analysis(){return this.source}set analysis(e){this.source=e}get viewsheds(){return this.source.viewsheds}set viewsheds(e){this.source.viewsheds=e}writeViewsheds(e,i,m,a){i.viewsheds=e.filter(t=>t.isValid()).map(t=>t.toJSON(a)).toJSON()}};r([s({json:{read:!1},readOnly:!0})],n.prototype,"type",void 0),r([s({type:["ViewshedLayer"]})],n.prototype,"operationalLayerType",void 0),r([s({type:R,nonNullable:!0})],n.prototype,"source",void 0),r([s({readOnly:!0})],n.prototype,"spatialReference",null),r([s({readOnly:!0})],n.prototype,"fullExtent",null),r([s({readOnly:!0,json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],n.prototype,"opacity",void 0),r([s({type:["show","hide"]})],n.prototype,"listMode",void 0),r([s({type:j.ofType(N),json:{write:{ignoreOrigin:!0},origins:{"web-scene":{write:{ignoreOrigin:!0}}}}})],n.prototype,"viewsheds",null),r([Y("web-scene","viewsheds")],n.prototype,"writeViewsheds",null),n=r([F("esri.layers.ViewshedLayer")],n);const Ne=n;export{Ne as default};

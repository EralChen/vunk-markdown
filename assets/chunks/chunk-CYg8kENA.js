const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/chunks/chunk-C3HZfae3.js","assets/chunks/chunk-DadqOv6U.js","assets/chunks/chunk-CPKck_yD.js","assets/chunks/chunk-Caop-L73.js"])))=>i.map(i=>d[i]);
import{_ as H}from"./chunk-CPKck_yD.js";import{iK as j,b2 as q,pA as Q,oe as T,n as U,gC as z,aC as y,pB as B,aq as N,aG as k,aF as F,mI as K,pC as W,aJ as J,nN as C,dd as Z,pD as Y,aM as X,aD as ee,A as x,bg as S,pE as te,gD as re,pF as se,pG as ie,cK as ae,b9 as oe,bf as A,nX as ne,k4 as de,b8 as le,pH as he,pI as ue,iI as G,b1 as ce,p5 as pe,aO as $,b_ as ge,de as _e,p6 as L,pJ as me,pK as fe,ai as c,aj as g,gI as ye,fL as be,al as ve}from"./chunk-DadqOv6U.js";import{A as P,T as Ie}from"./chunk-qfNqIWDJ.js";import{l as xe}from"./chunk-BWusSGZf.js";import{D as Ee,h as we,e as Ne}from"./chunk-BQR9coaH.js";import{a as Ce,s as Oe,b as De,c as Fe,d as Se,i as Ae}from"./chunk-CTQPFery.js";import{u as Ge,t as $e}from"./chunk-BkeCGpL-.js";import{i as Pe}from"./chunk-DABg5Kr-.js";import"./chunk-Cq5GrI5T.js";import"./chunk-tw5zf4Fb.js";import"./chunk-BOswdbvs.js";import"./chunk-iZleLvHO.js";import"./chunk-BqtF69g6.js";import"./chunk-CcEbRgUF.js";import"./chunk-CXbPWOUs.js";import"./chunk-BXWC5oiM.js";import"./chunk--Yp3882x.js";import"./chunk-CtCZxQAF.js";import"./chunk-BZlErB4t.js";import"./chunk-DzaTkaQi.js";import"./chunk-Dc8--CBJ.js";import"./chunk-DNEapukN.js";import"./chunk-CtoNrSeW.js";import"./chunk-Dlnz5bFj.js";import"./chunk-DzjOxNRv.js";import"./chunk-DGkpYqI6.js";import"./chunk-BuSrL1F6.js";import"./chunk-Elt058NQ.js";import"./chunk-Dqa-WBmj.js";class R extends j{constructor(e){super("SceneLayerWorker","dracoDecompressPointCloudData",{dracoDecompressPointCloudData:r=>[r.geometryBuffer]},e,{hasInitialize:!0})}}class Re extends q{constructor(e,r){super(),this._updateAndCompare=e,this._notifyUpdated=r,this._nodes=new Map,this._graphics=new Map,this._duplicates=new Map}clear(){if(this._graphics.size>0){const e=this.toArray();this._graphics.clear(),this.emit("change",{added:[],removed:e})}this._nodes.clear()}get length(){return this._graphics.size}get(e){return this._graphics.get(e)}getNode(e){return this._nodes.get(e)}hasNode(e){return this._nodes.has(e)}nodes(){return this._nodes.values()}addNode(e,r){this._nodes.set(e,r);const s=r.graphics;if(s.length===0)return;const i=new Set;for(let o=0;o<s.length;o++){const n=s[o],d=n.objectId,p=this._graphics.get(d);if(p){i.add(d),n!==p&&(s[o]=p);const h=this._duplicates.get(d);h?h.push(e):this._duplicates.set(d,[p.nodeIndex,e])}else n.nodeIndex=e,this._graphics.set(d,n)}i.size&&this._updateForeignGraphics(r);const a=i.size>0?s.filter((o=>!i.has(o.objectId))):s;a.length>0&&this.emit("change",{added:a,removed:[]})}removeNode(e){const r=this._nodes.get(e);if(!r)return;this._nodes.delete(e);const s=new Set,i=[];for(const a of r.graphics){const o=a.objectId,n=this._graphics.get(o);if(!n)continue;const d=this._duplicates.get(o);if(d){const p=d.indexOf(e);if(p===-1)continue;if(d.splice(p,1),n.nodeIndex===e){let h=this.getNode(d[0]);for(let l=1;l<d.length;l++){const f=this.getNode(d[l]);(h==null||f!=null&&f.node.level>h.node.level)&&(h=f)}h!=null&&s.add(h)}d.length===1&&this._duplicates.delete(o)}else this._graphics.delete(o),i.push(a)}i.length>0&&this.emit("change",{added:[],removed:i}),s.forEach((a=>this._updateForeignGraphics(a)))}_updateForeignGraphics(e){const r=[],s=e.node.index,i=e.node.level;let a=0;for(;a<e.graphics.length;){const o=e.graphics[a].nodeIndex;if(o===s){a++;continue}let n=1;for(;a+n<e.graphics.length&&e.graphics[a+n].nodeIndex===o;)n++;const d=this.getNode(o);if(d!=null&&d.node.level>i)a+=n;else{for(let p=a;p<a+n;p++){const h=e.graphics[p];h.nodeIndex=s,this._updateAndCompare(h,e,p)&&r.push(h)}a+=n}}r.length>0&&this._notifyUpdated(r)}toArray(){return Array.from(this._graphics.values())}find(e){return Q(this._graphics,e)}some(e){return T(this._graphics,e)}forEach(e){this._graphics.forEach((r=>e(r)))}forEachNode(e){this._nodes.forEach(((r,s)=>e(r,s)))}get nodeCount(){return this._nodes.size}_checkInvariants(){const e=new Map;this._nodes.forEach(((r,s)=>{r.graphics.forEach((i=>{e.set(i.objectId,1+(e.get(i.objectId)??0)),this._duplicates.get(i.objectId)}))})),e.forEach(((r,s)=>{const i=this._graphics.get(s);if(!i||!this._nodes.get(i.nodeIndex))return;const a=this._duplicates.get(s);a&&a.forEach((o=>{this._nodes.get(o)}))}))}}const M=Ae();class Me{constructor(e,r,s,i){this.graphics=e,this.featureIds=r,this.attributeInfo=s,this.node=i}get cachedMemory(){return this.graphics.reduce(((e,r)=>me(r)+e),fe(this.featureIds)+1024)}}let u=class extends Ge($e(Pe(xe(Se)))){constructor(){super(...arguments),this.type="scene-layer-graphics-3d",this._queryEngine=null,this._memCache=null,this._interactiveEditingSessions=new Map,this._pendingEditsQueue=Promise.resolve(),this.loadedGraphics=new Re(((t,e,r)=>Ve(t,e,r)),(t=>this.processor.graphicsCore.recreateGraphics(t))),this.holeFilling="always",this.progressiveLoadFactor=1,this.supportsHeightUnitConversion=!0,this._coordinatesOutsideExtentErrors=0,this._maxCoordinatesOutsideExtentErrors=20}tryRecycleWith(t,e){return t.url===this.layer.url&&this._i3sOverrides.isEmpty?t.load(e).then((()=>{U(e),z(this.layer,t,this._i3sOverrides),this.layer=t,this._i3sOverrides.destroy();const r=this.view.resourceController?.memoryController;this._i3sOverrides=new P({view:this.view,layer:t,memoryController:r}),y(this._queryEngine),this._setupQueryEngine(),this.processor.resetObjectStates()})):null}initialize(){this.addResolvingPromise(this.layer.indexInfo);const t=this.view.resourceController?.memoryController;this._i3sOverrides=new P({view:this.view,layer:this.layer,memoryController:t}),B(this.layer,this.view.spatialReference,this.view.viewingMode),this._fieldsHelper=new Ce({layerView:this}),this._updatingHandles.add((()=>this.layer.rangeInfos),(e=>this._rangeInfosChanged(e)),N),this._updatingHandles.add((()=>this.layer.renderer),((e,r)=>this._rendererChange(e,r))),this._updatingHandles.add((()=>[this.parsedDefinitionExpression,this.layer.excludeObjectIds]),(()=>this._filterChange())),this._set("processor",new Ee({owner:this,preferredUpdatePolicy:k.ASYNC,scaleVisibilityEnabled:!F(),filterVisibilityEnabled:!0,timeExtentEnabled:!1,frustumVisibilityEnabled:!1,elevationAlignmentEnabled:!0,elevationFeatureExpressionEnabled:!1,setUidToIdOnAdd:!1,dataExtent:this.layer.fullExtent,updateClippingExtent:e=>this._updateClippingExtent(e)})),this.processor.elevationAlignment?.events.on("invalidate-elevation",(({extent:e,spatialReference:r})=>this._controller.updateElevationChanged(e,r))),this.supportsHeightUnitConversion&&(this._verticalScale=K("point",this.layer.spatialReference,this.view.spatialReference)),this.addResolvingPromise(this.processor.when()),this._memCache=this.view.resourceController.memoryController.newCache(`psl-${this.uid}`),this._controller=new Ie({layerView:this}),W(this.layer.geometryDefinitions)&&(this._worker=new R((e=>this.view.resourceController.immediate.schedule(e)))),this.addHandles(this.layer.on("apply-edits",(e=>this._updatingHandles.addPromise(e.result)))),this.addHandles([this.layer.on("edits",(e=>{const r=this._pendingEditsQueue.then((()=>this._handleEdits(e))).then();this._pendingEditsQueue=r,this._updatingHandles.addPromise(r)})),J((()=>C.I3S_TREE_SHOW_TILES),(e=>{if(e&&!this._treeDebugger){const r=this._controller.crsIndex;H(()=>import("./chunk-C3HZfae3.js"),__vite__mapDeps([0,1,2,3])).then((({I3STreeDebugger:s})=>{!this._treeDebugger&&C.I3S_TREE_SHOW_TILES&&(this._treeDebugger=new s({lv:this,view:this.view,nodeSR:r}))}))}else e||!this._treeDebugger||C.I3S_TREE_SHOW_TILES||(this._treeDebugger.destroy(),this._treeDebugger=null)}),N)]),this.when((()=>{this._setupQueryEngine(),this._updatingHandles.add((()=>this.maximumNumberOfFeatures),(e=>this._controller.featureTarget=e),N),this._updatingHandles.add((()=>this.suspended),(e=>{e&&this._removeAllNodeData()}))}))}destroy(){this._treeDebugger=y(this._treeDebugger),this._i3sOverrides=y(this._i3sOverrides),this._set("processor",y(this.processor)),this._controller=y(this._controller),this._queryEngine=y(this._queryEngine),this._worker=y(this._worker),this._memCache=y(this._memCache),this.loadedGraphics.clear(),this._fieldsHelper=y(this._fieldsHelper)}get i3slayer(){return this.layer}get layerViewUid(){return this.uid}get updatingProgressValue(){return this._controller?.updatingProgress??1}get visibleAtCurrentScale(){return F()?Z(this.layer.effectiveScaleRange,this.view.scale):!this.processor?.scaleVisibilitySuspended}get requiredFields(){return this._fieldsHelper?.requiredFields??[]}get maximumNumberOfFeatures(){return this.processor?.graphicsCore?.displayFeatureLimit?.maximumNumberOfFeatures??0}set maximumNumberOfFeatures(t){t!=null?(this._override("maximumNumberOfFeatures",t),this._controller.fixedFeatureTarget=!0):(this._clearOverride("maximumNumberOfFeatures"),this._controller.fixedFeatureTarget=!1)}get maximumNumberOfFeaturesExceeded(){return!this.suspended&&!!this._controller?.useMaximumNumberOfFeatures&&!this._controller.leavesReached}get _excludeObjectIds(){return new Set(this.layer.excludeObjectIds)}get lodFactor(){return this.layer.semantic==="Labels"?1:this.view.qualitySettings.sceneService.point.lodFactor}get hasM(){return!1}get hasZ(){return!0}get contentVisible(){return!this.suspended&&!!this._controller?.rootNodeVisible}get legendEnabled(){return this.contentVisible&&this.i3slayer?.legendEnabled===!0}async whenGraphicAttributes(t,e){return Y(this.layer,t,this._getObjectIdField(),e,(()=>[...this.loadedGraphics.nodes()]))}getHit(t){if(!this.loadedGraphics)return null;const e=X(this.loadedGraphics.find((s=>s.uid===t)),this.layer),r=this._getObjectIdField();return e?.attributes?.[r]?(e.layer=this.layer,e.sourceLayer=this.layer,{type:"graphic",graphic:e,layer:e.layer}):null}whenGraphicBounds(t,e){return this.processor.whenGraphicBounds(t,e)}computeAttachmentOrigin(t,e){return this.processor.computeAttachmentOrigin(t,e)}isUpdating(){return!!(this._controller?.updating||this.processor?.updating||this._fieldsHelper?.updating||this.layerFilterUpdating)}highlight(t,e){return this.processor.highlight(t,this.layer.objectIdField,e?.name??ee)}get updatePolicy(){return this.processor.graphicsCore.effectiveUpdatePolicy}createInteractiveEditSession(t){return Oe(this._attributeEditingContext,t)}async _decompressBinaryPointData(t,e){const r={geometryBuffer:t.geometryBuffer};this._worker==null&&(this._worker=new R((i=>this.view.resourceController.immediate.schedule(i))));const s=await this._worker.invoke(r,e);if(s==null)throw new Error("Failed to decompress Draco point data");return{positionData:s.positions,featureIds:s.featureIds}}async addNode(t,e,r){if(!O(e)&&!Le(e))throw new Error;if(this.loadedGraphics.hasNode(t.index))return void x.getLogger(this).error("I3S node "+t.id+" already added");const s=this.layer.fullExtent!=null?He(this.layer.fullExtent.clone(),.5):null,{featureIds:i,pointPositions:a}=O(e)?await this._extractBinaryPointPositions(t,e,r):this._extractLegacyPointPositions(e),o=new Array;this._validatePositions(t,i,a,s,o);const n=this._controller.crsVertex,d=this.view.spatialReference;S(a,n,0,a,d,0,i.length);const p=O(e)?t.level:0,h=this._createGraphics(i,a,t.index,p),l=new Me(h,i,e.attributeDataInfo,t);if(await this._i3sOverrides.applyAttributeOverrides(l.featureIds,e.attributeDataInfo,r),t.numFeatures=l.graphics.length,this._updateNodeMemory(t),D(l),o.length>0&&(this._computeObb(t,o,n),this._controller.updateVisibility(t.index)),!this._controller.isGeometryVisible(t))return void this._cacheNodeData(l);if(this._verticalScale!=null)for(const I of l.graphics)this._verticalScale(I.geometry);const f=this.view.stage.renderView.olidRenderHelper;if(f){const I=te(this.view,this.uid);for(let _=0;_<l.featureIds.length;_++){const E=l.featureIds[_];f.setUidToObjectAndLayerId(E,l.graphics[_].uid,this.layer.id,this.uid,this.layer.popupEnabled&&!I&&re(this.layer,this.view.popup?.defaultPopupTemplateEnabled),l.node.resources.attributes,_)}}this.loadedGraphics.addNode(t.index,l),this._controller.updateLoadStatus(t.index,!0),this._filterNode(l),this._treeDebugger&&this._treeDebugger.update()}_computeObb(t,e,r){const s=this._controller.crsIndex,i=s.isGeographic?this.view.renderSpatialReference:s;S(e,r,0,e,i,0),t.serviceObbInIndexSR=se(new ie(e,3)),s.isGeographic&&(ae(t.serviceObbInIndexSR.center,i,v,s),t.serviceObbInIndexSR.center=v)}isNodeLoaded(t){return this.loadedGraphics.hasNode(t)}isNodeReloading(){return!1}updateNodeState(){}getNodeComponentHandle(){}async _extractBinaryPointPositions(t,e,r){const s=await this._decompressBinaryPointData(e,r),i=s.positionData,a=3,o=i.length/a,n=A(3*o),d=t.serviceObbInIndexSR!=null?t.serviceObbInIndexSR.center:ne,p=Math.abs(d[2])*2**-20;for(let h=0;h<o;h++){const l=h*a;n[l]=i[l]+d[0],n[l+1]=i[l+1]+d[1],n[l+2]=i[l+2]+d[2],Math.abs(n[l+2])<p&&(n[l+2]=0)}return{featureIds:s.featureIds?de(s.featureIds):[],pointPositions:n}}_extractLegacyPointPositions(t){const e=t.pointData.length,r=A(3*e),s=new Array;for(let i=0;i<e;i++){const a=t.pointData[i],o=a.featureDataPosition,n=o.length,d=a.geometries?.[0]??je[n],p=a.featureIds[0];if(d.type!=="Embedded"||d.params.type!=="points"||n<2||n>3)continue;const h=d.params.vertexAttributes?.position??[0,0,0],l=3*s.length;r[l]=o[0]+h[0],r[l+1]=o[1]+h[1],r[l+2]=n===3?o[2]+h[2]:NaN,s.push(p)}return{featureIds:s,pointPositions:r}}_validatePositions(t,e,r,s,i){if(s==null&&t.serviceObbInIndexSR)return;const a=e.length,o=3;for(let n=0;n<a;n++){const d=n*o;le(v,r[d],r[d+1],r[d+2]);const p=!Number.isNaN(r[2]);s==null||(p?he(s,v):ue(s,v))||(this._coordinatesOutsideExtentErrors<this._maxCoordinatesOutsideExtentErrors&&x.getLogger(this).error("Service Error: Coordinates outside of layer extent"),this._coordinatesOutsideExtentErrors+1===this._maxCoordinatesOutsideExtentErrors&&x.getLogger(this).error("Maximum number of errors reached. Further errors are ignored."),this._coordinatesOutsideExtentErrors++),t.serviceObbInIndexSR||i.push(v[0],v[1],v[2])}}_createGraphics(t,e,r,s){const i=t.length,a=3,o=this._getObjectIdField(),n=this.processor.graphicsCore,d=new Array,p=this.view.spatialReference;for(let h=0;h<i;h++){const l=t[h],f={};l!=null&&(f[o]=l);const I=l??G(),_=h*a,E=isNaN(e[_+2])?void 0:e[_+2],w=ce(e[_],e[_+1],E,p),b=this.loadedGraphics.get(I);if(b!=null)(b.level==null||b.level<s)&&(m.property="geometry",m.graphic=b,m.oldValue=b.geometry,m.newValue=w,b.geometry=w,b.level=s,n.graphicUpdateHandler(m)),d.push(b);else{const V=G();d.push({objectId:I,uid:V,geometry:w,attributes:f,visible:!0,nodeIndex:r,level:s})}}return d}_updateNodeMemory(t){t.memory=4096+(t.numFeatures??0)*this.processor.graphicsCore.usedMemoryPerGraphic}_cacheNodeData(t){this._memCache.put(this._getMemCacheKey(t.node),t)}_getMemCacheKey(t){return`${t.index}`}_removeAllNodeData(){this.loadedGraphics.forEachNode(((t,e)=>{if(t){const r=t.node;this._updateNodeMemory(r),this._cacheNodeData(t)}this._controller.updateLoadStatus(e,!1)})),this._treeDebugger&&this._treeDebugger.update(),this.loadedGraphics.clear()}removeNode(t){const e=this._removeNodeStageData(t);e&&(this._updateNodeMemory(e.node),this._cacheNodeData(e))}_removeNodeStageData(t){const e=this.loadedGraphics.getNode(t);return e==null?null:(this._controller.updateLoadStatus(t,!1),this.loadedGraphics.removeNode(t),this._treeDebugger&&this._treeDebugger.update(),e)}async loadCachedNodeData(t){return this._memCache?.pop(this._getMemCacheKey(t))}async addCachedNodeData(t,e,r,s){this.loadedGraphics.hasNode(t.index)?x.getLogger(this).error("I3S node "+t.id+" already added"):(await this._i3sOverrides.applyAttributeOverrides(e.featureIds,r,s),e.attributeInfo=r,this.loadedGraphics.addNode(t.index,e),this._controller.updateLoadStatus(t.index,!0),this._updateNodeMemory(t),D(e),this._filterNode(e),this._treeDebugger&&this._treeDebugger.update())}getLoadedNodeIds(){const t=[];return this.loadedGraphics.forEachNode((e=>t.push(e.node.id))),t.sort()}getVisibleNodes(){const t=new Array;return this.loadedGraphics.forEachNode((e=>t.push(e.node))),t}getLoadedNodeIndices(t){this.loadedGraphics.forEachNode(((e,r)=>t.push(r)))}getLoadedAttributes(t){const e=this.loadedGraphics.getNode(t);if(e?.attributeInfo!=null)return e.attributeInfo.loadedAttributes}getAttributeData(t){const e=this.loadedGraphics.getNode(t);if(e?.attributeInfo!=null)return e.attributeInfo.attributeData}_setAttributeData(t,e){const r=this.loadedGraphics.getNode(t);r?.attributeInfo!=null&&(r.attributeInfo.attributeData=e,this._attributeValuesChanged(r))}async updateAttributes(t,e,r){const s=this.loadedGraphics.getNode(t);s!=null&&(await this._i3sOverrides.applyAttributeOverrides(s.featureIds,e,r),s.attributeInfo=e,this._attributeValuesChanged(s))}_attributeValuesChanged(t){D(t),this._filterNode(t);const{processor:e}=this,{graphicsCore:r}=e;if(r.labelsEnabled){const s=t.node.index,i=new Array;t.graphics.forEach((a=>a.nodeIndex===s&&i.push(a.uid))),r.updateLabelingInfo(i)}e.refreshFilter()}_updateClippingExtent(t){return this._controller&&this._controller.updateClippingArea(t),!1}_getObjectIdField(){return this.layer.objectIdField||pe}_getGlobalIdField(){return this.layer.globalIdField}async _rendererChange(t,e){const{layer:{fieldsIndex:r}}=this,s=new Set;let i,a;t?(await t.collectRequiredFields(s,r),i=Array.from(s).sort()):i=[],s.clear(),e?(await e.collectRequiredFields(s,r),a=Array.from(s).sort()):a=[],i.length===a.length&&i.every(((o,n)=>i[n]===a[n]))||this._reloadAllNodes()}_rangeInfosChanged(t){t!=null&&t.length>0&&x.getLogger(this).warn("Unsupported property: rangeInfos are currently only serialized to and from web scenes but do not affect rendering.")}_filterChange(){this.loadedGraphics.forEachNode((t=>this._filterNode(t)))}_reloadAllNodes(){this._removeAllNodeData(),this._controller&&this._controller.restartNodeLoading()}_filterNode(t){const e=this.parsedDefinitionExpression,r=this._excludeObjectIds,s=this._getObjectIdField();for(const i of t.graphics){const a=i.visible,o=this._evaluateClause(e,i),n=!r.has(i.attributes[s]);i.visible=o&&n,a!==i.visible&&(m.graphic=i,m.property="visible",m.oldValue=a,m.newValue=i.visible,this.processor.graphicsCore.graphicUpdateHandler(m))}}createQuery(){const t={outFields:["*"],returnGeometry:!0,outSpatialReference:this.view.spatialReference};return this.filter?.createQuery(t)??new $(t)}queryFeatures(t,e){return this._queryEngine.executeQuery(this._ensureQuery(t),e?.signal)}queryObjectIds(t,e){return this._queryEngine.executeQueryForIds(this._ensureQuery(t),e?.signal)}queryFeatureCount(t,e){return this._queryEngine.executeQueryForCount(this._ensureQuery(t),e?.signal)}queryExtent(t,e){return this._queryEngine.executeQueryForExtent(this._ensureQuery(t),e?.signal)}_ensureQuery(t){return this._addDefinitionExpressionToQuery(t==null?this.createQuery():$.from(t))}_setupQueryEngine(){const{layer:t,view:e,hasM:r,hasZ:s}=this,{spatialReference:i,resourceController:a}=e,o=new Ne(i,t,a,(()=>this.processor.featureStore),s,r);this._queryEngine=new we({context:o,priority:ge.FEATURE_QUERY_ENGINE})}get usedMemory(){return this.processor?.graphicsCore?.usedMemory??0}get unloadedMemory(){return .8*((this._controller?.unloadedMemoryEstimate??0)+(this.processor?.graphicsCore?.unprocessedMemoryEstimate??0))}get ignoresMemoryFactor(){return this._controller&&this._controller.fixedFeatureTarget}async _handleEdits(t){const e=this._attributeEditingContext,r=await De(e,t);Fe(e,r)}get _attributeEditingContext(){const t=this._getObjectIdField(),e=this._getGlobalIdField();return{sessions:this._interactiveEditingSessions,fieldsIndex:this.layer.fieldsIndex,objectIdField:t,globalIdField:e,forEachNode:r=>this.loadedGraphics.forEachNode((s=>r(s.node,s.featureIds))),attributeStorageInfo:this.i3slayer.attributeStorageInfo??[],i3sOverrides:this._i3sOverrides,getAttributeData:r=>this.getAttributeData(r),setAttributeData:(r,s,i)=>{this._setAttributeData(r,s);const a=this.loadedGraphics.getNode(r);if(i!=null){const o=this.loadedGraphics.get(i.attributes[t]);o!=null&&this.processor.graphicsCore.recreateGraphics([o])}else a!=null&&this.processor.graphicsCore.recreateGraphics(a.graphics)},clearMemCache:()=>{}}}get performanceInfo(){return new _e(this.usedMemory,this.loadedGraphics.length,-1,this.maximumNumberOfFeatures,this.loadedGraphics.nodeCount,this.processor.graphicsCore.performanceInfo)}get test(){}};c([g()],u.prototype,"processor",void 0),c([g({type:ye})],u.prototype,"filter",void 0),c([g()],u.prototype,"loadedGraphics",void 0),c([g()],u.prototype,"i3slayer",null),c([g()],u.prototype,"layerViewUid",null),c([g()],u.prototype,"_controller",void 0),c([g()],u.prototype,"updating",void 0),c([g()],u.prototype,"suspended",void 0),c([g(be)],u.prototype,"updatingProgress",void 0),c([g()],u.prototype,"updatingProgressValue",null),c([g({readOnly:!0})],u.prototype,"visibleAtCurrentScale",null),c([g(M.requiredFields)],u.prototype,"requiredFields",null),c([g(M.availableFields)],u.prototype,"availableFields",void 0),c([g()],u.prototype,"_fieldsHelper",void 0),c([g({type:Number})],u.prototype,"maximumNumberOfFeatures",null),c([g({readOnly:!0})],u.prototype,"maximumNumberOfFeaturesExceeded",null),c([g()],u.prototype,"_excludeObjectIds",null),c([g({readOnly:!0})],u.prototype,"lodFactor",null),c([g({readOnly:!0})],u.prototype,"hasM",null),c([g({readOnly:!0})],u.prototype,"hasZ",null),c([g()],u.prototype,"contentVisible",null),c([g({readOnly:!0})],u.prototype,"legendEnabled",null),u=c([ve("esri.views.3d.layers.SceneLayerGraphicsView3D")],u);const mt=u;function Le(t){return"pointData"in t}function O(t){return"geometryBuffer"in t&&t.geometryBuffer!==null}function Ve(t,e,r){const s=e.attributeInfo;if(s?.loadedAttributes==null||s.attributeData==null)return!1;let i=!1;for(const{name:a}of s.loadedAttributes)if(s.attributeData[a]){const o=L(s.attributeData[a],r);o!==t.attributes[a]&&(t.attributes[a]=o,i=!0)}return i}function D(t){const e=t.attributeInfo;if(e?.loadedAttributes==null||e.attributeData==null)return;const r=t.node.index;for(let s=0;s<t.graphics.length;s++){const i=t.graphics[s];if(i.nodeIndex===r){i.attributes||(i.attributes={});for(const{name:a}of e.loadedAttributes)e.attributeData[a]&&(i.attributes[a]=L(e.attributeData[a],s))}}}function He(t,e){return t.xmin-=e,t.ymin-=e,t.xmax+=e,t.ymax+=e,t.zmin!=null&&t.zmax!=null&&(t.zmin-=e,t.zmax+=e),t.mmin!=null&&t.mmax!=null&&(t.mmin-=e,t.mmax+=e),t}const je={2:{type:"Embedded",params:{type:"points",vertexAttributes:{position:[0,0]}}},3:{type:"Embedded",params:{type:"points",vertexAttributes:{position:[0,0,0]}}}},v=oe(),m={graphic:null,property:null,oldValue:null,newValue:null};export{mt as default};

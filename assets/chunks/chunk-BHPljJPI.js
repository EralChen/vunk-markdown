import{s as t,lK as d,lL as w,lM as v,lN as q,lO as c,lP as x,lQ as g}from"./chunk-DYmUVOBN.js";import"./chunk-DODhI9iV.js";import"./chunk-DdHotv1K.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-SqlbPPT2.js";function h(i,e){if(!i.view)throw new t(`${e}:missing-parameters`,"'view' parameter is required for binning");if(i.sqlExpression)throw new t(`${e}:invalid-parameters`,"'sqlExpression' parameter is not supported for binning");if(i.view.type==="3d")throw new t(`${e}:invalid-parameters`,"3d view is not supported for binning")}async function E(i){if(!i?.layer||!i.field&&!i.valueExpression)throw new t("unique-values:missing-parameters","'layer' and 'field' or 'valueExpression' parameters are required");const e=i.valueExpression||i.sqlExpression,o=e&&!i.sqlExpression;if(e){if(o){if(!i.view)throw new t("unique-values:missing-parameters","View is required when 'valueExpression' is specified")}else if(!i.valueExpression)throw new t("unique-values:missing-parameters","'valueExpression' parameters are required")}i.forBinning&&h(i,"unique-values");const{layer:l,...m}=i,a=i.forBinning?d:w,s=v(l,a,i.forBinning);if(!s)throw new t("unique-values:invalid-parameters","'layer' must be one of these types: "+q(a).join(", "));const r={layerAdapter:s,...m},f=r.signal!=null?{signal:r.signal}:null;await s.load(f);const u=await c({field:r.field,field2:r.field2,field3:r.field3,valueExpression:r.valueExpression}),n=x(s,u,"unique-values:invalid-parameters");if(n)throw n;r.filter&&!r.filter.spatialRelationship&&(r.filter.spatialRelationship="intersects");const p=g(r.filter,"summary-statistics:invalid-parameters");if(p)throw p;return r}async function pi(i){const{layerAdapter:e,...o}=await E(i);return e.uniqueValues(o)}export{pi as default};

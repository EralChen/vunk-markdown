import{eS as l,c1 as d,ar as o,as as p,au as h}from"./chunk-BLrLWCUc.js";import{N as u}from"./chunk-C9I4kwlv.js";import{m as g}from"./chunk-CGB2sQek.js";import"./chunk-CWUYlh1e.js";import"./chunk-BDqMgIU1.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-DSLSEsX7.js";import"./chunk-Bj7TMkGK.js";import"./chunk-DE80m_LR.js";import"./chunk-FkRtdkac.js";import"./chunk-TvDlg1OT.js";import"./chunk-dGW_3jn1.js";import"./chunk-BYZ9-mKN.js";let a=class extends g(u){constructor(){super(...arguments),this.type="imagery-3d",this.redrawDebounced=l(async t=>{this.redraw((i,e)=>this._redrawImage(i,e),t)},2e3)}get highlightOptions(){return null}get pixelData(){return null}initialize(){this.addHandles([d(()=>this.view.basemapTerrain.ready,()=>this._initializeMaximumDataResolution(),{once:!0,initial:!0}),this.layer.on("redraw",()=>this._updatingHandles.addPromise(this.redrawDebounced()))]),this._updatingHandles.add(()=>this.layer?.exportImageServiceParameters?.version,()=>{this._updatingHandles.addPromise(this.refreshDebounced())}),this._updatingHandles.add(()=>this.layer?.renderer,()=>{this._updatingHandles.addPromise(this.refreshDebounced())}),this._updatingHandles.add(()=>this.timeExtent,()=>this._updatingHandles.addPromise(this.refreshDebounced()))}_initializeMaximumDataResolution(){this.maximumDataResolution=this.layer.loaded?this.layer.serviceRasterInfo.pixelSize:null}getFetchOptions(){return{timeExtent:this.timeExtent}}async processResult(t,i,e){i.imageOrCanvasElement?t.image=i.imageOrCanvasElement:(t.image=document.createElement("canvas"),t.pixelData=i.pixelData,await this._redrawImage(t,e))}async _redrawImage(t,i){if(!(t.image instanceof HTMLCanvasElement)||t.pixelData==null)throw new Error;const e=t.image,m=e.getContext("2d"),n=await this.layer.applyRenderer(t.pixelData,{signal:i}),r=this.layer.applyFilter(n).pixelBlock;if(r==null)throw new Error;e.width=r.width,e.height=r.height;const s=m.createImageData(r.width,r.height);s.data.set(r.getAsRGBA()),m.putImageData(s,0,0)}highlight(t){throw new Error("Not implemented")}};o([p()],a.prototype,"highlightOptions",null),o([p()],a.prototype,"pixelData",null),a=o([h("esri.views.3d.layers.ImageryLayerView3D")],a);const nt=a;export{nt as default};

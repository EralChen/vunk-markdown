import{s as t,mR as w,mS as v,mT as q,mU as c,mV as g,mW as h,mX as x,mY as y}from"./chunk-CuaFhuP3.js";import"./chunk-Dpk1TJd9.js";import"./chunk-iOPJXyP1.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-DGmg3LSc.js";function E(i,e){if(!i.view)throw new t(`${e}:missing-parameters`,"'view' parameter is required for binning");if(i.sqlExpression)throw new t(`${e}:invalid-parameters`,"'sqlExpression' parameter is not supported for binning");if(i.view.type==="3d")throw new t(`${e}:invalid-parameters`,"3d view is not supported for binning")}async function $(i){if(!i?.layer||!i.field&&!i.valueExpression)throw new t("unique-values:missing-parameters","'layer' and 'field' or 'valueExpression' parameters are required");const e=i.valueExpression||i.sqlExpression,a=e&&!i.sqlExpression;if(e){if(a){if(!i.view)throw new t("unique-values:missing-parameters","View is required when 'valueExpression' is specified")}else if(!i.valueExpression)throw new t("unique-values:missing-parameters","'valueExpression' parameters are required")}i.forBinning&&E(i,"unique-values");const{layer:p,...l}=i,u=[...w,v.ImageryLayer],o=i.forBinning?q:u,s=c(p,o,i.forBinning);if(!s)throw new t("unique-values:invalid-parameters","'layer' must be one of these types: "+g(o).join(", "));const r={layerAdapter:s,...l},f=r.signal!=null?{signal:r.signal}:null;await s.load(f);const d=await h({field:r.field,field2:r.field2,field3:r.field3,valueExpression:r.valueExpression}),n=x(s,d,"unique-values:invalid-parameters");if(n)throw n;r.filter&&!r.filter.spatialRelationship&&(r.filter.spatialRelationship="intersects");const m=y(r.filter,"summary-statistics:invalid-parameters");if(m)throw m;return r}async function li(i){const{layerAdapter:e,...a}=await $(i);return e.uniqueValues(a)}export{li as default};

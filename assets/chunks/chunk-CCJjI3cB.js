import{ar as Y,d7 as U,hT as E,f1 as j,hU as z,hV as d,A as L,hO as W,hW as D,hX as T,hY as F,hZ as _,h_ as A,h$ as G,ai as a,aj as u,al as H}from"./chunk-CET6Djna.js";import{l as I,u as Z,t as k}from"./chunk-0xPSxnqt.js";import"./chunk-BoJEKryr.js";let s=class extends Y{constructor(e){super(e),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){return this.grid?.rotateWithMap?0:U(this.view.rotation??0)}get gridRotation(){return U(this.grid?.rotation??0)}get gridCenter(){const{spatialReference:e,grid:r}=this;if(!r||!e||!E(r.center.spatialReference,e))return null;try{const t=j(r.center,e),i=e.isWrappable&&this.view?.center!=null?z(t.x,this.view.center.x,e):t.x;return d(i,t.y,t.z)}catch(t){return L.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",t),null}}get offsetScaleFactor(){const{pixelsPerStride:e,grid:r}=this;if(!r||!e)return 1;const{majorLineInterval:t,dynamicScaling:i}=r;return t<1?null:I(t,e,i)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:e}=this;return e?W(e.spacing,e.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:e}=this;return e==null?null:e*D(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:e}=this.view;return this.gridCenter?Z(this.gridCenter[0],this.gridCenter[1],e):null}get pixelsPerStride(){const{gridMetersPerStride:e,viewMetersPerPixel:r}=this;return r&&e?e/r:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(e,r,t){const{options:i,view:n}=this;if(!i?.effectiveGridEnabled||!n.grid||t.feature?.attributes&&T in t.feature.attributes)return[];const o=t.coordinateHelper.arrayToPoint(e),l=i.distance*(t.pointer==="touch"?i.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(o,l)}fetchCandidatesSync(e,r){const t=[],{grid:i,effectiveViewRotation:n,gridRotation:o,gridCenter:l,viewMetersPerPixel:S,viewMetersPerSRUnit:h,offsetScaleFactor:v,spatialReference:g,gridMetersPerStride:m,pixelsPerStride:C}=this;if(!(i&&S&&h&&l&&g&&v&&m&&C)||!i.dynamicScaling&&C<k||!E(e.spatialReference,g))return t;const P=j(e,g),V=d(P.x,P.y,P.z),p=f(V,-o,l,-n),M=m/h*v,c=q(p,M,l),{shouldSnapX:w,shouldSnapY:y}=B(c,p,r,S,h);if(!w&&!y)return[];const X=d((w?c:p)[0],(y?c:p)[1]),R=f(X,o,l,n),b=f(c,o,l,n);if(y){const x=O(c,p,M,"y"),$=f(x,o,l,n);t.push(new F({lineStart:b,lineEnd:$,targetPoint:R,isDraped:!1}))}if(w){const x=O(c,p,M,"x"),$=f(x,o,l,n);t.push(new F({lineStart:b,lineEnd:$,targetPoint:R,isDraped:!1}))}return w&&y&&t.push(new _(R,t[0],t[1],!1)),t}};a([u({constructOnly:!0})],s.prototype,"view",void 0),a([u()],s.prototype,"options",void 0),a([u()],s.prototype,"grid",null),a([u()],s.prototype,"effectiveViewRotation",null),a([u()],s.prototype,"gridRotation",null),a([u()],s.prototype,"gridCenter",null),a([u()],s.prototype,"offsetScaleFactor",null),a([u()],s.prototype,"spatialReference",null),a([u()],s.prototype,"gridMetersPerStride",null),a([u()],s.prototype,"viewMetersPerPixel",null),a([u()],s.prototype,"viewMetersPerSRUnit",null),a([u()],s.prototype,"pixelsPerStride",null),a([u()],s.prototype,"updating",null),s=a([H("esri.views.interactive.snapping.GridSnappingEngine")],s);const f=(e,r,t,i)=>{const n=A(e[0],e[1],e[2]);return G(n,G(n,n,t,r),t,i)},q=(e,r,t)=>{const i=(e[0]-t[0])/r,n=(e[1]-t[1])/r,o=Math.trunc(i),l=Math.trunc(n),S=Math.round(i%1),h=Math.round(n%1),v=t[0]+(o+S)*r,g=t[1]+(l+h)*r;return d(v,g)},B=(e,r,t,i,n)=>{if(i<=0)return{shouldSnapX:!1,shouldSnapY:!1};const o=(e[0]-r[0])/i,l=(e[1]-r[1])/i;return{shouldSnapX:Math.abs(o*n)<t,shouldSnapY:Math.abs(l*n)<t}},O=(e,r,t,i)=>{if(i==="y"){const o=r[0]>e[0]?1:-1;return d(e[0]+t*o,e[1])}const n=r[1]>e[1]?1:-1;return d(e[0],e[1]+t*n)};export{s as GridSnappingEngine};

import{lc as F,aJ as j,aP as J,V as P,gg as H,lJ as S,ce as V,Y,h as D,d7 as R,ai as s,aj as r,gh as G,al as T,cJ as A,dO as U,dR as k,aL as B,ea as I}from"./chunk-CET6Djna.js";import{c as q}from"./chunk-CG0bAgZe.js";import"./chunk-BoJEKryr.js";import"./chunk-DRQGs62l.js";const z=P.ofType(q);let a=class extends F{constructor(e){super(e),this.type="viewshed",this._extent=null}initialize(){this.addHandles(j((()=>this._computeExtent()),(e=>{e.pending==null&&(this._extent=e.extent)}),J))}get viewsheds(){return this._get("viewsheds")||new z}set viewsheds(e){this._set("viewsheds",H(e,this.viewsheds,z))}get spatialReference(){for(const e of this.viewsheds)if(e.observer!=null)return e.observer.spatialReference;return null}get extent(){return this._extent}get valid(){return this.viewsheds.every((e=>e.valid))}async waitComputeExtent(){const e=this._computeExtent();e.pending!=null&&await e.pending}_computeExtent(){const{spatialReference:e}=this;if(e==null)return{pending:null,extent:null};const o=this.viewsheds.filter((i=>i.observer!=null)),p=o.map((i=>i.observer)).toArray(),u=S(p,e);return u.pending!=null?{pending:u.pending,extent:null}:{pending:null,extent:u.geometries.map(((i,d)=>{const g=o.at(d);return i!=null&&g!=null?this._computeViewshedExtent(this.viewsheds.at(d),i):null})).filter((i=>i!=null)).reduce(((i,d)=>K(i,d)),null)}}_computeViewshedExtent(e,o){const{farDistance:p,heading:u,tilt:i,horizontalFieldOfView:d,verticalFieldOfView:g}=e,{spatialReference:E}=o,x=d/2,$=g/2,O=p/E.metersPerUnit,N=[V.normalize(u-x),u,V.normalize(u+x)],h=Y.fromPoint(o),f=v=>{const c=N.map((l=>V.normalize(l-v)));if(c[0]>c[2]||d===360)return O;const y=c.map((l=>Math.abs(l>180?360-l:l))).reduce(((l,m)=>l>m?m:l));return y>90?0:O*Math.cos(R(y))};h.xmax+=f(90),h.xmin-=f(-90),h.ymax+=f(0),h.ymin-=f(180);const w=o.z;if(w!=null){let v=w,c=w;const y=i-90,l=A(y+$,-90,90),m=A(y-$,-90,90),b=E?.isGeographic?p:O;v+=b*_(l),c+=b*_(m);const C=L($)*b,M=_(y)*C*(1-L(x));i<90&&(v-=M),i>90&&(c-=M),h.zmax=Math.max(v,w),h.zmin=Math.min(c,w)}return h}equals(e){return this===e||super.equals(e)&&D(this.viewsheds.toArray(),e.viewsheds.toArray(),((o,p)=>o.equals(p)))}clear(){this.viewsheds.removeAll()}};function K(t,e){return t==null?e:e==null?t:t.union(e)}function L(t){return Math.cos(R(t))}function _(t){return Math.sin(R(t))}s([r({type:["viewshed"]})],a.prototype,"type",void 0),s([r({cast:G,type:z,nonNullable:!0})],a.prototype,"viewsheds",null),s([r({readOnly:!0})],a.prototype,"spatialReference",null),s([r()],a.prototype,"_extent",void 0),s([r()],a.prototype,"extent",null),s([r({readOnly:!0})],a.prototype,"valid",null),a=s([T("esri.analysis.ViewshedAnalysis")],a);let n=class extends U(k(B)){constructor(t){super(t),this.type="viewshed",this.operationalLayerType="ViewshedLayer",this.source=new a,this.opacity=1}initialize(){this.addHandles(j((()=>this.source),((t,e)=>{e!=null&&e.parent===this&&(e.parent=null),t!=null&&(t.parent=this)}),J))}async load(){return this.addResolvingPromise(this.source.waitComputeExtent()),this}get spatialReference(){return this.source.spatialReference}get fullExtent(){return this.source.extent}releaseAnalysis(t){this.source===t&&(this.source=new a)}get analysis(){return this.source}set analysis(t){this.source=t}get viewsheds(){return this.source.viewsheds}set viewsheds(t){this.source.viewsheds=t}writeViewsheds(t,e,o,p){e.viewsheds=t.filter((u=>u.valid)).toJSON(p)}};s([r({json:{read:!1},readOnly:!0})],n.prototype,"type",void 0),s([r({type:["ViewshedLayer"]})],n.prototype,"operationalLayerType",void 0),s([r({type:a,nonNullable:!0})],n.prototype,"source",void 0),s([r({readOnly:!0})],n.prototype,"spatialReference",null),s([r({readOnly:!0})],n.prototype,"fullExtent",null),s([r({readOnly:!0,json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],n.prototype,"opacity",void 0),s([r({type:["show","hide"]})],n.prototype,"listMode",void 0),s([r({type:P.ofType(q),json:{write:{ignoreOrigin:!0},origins:{"web-scene":{write:{ignoreOrigin:!0}}}}})],n.prototype,"viewsheds",null),s([I("web-scene","viewsheds")],n.prototype,"writeViewsheds",null),n=s([T("esri.layers.ViewshedLayer")],n);const te=n;export{te as default};

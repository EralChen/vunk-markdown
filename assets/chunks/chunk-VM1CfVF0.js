import{F as e,s,O as m}from"./chunk-Bj5pIyxE.js";import{p as n}from"./chunk-BzZlr6tW.js";import{B as a}from"./chunk-DeQ42w1O.js";import"./chunk-C39j8-it.js";import"./chunk-DJw_0V8B.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-SqlbPPT2.js";import"./chunk-C4iW0Ukm.js";import"./chunk-BlmZw26a.js";async function tt(t,r,o){await Promise.resolve(),e(o);const i=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!i)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const p=t.cloneAndModifyVertexAttributes(new n({...i,uv:m(t.vertexAttributes.uv),color:m(t.vertexAttributes.color)}),r);return p.transform=null,p}export{tt as convertMeshVertexSpace};

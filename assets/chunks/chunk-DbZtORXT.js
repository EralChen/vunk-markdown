import{bE as j,kP as F,kQ as P,n as x,b2 as E,bj as O,kR as q,kS as G,ba as U,kT as A,kU as B,dM as H}from"./chunk-XGpVqsM_.js";async function M(t,d,l,I,o){const{elevationProvider:p,renderCoordsHelper:i}=t,{elevationInfo:f}=d,{pointsInFeatures:R,spatialReference:u}=I,g=j.fromJSON(u),h=F(f,!0),y=await P(h,g,o);x(o);const c=[],e=new Set,s=new Set,a=new O,n=E(0,0,0,j.WGS84),r=new B,w=U();n.spatialReference=g;const D=t.elevationProvider.spatialReference??t.spatialReference;for(const{objectId:S,points:v}of R){const b=l(S);if(b==null){for(const m of v)c.push(m.z??0);e.add(S);continue}b.isDraped&&s.add(S);const $=b.graphic.geometry;a.setFromElevationInfo(q($,f)),a.updateFeatureExpressionInfoContext(y,b.graphic,d);for(const{x:m,y:z,z:C}of v)n.x=m,n.y=z,n.z=C??0,await G(n,w,D,0,{signal:o}),A(w,p,a,i,r),c.push(r.z)}return{elevations:c,drapedObjectIds:s,failedObjectIds:e}}async function N(t,d,l){if(t==null||d.candidates.length===0)return k;const I=t.graphics3DGraphicsByObjectID??t.graphics3DGraphics,o=[],p=[],{renderer:i}=t,f=i!=null&&"arcadeRequired"in i&&i.arcadeRequired?H():null,R=async(e,{graphic:s,graphics3DSymbol:a})=>{const n=await f,r=await t.getRenderingInfoAsync(s,i,n,{signal:l});return r==null?[]:a.queryForSnapping(e,g,r,l)},{candidates:u,spatialReference:g}=d;for(let e=0;e<u.length;++e){const s=u[e],{objectId:a}=s,n=typeof a=="number"?I?.get(a):void 0;if(n==null)continue;const{graphics3DSymbol:r}=n;r.symbologySnappingSupported&&(o.push(R(s,n)),p.push(e))}if(o.length===0)return k;const h=await Promise.all(o);x(l);const y=[],c=[];for(let e=0;e<h.length;++e){const s=h[e],a=p[e];for(const n of s)y.push(n),c.push(a)}return{candidates:y,sourceCandidateIndices:c}}const k={candidates:[],sourceCandidateIndices:[]};export{M as l,N as r};

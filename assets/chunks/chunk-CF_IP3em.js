import{G as u}from"./chunk-BLrLWCUc.js";import{t as a,s as c}from"./chunk-B92kdZ15.js";import{j as f}from"./chunk-BALWqwPe.js";import{getSpatialReference as i,toGeometry as p,fromGeometry as s}from"./chunk-Bxyx7Yfv.js";import"./chunk-CWUYlh1e.js";import"./chunk-BDqMgIU1.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-DKexkKU1.js";import"./chunk-DwUaw_CA.js";class l{getOperatorType(){return 10303}supportsCurves(){return!0}accelerateGeometry(t,r,o){return!1}canAccelerateGeometry(t){return!1}executeMany(t,r,o){return new y(t,r,o)}execute(t,r,o){const m=t.clone();return m.applyTransformation(r),m}}class y extends a{constructor(t,r,o){super(),this.m_index=-1,this.m_transformation=r.clone(),this.m_inputGeometryCursor=t}next(){let t;if(t=this.m_inputGeometryCursor.next()){f(t),this.m_index=this.m_inputGeometryCursor.getGeometryID();const r=t.clone();return r.applyTransformation(this.m_transformation),r}return null}getGeometryID(){return this.m_index}tock(){return!0}getRank(){return 1}}const n=new l;function x(e,t){return n.execute(e,t,null)}function G(e,t){const r=n.executeMany(new c(e),t,null);return Array.from(r)}function h(){return n.supportsCurves()}function st(e,t){const r=i(e);return p(x(s(e),t.transform),r)}function ut(e,t){const r=e.map(s),o=i(e);return G(r,t.transform).map(m=>p(m,o)).filter(u)}const at=h();export{st as execute,ut as executeMany,at as supportsCurves};

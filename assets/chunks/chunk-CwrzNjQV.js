import{ha as o,hb as r,hc as c}from"./chunk-mH00GGPN.js";import{t as s}from"./chunk-CLQjzsYq.js";import{f as d}from"./chunk-Qjdnho0b.js";class l extends o{constructor(t){super("EdgeProcessingWorker","extract",{extract:e=>[e.dataBuffer],extractComponentsEdgeLocations:e=>[e.dataBuffer],extractEdgeLocations:e=>[e.dataBuffer]},t)}async process(t,e,n){return n?d(t):h(await this.invoke(new i(t),e))}async extractEdgeLocations(t,e){const n=await this.invokeMethod("extractEdgeLocations",new i(t),e);return s(n)}async extractComponentsEdgeLocations(t,e){const n=await this.invokeMethod("extractComponentsEdgeLocations",new i(t),e);return s(n)}}function h(a){return{regular:{instancesData:s(a.regular.instancesData),lodInfo:{lengths:new Float32Array(a.regular.lodInfo.lengths)}},silhouette:{instancesData:s(a.silhouette.instancesData),lodInfo:{lengths:new Float32Array(a.silhouette.lodInfo.lengths)}},averageEdgeLength:a.averageEdgeLength}}class i{constructor(t){this.dataBuffer=t.data.buffer,this.writerSettings=t.writerSettings,this.skipDeduplicate=t.skipDeduplicate,this.indices=r(t.indices)?t.indices.buffer:t.indices,this.indicesType=r(t.indices)?c(t.indices)?"Uint32Array":"Uint16Array":"Array",this.indicesLength=t.indicesLength}}export{l as a};

import{fj as D,fs as I,fl as R,s as E,fk as Q,io as v,ip as Z,iq as N,fm as P,ir as G,fn as M,ih as b,gf as B,aI as z,A as L,fo as H,I as J,fq as U,ii as w,fp as W,H as V,fi as Y,h2 as $,is as K,it as X,iu as ee}from"./chunk-Dx0VeHfy.js";import{u as te}from"./chunk-DCO25AJp.js";import{f as se}from"./chunk-Bbn_8qjQ.js";import{L as ie}from"./chunk-CmdqTyg3.js";import{S as re,E as ne,d as T,f as q,p as F,h as O}from"./chunk-CpoWAx8q.js";import"./chunk-DHAEDrTs.js";import"./chunk-zNZJ-S-7.js";import"./chunk-B-8D37i_.js";import"./chunk-YeMQfurG.js";import"./chunk-DZU2A71w.js";import"./chunk-7UZpz-SR.js";import"./chunk-By4evbYA.js";import"./chunk-DGkpYqI6.js";const ae={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsQueryAttachmentOrderByFields:!1,supportsQueryBins:!0,supportsQueryWithCacheHint:!0,supportsQueryWithDistance:!0,supportsQueryWithResultType:!0,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0},queryBinsCapabilities:re};class Fe{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){this._queryEngine?.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const i=[],[s]=await Promise.all([e.url?this._fetch(t?.signal):null,this._checkProjection(e.spatialReference)]),r=D(s,{geometryType:e.geometryType}),u=e.fields||r.fields||[],l=e.hasZ!=null?e.hasZ:r.hasZ,d=r.geometryType;let y=e.objectIdField||r.objectIdFieldName||"__OBJECTID";const m=e.spatialReference||I;let o=e.timeInfo;u===r.fields&&r.unknownFields.length>0&&i.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:r.unknownFields}});const h=new R(u);let n=h.get(y);n?(n.type!=="esriFieldTypeString"&&(n.type="esriFieldTypeOID"),n.editable=!1,n.nullable=!1,y=n.name):(n={alias:y,name:y,type:r.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},u.unshift(n));const p={};for(const a of u){if(a.name==null&&(a.name=a.alias),a.alias==null&&(a.alias=a.name),!a.name)throw new E("geojson-layer:invalid-field-name","field name is missing",{field:a});if(!Q.jsonValues.includes(a.type))throw new E("geojson-layer:invalid-field-type",`invalid type for field "${a.name}"`,{field:a});if(a.name!==n.name){const _=v(a);_!==void 0&&(p[a.name]=_)}a.length==null&&(a.length=Z(a))}if(o){if(o.startTimeField){const a=h.get(o.startTimeField);a?(o.startTimeField=a.name,a.type="esriFieldTypeDate"):o.startTimeField=null}if(o.endTimeField){const a=h.get(o.endTimeField);a?(o.endTimeField=a.name,a.type="esriFieldTypeDate"):o.endTimeField=null}if(o.trackIdField){const a=h.get(o.trackIdField);a?o.trackIdField=a.name:(o.trackIdField=null,i.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:o}}))}o.startTimeField||o.endTimeField||(i.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:o}}),o=null)}const f=d?M(d):void 0,c=h.dateFields.length?{timeZoneIANA:P}:null,g={warnings:i,featureErrors:[],layerDefinition:{...ae,drawingInfo:f??void 0,templates:N(p),extent:void 0,geometryType:d,objectIdField:y,fields:u,hasZ:!!l,timeInfo:o,dateFieldsTimeReference:c}},k={type:"object-id",fieldName:y};this._queryEngine=new ie({fieldsIndex:R.fromLayerJSON({fields:u,timeInfo:o,dateFieldsTimeReference:c}),geometryType:d,hasM:!1,hasZ:l,featureIdInfo:k,spatialReference:m,timeInfo:o,featureStore:new se({geometryType:d,hasM:!1,hasZ:l})});const j=this._queryEngine.fieldsIndex.requiredFields.indexOf(n);j>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(j,1),this._createDefaultAttributes=G(p,y);const x=await this._createFeatures(s);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const C=this._normalizeFeatures(x,g.featureErrors);this._queryEngine.featureStore.addMany(C);const{fullExtent:A,timeExtent:S}=await this._queryEngine.fetchRecomputedExtents();if(g.layerDefinition.extent=A,S){const{start:a,end:_}=S;g.layerDefinition.timeInfo.timeExtent=[a,_]}return g}async applyEdits(e){const{spatialReference:t,geometryType:i}=this._queryEngine;return await Promise.all([ne(t,i),b(e.adds,t),b(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),te(this._queryEngine,e,t.signal)}async queryAttributeBins(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeAttributeBinsQuery(e,t.signal)}async refresh(e){this._loadOptions.customParameters=e,this._snapshotTask?.abort(),this._snapshotTask=B(this._snapshotFeatures),this._snapshotTask.promise.then((s=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,s);const r=this._normalizeFeatures(s);r&&this._queryEngine.featureStore.addMany(r)}),(s=>{this._queryEngine.featureStore.clear(),z(s)||L.getLogger("esri.layers.GeoJSONLayer").error(new E("geojson-layer:refresh","An error occurred during refresh",{error:s}))})),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:i}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:i}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:i,objectIdField:s}=this._queryEngine,r=H(e,{geometryType:t,hasZ:i,objectIdField:s});if(!J(this._queryEngine.spatialReference,I))for(const u of r)u.geometry!=null&&(u.geometry=U(w(W(u.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),I,this._queryEngine.spatialReference)));return r}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:i}=this._loadOptions,s=(await V(t??"",{responseType:"json",query:{...i},signal:e})).data;return Y(s),s}_normalizeFeatures(e,t){const{objectIdField:i,fieldsIndex:s}=this._queryEngine,r=[];for(const u of e){const l=this._createDefaultAttributes(),d=T(s,l,u.attributes,!0);d?t?.push(d):(this._assignObjectId(l,u.attributes,!0),u.attributes=l,u.objectId=l[i],r.push(u))}return r}async _applyEdits(e){const{adds:t,updates:i,deletes:s}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t?.length&&this._applyAddEdits(r,t),i?.length&&this._applyUpdateEdits(r,i),s?.length){for(const d of s)r.deleteResults.push(q(d));this._queryEngine.featureStore.removeManyById(s)}const{fullExtent:u,timeExtent:l}=await this._queryEngine.fetchRecomputedExtents();return{extent:u,timeExtent:l,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:i}=e,{geometryType:s,hasM:r,hasZ:u,objectIdField:l,spatialReference:d,featureStore:y,fieldsIndex:m}=this._queryEngine,o=[],h={type:"object-id",fieldName:l};for(const n of t){if(n.geometry&&s!==$(n.geometry)){i.push(F("Incorrect geometry type."));continue}const p=this._createDefaultAttributes(),f=T(m,p,n.attributes);if(f)i.push(f);else{if(this._assignObjectId(p,n.attributes),n.attributes=p,n.uid!=null){const c=n.attributes[l];e.uidToObjectId[n.uid]=c}if(n.geometry!=null){const c=n.geometry.spatialReference??d;n.geometry=w(O(n.geometry,c),c,d)}o.push(n),i.push(q(n.attributes[l]))}}y.addMany(K([],o,s,u,r,h))}_applyUpdateEdits({updateResults:e},t){const{geometryType:i,hasM:s,hasZ:r,objectIdField:u,spatialReference:l,featureStore:d,fieldsIndex:y}=this._queryEngine,m={type:"object-id",fieldName:u};for(const o of t){const{attributes:h,geometry:n}=o,p=h?.[u];if(p==null){e.push(F(`Identifier field ${u} missing`));continue}if(!d.has(p)){e.push(F(`Feature with object id ${p} missing`));continue}const f=X(d.getFeature(p),i,r,s);if(n!=null){if(i!==$(n)){e.push(F("Incorrect geometry type."));continue}const c=n.spatialReference??l;f.geometry=w(O(n,c),c,l)}if(h){const c=T(y,f.attributes,h);if(c){e.push(c);continue}}d.add(ee(f,i,r,s,m)),e.push(q(p))}}_createObjectIdGenerator(e,t){const i=e.fieldsIndex.get(e.objectIdField);if(i.type==="esriFieldTypeString")return()=>i.name+"-"+Date.now().toString(16);let s=Number.NEGATIVE_INFINITY;for(const r of t)r.objectId&&(s=Math.max(s,r.objectId));return s=Math.max(0,s)+1,()=>s++}_assignObjectId(e,t,i=!1){const s=this._queryEngine.objectIdField;e[s]=i&&s in t?t[s]:this._objectIdGenerator()}async _checkProjection(e){try{await b(I,e)}catch{throw new E("geojson-layer","Projection not supported")}}}export{Fe as default};

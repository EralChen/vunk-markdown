import{A as n,s as c,hq as l,hr as d,hs as g,ht as y}from"./chunk-XGpVqsM_.js";import"./chunk-DyqHK6XP.js";import"./chunk-Dix477Sg.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-CrMA_peF.js";function ir(m,t,r,e,i,o){if(m==null)return null;const p=m.references("geometry")&&o?f(t,e,o):t,s=m.repurposeFeature(p,i);try{return m.evaluate(s,r)}catch(u){return n.getLogger("esri.views.2d.support.arcadeOnDemand").warn("Feature arcade evaluation failed:",u),null}}const a=new Map;function f(m,t,r){const{transform:e,hasZ:i,hasM:o}=r;a.has(t)||a.set(t,h(t));const p=a.get(t)(m.geometry,e,i,o);return{...m,geometry:p}}function h(m){const t={};switch(m){case"esriGeometryPoint":return(r,e,i,o)=>y(e,t,r,i,o);case"esriGeometryPolygon":return(r,e,i,o)=>g(e,t,r,i,o);case"esriGeometryPolyline":return(r,e,i,o)=>d(e,t,r,i,o);case"esriGeometryMultipoint":return(r,e,i,o)=>l(e,t,r,i,o);default:return n.getLogger("esri.views.2d.support.arcadeOnDemand").error(new c("mapview-arcade",`Unable to handle geometryType: ${m}`)),r=>r}}export{ir as default};

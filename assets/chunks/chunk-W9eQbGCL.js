import{og as J,oh as P,oi as Q,oj as Y,ok as x,ol as V,om as Z,on as tt,ar as r,oo as D,op as n,oq as et,or as st,os as q,ot as B,ou as ot,ov as N,ow as it,ox as rt,oy as at,oz as E,oA as nt,aJ as dt,gc as pt,gb as G,g7 as L,ge as ht,nX as lt,f_ as ut,n_ as ct,n$ as ft,jX as vt,o0 as gt,o1 as yt,o2 as mt,o3 as xt,o4 as wt,dW as _t,oB as Mt,oC as U}from"./chunk-DYmUVOBN.js";import{o as St}from"./chunk-bcQwwYny.js";import{t as W}from"./chunk-ehcGqGxa.js";class C extends ot{}r([D(0,x)],C.prototype,"pos",void 0),r([D(1,x)],C.prototype,"uv",void 0);class $t extends it{}class X extends N{}r([n(et)],X.prototype,"dvs",void 0);class g extends N{}r([n(x)],g.prototype,"perspective",void 0),r([n(x)],g.prototype,"texSize",void 0),r([n(P)],g.prototype,"wrapAroundShift",void 0),r([n(P)],g.prototype,"opacity",void 0),r([n(st)],g.prototype,"texture",void 0);class m extends J{constructor(){super(...arguments),this.type="OverlayShader"}vertex(e){const t=e.uv.divide(this.config.texSize),s=new P(1).add(Q(t,this.config.perspective)),o=new Y(e.pos.add(new x(this.config.wrapAroundShift,0)),1),i=this.transform.dvs.multiply(o);return{uv:t,glPosition:new V(i.xy.multiply(s),0,s)}}fragment(e){const t=Z(this.config.texture,e.uv).multiply(this.config.opacity),s=new tt;return s.fragColor=t,s}}r([n(X)],m.prototype,"transform",void 0),r([n(g)],m.prototype,"config",void 0),r([q(0,B(C))],m.prototype,"vertex",null),r([q(0,B($t))],m.prototype,"fragment",null);class bt extends rt{constructor(){super(...arguments),this.type=at.Overlay,this._mesh=null,this.shaders={overlay:new m}}render(e,t){const{context:s,painter:o}=e,i=this._getMesh(e,t);o.setPipelineState(W);const{isWrapAround:d,wrapAroundShift:u}=t.config,c={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:c},defines:null,optionalAttributes:null,useComputeBuffer:!1};o.setPipelineState({...W,stencil:{write:!1,test:{compare:nt.EQUAL,op:{fail:E.KEEP,zFail:E.KEEP,zPass:E.REPLACE},ref:0,mask:255}}}),o.submitDrawMeshUntyped(s,f,i),d&&(c.wrapAroundShift=u,o.submitDrawMeshUntyped(s,f,i))}shutdown(){dt(this._mesh)}_getMesh(e,t){const{context:s}=e;if(this._mesh){const o=this._mesh.vertexBuffers.get("positions");if(!o)throw new Error("Buffer not found");o.buffer.setData(t.position)}else{const o=t.index!=null?t.index.length:t.position.length/2;this._mesh=new St(s,{vertex:{positions:{data:t.position,attributes:[new G("pos",2,L.FLOAT,0,8)]},uvs:{data:t.tex,attributes:[new G("uv",2,L.UNSIGNED_SHORT,0,4)]}},index:t.index!=null?{index:{data:t.index}}:void 0,groups:[{index:t.index!=null?"index":void 0,primitive:pt.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:o}]})}return this._mesh}}class Et extends ht{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=lt(),this._overlayTechnique=new bt}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==ut.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const s of this.children)s.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:s,size:o,pixelRatio:i,resolution:d,rotation:u,viewpoint:c,displayMat3:f}=t;if(this._viewStateId===s)return;const w=U(u),p=i*o[0],v=i*o[1];this._localOrigin=c.targetGeometry.clone();const{x:y,y:S}=this._localOrigin,_=ct(y,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=S;const $=d*p,b=d*v,a=ft(this._dvsMat3);vt(a,a,f),gt(a,a,yt(p/2,v/2)),mt(a,a,xt(p/$,-v/b,1)),wt(a,a,-w),this._viewStateId=s}_updateOverlays(e,t){const{state:s}=e,{rotation:o,spatialReference:i,worldScreenWidth:d,size:u,viewpoint:c}=s,f=this._localOrigin;let w,p=0;const v=_t(i);if(v&&i.isWrappable){const y=u[0],S=u[1],_=U(o),$=Math.abs(Math.cos(_)),b=Math.abs(Math.sin(_)),a=Math.round(y*$+S*b),[z,I]=v.valid,h=Mt(i),{x:T,y:k}=c.targetGeometry,F=[T,k],O=[0,0];s.toScreen(O,F);const M=[0,0];let A;A=a>d?.5*d:.5*a;const j=Math.floor((T+.5*h)/h),K=z+j*h,H=I+j*h,R=[O[0]+A,0];s.toMap(M,R),M[0]>H&&(p=h),R[0]=O[0]-A,s.toMap(M,R),M[0]<K&&(p=-h),w={worldWidth:h,xBounds:[z,I]}}for(const y of t)y.updateDrawCoords(f,p,i,w)}}export{Et as u};

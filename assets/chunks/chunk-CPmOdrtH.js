import{i2 as c,df as g,dc as n,aC as l,z as m,V as d,L as w,aN as p,aD as u,ai as o,aj as y,al as V}from"./chunk-Dx0VeHfy.js";import{t as v}from"./chunk-7LTMrW3O.js";import{O as f}from"./chunk-Cv0n4_7q.js";import"./chunk-DHAEDrTs.js";import"./chunk-C8aUyMXt.js";import"./chunk-Dn-oRunx.js";import"./chunk-eIL3O1GI.js";import"./chunk-BaXc6uIe.js";import"./chunk-BELTRu_k.js";import"./chunk-Bb99Mywd.js";import"./chunk-QXap_35O.js";import"./chunk-JV9XATMi.js";import"./chunk-CUzevAry.js";import"./chunk-BfAy0xZC.js";import"./chunk-BFLErLYb.js";import"./chunk-C8owJ5SX.js";import"./chunk-CKwt2uXH.js";import"./chunk-Cb9v9vOk.js";import"./chunk-BOVoQ24I.js";import"./chunk-CpAIJfj0.js";import"./chunk-zNZJ-S-7.js";import"./chunk-wfo6GHsv.js";let s=class extends c(g){attach(){this.graphicsView=new f({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new v(this.view.featuresTilingScheme),layerId:this.layer.id}),this.container.addChild(this.graphicsView.container),this.addAttachHandles([this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),n((()=>this.layer?.visible),(()=>{this.graphicsView.update({state:this.view.state}),this.graphicsView.pushUpdate()}))]),this._processHighlight()}detach(){this.container.removeAllChildren(),this.graphicsView=l(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map((r=>({type:"graphic",graphic:r,mapPoint:i,layer:this.layer}))):null}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i,r){let t;typeof i=="number"?t=[i]:i instanceof m?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map((e=>e&&e.uid)):d.isCollection(i)&&i.length>0&&(t=i.map((e=>e&&e.uid)).toArray());const a=t?.filter(w);if(!a?.length)return p();const h=r?.name??u;return this._addHighlights(a,h),p((()=>!this.destroyed&&this._removeHighlights(a,h)))}_processHighlight(){const i=this._getHighlights();this.graphicsView?.setHighlight(i)}};o([y()],s.prototype,"graphicsView",void 0),s=o([V("esri.views.2d.layers.GraphicsLayerView2D")],s);const B=s;export{B as default};

import{iR as C,gl as g,bI as m}from"./chunk-CET6Djna.js";import{a as b}from"./chunk-DvpRAiWy.js";import{CIMSymbolRasterizer as j}from"./chunk-DokFghBS.js";import{OverrideHelper as L}from"./chunk-Xp1DVuOB.js";import{l as q,t as M}from"./chunk-6pfVE1bX.js";import"./chunk-BoJEKryr.js";import"./chunk-QXap_35O.js";import"./chunk-LAsmWdb2.js";import"./chunk-CUzevAry.js";import"./chunk-CkKO-gNl.js";import"./chunk-BepYVpnq.js";import"./chunk-D5hXEnVo.js";import"./chunk-CB8wlU_f.js";const u=new j(null),p=m(M.size),x=m(M.maxSize),S=m(M.lineWidth),D=1;async function E(r,e,o){const l=e?.size;let t=l!=null&&typeof l=="object"&&"width"in l?l.width:l,a=l!=null&&typeof l=="object"&&"height"in l?l.height:l;if(!t||!a)if(o==="esriGeometryPolygon")t=a=e.maxSize?Math.min(e.maxSize,p):p;else{const s=await T(r,e,o);s&&(t=s.width,a=s.height),o==="esriGeometryPolyline"&&(t=e.maxSize?Math.min(e.maxSize,S):S),t=t!=null&&isFinite(t)?Math.min(t,x):p,a=a!=null&&isFinite(a)?Math.max(Math.min(a,x),D):p}return e.style==="legend"&&o==="esriGeometryPolyline"&&(t=S),{width:t,height:a}}async function T(r,e={},o){const l=e.cimOptions||e;o??=l.geometryType||C(r?.data?.symbol);const{feature:t,fieldMap:a,viewParams:s}=l,n=await L.resolveSymbolOverrides(r.data,t,null,a,o,null,s);if(!n)return null;(r=r.clone()).data={type:"CIMSymbolReference",symbol:n},r.data.primitiveOverrides=void 0;const i=[];return b.fetchResources(n,u.resourceManager,i),b.fetchFonts(n,u.resourceManager,i),i.length>0&&await Promise.all(i),b.getEnvelope(n,null,u.resourceManager)}async function Z(r,e={}){const{node:o,opacity:l,symbolConfig:t}=e,a=t!=null&&typeof t=="object"&&"isSquareFill"in t&&t.isSquareFill,s=e.cimOptions||e,n=s.geometryType||C(r?.data?.symbol),i=await E(r,e,n),{feature:I,fieldMap:G}=s,O=e?.geometry||a||n!=="esriGeometryPolygon"?"preview":"legend";let v=i;const z=i;if(e?.geometry&&(n==="esriGeometryPolygon"||n==="esriGeometryPolyline")&&(g(i.width)<200||g(i.height)<200)){const R=i.width>i.height?m(200)*i.height/i.width:m(200);v={width:i.width>i.height?m(200):m(200)*i.width/i.height,height:R}}const d=await u.rasterizeCIMSymbolAsync(r,I,v,O,G,n,null,s.viewParams,s.allowScalingUp,e?.geometry?.toJSON());if(!d)return null;const{width:$,height:F}=d,c=document.createElement("canvas");c.width=$,c.height=F,c.getContext("2d").putImageData(d,0,0);const f=g(z.width),w=g(z.height),h=new Image(f,w);h.src=c.toDataURL(),h.ariaLabel=e.ariaLabel??null,h.alt=e.ariaLabel??"",l!=null&&(h.style.opacity=`${l}`);let y=h;if(e.effectView!=null){const P={shape:{type:"image",x:0,y:0,width:f,height:w,src:h.src},fill:null,stroke:null,offset:[0,0]};y=q([[P]],[f,w],e)}return o&&y&&o.appendChild(y),y}export{T as getCIMSymbolPreviewSize,Z as previewCIMSymbol};

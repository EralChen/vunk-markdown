const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/chunks/chunk-CmBC-CHS.js","assets/chunks/chunk-A9ItisFv.js","assets/chunks/chunk-Da9IW-EP.js","assets/chunks/chunk-BUVSeX7E.js","assets/chunks/chunk-RvJNgVq9.js","assets/chunks/chunk-B92kdZ15.js","assets/chunks/chunk-CuaFhuP3.js","assets/chunks/chunk-Dpk1TJd9.js","assets/chunks/chunk-iOPJXyP1.js","assets/static/onCreateApp.DRclb75I.css","assets/static/src_layouts_default_aside-6ea01de8.BjbON5Ij.css","assets/static/src_layouts_default_navbar-403af73f.u3IytZI2.css","assets/static/vitepress_components_VPDocOutlineItem-0942cada.tkRPm3MX.css","assets/static/vitepress_components_VPDocAsideOutline-b0d47973.Ds9uynvM.css","assets/static/src_styles_common_reset-f7a68b0e.BAKp5MHC.css","assets/static/src_styles_common_color-a7a524c7.CVau4Kly.css","assets/static/src_styles_common_is-19c6c24d.DKAKruk7.css","assets/static/style-bd199161.DVw0mqUT.css","assets/static/style-ee024ed9.COZrvgTQ.css","assets/static/src_styles_element-plus_reset-752cc03d.htEpr2M-.css","assets/static/src_styles_element-plus_form-item-877afd6a.Dy4HJB2K.css","assets/static/src_styles_element-plus_table-6cbc5816.DXG1SsxY.css","assets/static/src_styles_element-plus_tabs-67d1a98b.BMDMQPDv.css","assets/static/src_styles_element-plus_tree-cc28503d.nmT5n0wM.css","assets/static/src_styles_element-plus_dialog-7f91a00e.D4nTsJge.css","assets/static/src_styles_element-plus_breadcrumb-8ce3a1a1.CwEEGJYc.css","assets/static/src_styles_element-plus_menu-33b44202.hFAFO4eV.css","assets/static/style-769e248f.DDhCRjCR.css","assets/static/style-22d30bfc.TwvRHEyK.css","assets/static/style-d089cd8f.Cc2PI5FU.css","assets/static/style-e86a26b0.CqxSaK_p.css","assets/static/style-51eec318.o0zCZ1y4.css","assets/static/src_styles_form_sub-7371c85e.y3zh-mS3.css","assets/static/src_styles_layout_index-2891f17b.BNCqvENj.css","assets/static/style-ab3e4bd5.BuWAVw4m.css","assets/static/style-2bf8ed1f.CRScSR0a.css","assets/static/style-603b4474.BZwgKm1s.css","assets/static/style-c5252da0.CFNWXuiE.css","assets/static/style-6fd0e256.X9gIGpBH.css","assets/static/style-3c45b3af.Di2LGzYR.css","assets/static/style-27a3a9b4.C8H6Fcyw.css","assets/static/src_styles_markdown_reset-fbd16bdd.D3vNaEcf.css","assets/static/src_styles_markdown_shiki-0d2326df.uut6VZYd.css","assets/static/style-b2fddf65.BmytK7dW.css","assets/static/style-2208d37a.ChwmoEkt.css","assets/static/pages_uno-88a4f3d7.lpyrja-g.css","assets/chunks/chunk-DGmg3LSc.js","assets/chunks/chunk-DP7_WWTp.js","assets/chunks/chunk-BoBj9ZcI.js","assets/chunks/chunk-qOGZTybA.js","assets/chunks/chunk-B0-hNf4G.js","assets/chunks/chunk-CriAf3Kd.js","assets/chunks/chunk-BVsQK6mx.js","assets/chunks/chunk-ZrI0Q6SG.js","assets/chunks/chunk-DEg4JToc.js","assets/chunks/chunk-CY-D7tnl.js"])))=>i.map(i=>d[i]);
import{_ as P}from"./chunk-iOPJXyP1.js";import{fI as L,eQ as C,U as M,s as G,lv as S,fZ as U,fH as j,lw as V,v as R,lx as z,d8 as F,af as x,ag as I,ai as Z}from"./chunk-CuaFhuP3.js";import"./chunk-Dpk1TJd9.js";import{l as k}from"./chunk-CK-Bcvbn.js";import{p as H}from"./chunk-D1Gs7Etu.js";import"./chunk-DGmg3LSc.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */class Q{constructor(){this.modifications=[]}async apply(o,t,e){if(this.modifications.length!==0&&(b??=Promise.all([P(()=>import("./chunk-CmBC-CHS.js").then(i=>i.c),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49])),P(()=>import("./chunk-B0-hNf4G.js").then(i=>i.i),__vite__mapDeps([50,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,49])),P(()=>import("./chunk-BVsQK6mx.js").then(i=>i.i),__vite__mapDeps([52,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,3,1,2,4,5,6,46,47,48,53,49]))]),O=await b,!L(e)))for(const i of this.modifications)i.apply(o,t)}}class B{constructor(o,t){this.type=o,this.polygon=t}apply(o,t){if(this.type!=="replace")return;const{polygon:e}=this,[i,a,m]=O,{extent:v,spatialReference:u}=t,g=C(v,u);if(a.accelerateGeometry(e),!a.execute(e,g))return;i.accelerateGeometry(e),m.accelerateGeometry(e);const{width:s,height:c,values:p}=o,y=e.hasZ?e.rings.reduce(((n,d)=>d.reduce(((l,h)=>Math.min(l,h[2]??1/0)),n)),1/0):1/0,f=y===1/0?0:y;if(i.execute(e,g))p.fill(f);else{const n=J(t,e,[s,c]);if(!n||n.rings.every((l=>l.length===0)))return;const d=K(t,n,s,c);for(let l=c-1;l>=0;--l)for(let h=0;h<s;++h){const $=(l+1)*(s+2)+(h+1);let w=0;for(let T=-1;T<=1;++T){const q=$+T*(s+2);for(let E=-1;E<=1;++E)w=Math.max(w,d[q+E])}const D=l*s+h;p[D]=w===0?p[D]:f}}}}let b,O;function J(r,o,t){const[e,i,a,m]=r.extent,{spatialReference:v}=r,[u,g]=t,s=2,c=(a-e)/(u-1),p=(m-i)/(g-1),y=new M({xmin:e-s*c,ymin:i-s*p,xmax:a+s*c,ymax:m+s*p,spatialReference:v}),f=O[2].execute(o,y);return f?.type==="polygon"?f:null}function K(r,o,t,e){const i=new OffscreenCanvas(t+2,e+2).getContext("2d",{willReadFrequently:!0});if(!i)throw new Error("failed to create canvas");const[a,m,v,u]=r.extent,g=v-a,s=u-m;i.fillStyle="black",i.clearRect(0,0,t,e);const c=new Path2D;for(const n of o.rings)if(n.length>0){const d=new Path2D;let l=!0;for(const[h,$]of n){const w=(h-a)/g*(t-1)+1+A,D=(u-$)/s*(e-1)+1+A;l?(l=!1,d.moveTo(w,D)):d.lineTo(w,D)}d.closePath(),c.addPath(d)}i.fillStyle="white",i.fill(c,"evenodd");const p=i.getImageData(0,0,t+2,e+2),y=(t+2)*(e+2),f=new Uint8Array(y);for(let n=0;n<y;++n)f[n]=p.data[4*n+0]>0?1:0;return f}const A=.5;let _=class extends H(k(F)){constructor(){super(...arguments),this.type="elevation-3d",this.modifications=new Q}get tileInfo(){return this.layer.tileInfo}initialize(){const r=this.view,o=r.map?.allLayers,t=o&&o.includes(this.layer),e=r.map?.ground?.layers,i=e&&e.includes(this.layer);if(t&&!i){const a=new G("layerview:elevation-layer-only",`3D elevation layer '${this.layer.id}' can only be added to layers in map.ground`);this.addResolvingPromise(Promise.reject(a))}this._lercDecoder=S(r.resourceController),this._addTilingSchemeMatchPromise()}destroy(){this._lercDecoder=U(this._lercDecoder)}async fetchElevationTile(r,o){const t=await this._fetchTileData(r.lij,o);if(!L(o))return t&&await this.modifications.apply(t,r,o.signal),t}async _fetchTileData(r,o){const t=this.layer;if(j(t)){const m=await t.fetchTile(r[0],r[1],r[2],{noDataValue:V,signal:o.signal});return L(o)?void R.getLogger(this).warnOnce("A call to fetchTile resolved even though the request was aborted. fetchTile should not resolve if options.signal.aborted is true."):m}const e=this.getTileUrl(r),i=await o.requester.request(e,"binary",o),a=await this._lercDecoder.decode(i,{noDataValue:V},o.signal);if(a)return new z(a);throw new Error("LERC decoding failed")}async setModifications(r){if(this.modifications.modifications.length=0,!r||r.length===0)return;this._simplifyOperatorPromise??=P(()=>import("./chunk-DEg4JToc.js").then(t=>t.s),__vite__mapDeps([54,3,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,55,49]));const o=await this._simplifyOperatorPromise;for(const t of r){const e=t.geometry;if(e?.type==="polygon"){const i=o.execute(e);if(i?.type==="polygon"){const a=new B(t.type,i);this.modifications.modifications.push(a)}else R.getLogger(this).warn("Failed to simplify modification polygon")}else R.getLogger(this).warn("Invalid modification added to elevation layer: "+(e?`non polygon geometry ${e.type}`:"no geometry"))}}};x([I()],_.prototype,"layer",void 0),x([I()],_.prototype,"tileInfo",null),x([I()],_.prototype,"modifications",void 0),_=x([Z("esri.views.3d.layers.ElevationLayerView3D")],_);const St=_;export{St as default};

import{bK as y,mo as f,we as _,ms as u,bX as m,k0 as K,wf as U,bG as p,wg as R,jl as M,rr as D,hZ as Q,ba as k,wh as F,wi as X,wj as G,wk as H,wl as z,uQ as A,wm as B,wn as W,wo as j,kJ as J,bw as b,jo as I,wp as Y,wq as T,bF as Z,wr as ee,ws as te,wt as se,eS as ie,mp as re,mr as ne,mq as oe,cr as ae,b9 as he,wu as de,wv as le,ww as pe,as as ce,V as ge,mm as fe,jv as ue,aj as L,ak as $,am as me}from"./chunk-XGpVqsM_.js";import"./chunk-DyqHK6XP.js";import"./chunk-Dix477Sg.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-CrMA_peF.js";class C{constructor(s,e){this.view=s,this.options=e,this.squaredShortLineThreshold=y.shortLineThreshold*y.shortLineThreshold}snap(s,e){return e.vertexHandle!=null?e.vertexHandle.type!=="vertex"?[]:this.snapExistingVertex(s,e):this.snapNewVertex(s,e)}edgeExceedsShortLineThreshold(s,e){return this.exceedsShortLineThreshold(f(s.leftVertex.pos,this.view,e),f(s.rightVertex.pos,this.view,e),e)}exceedsShortLineThreshold(s,e,{spatialReference:t}){return this.squaredShortLineThreshold===0||_(u(e,t,m,this.view),u(s,t,m,this.view))>this.squaredShortLineThreshold}isVertical(s,e,{spatialReference:t}){const i=K(t);return U(p(s),p(e))*i<y.verticalLineThresholdMeters}squaredProximityThreshold(s){return s==="touch"?this._squaredTouchProximityThreshold:this._squaredMouseProximityThreshold}get _squaredMouseProximityThreshold(){return this.options.distance*this.options.distance}get _squaredTouchProximityThreshold(){const{distance:s,touchSensitivityMultiplier:e}=this.options,t=s*e;return t*t}}class xe extends C{constructor(s,e,t){super(s,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=[];if(i<1)return r;const{spatialReference:n}=e,a=u(s,n,m,this.view),{view:o}=this,h=t.edges[i-1];let d=h;do{if(this.edgeExceedsShortLineThreshold(d,e)){const c=R(d,o,e);this._processCandidateProposal(c.left,c.right,s,a,e,r)}d=d.leftVertex.leftEdge}while(d&&d!==h);return r}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2)return t;const{view:n}=this,{spatialReference:a}=e,o=u(s,a,m,n),h=i.leftEdge,d=i.rightEdge;h&&d&&this.edgeExceedsShortLineThreshold(h,e)&&this.edgeExceedsShortLineThreshold(d,e)&&this._processCandidateProposal(f(h.leftVertex.pos,n,e),f(d.rightVertex.pos,n,e),s,o,e,t);const c=r.edges[0];let g=c;do{if(g!==i.leftEdge&&g!==i.rightEdge&&this.edgeExceedsShortLineThreshold(g,e)){const x=R(g,n,e);this._processCandidateProposal(x.left,x.right,s,o,e,t)}g=g.rightVertex.rightEdge}while(g&&g!==c);return t}_processCandidateProposal(s,e,t,i,r,n){const{spatialReference:a,pointer:o}=r,h=k();we(h,s,e,t,r,this._geodesicLengthMeasurementUtils);const d=M(D(h));_(i,u(d,a,m,this.view))<this.squaredProximityThreshold(o)&&n.push(new Q({lineStart:s,lineEnd:e,targetPoint:d,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}function we(l,s,e,t,i,r){ve(l,s,e,t,i,r)||Ee(l,t,s,e)}function ve(l,s,e,t,{spatialReference:i},r){const n=F(s,e,i,i);if(n==null)return!1;const a=F(e,t,i,i);if(a==null)return!1;const o=r.geodesicDistance(e,t,i);if(o==null)return!1;const h=Math.abs(X.shortestSignedDiff(n,a))>Math.PI/2?G.normalize(n+Math.PI):n;return H(l,e,i,z(o,"meters"),A(h,"radians","geographic"),"geodesic"),l[2]=t[2],!0}function Ee(l,s,e,t){B(s,{start:e,end:t,type:W.LINE},l),l[2]=s[2]}let Ve=class extends C{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=t.vertices.length,n=[];if(i<2)return n;const{view:a}=this,o=u(s,e.spatialReference,m,a),h=f(t.vertices[r-1].pos,a,e),d=f(t.vertices[0].pos,a,e),c=t.edges[i-1];let g=c;do{if(this.edgeExceedsShortLineThreshold(g,e)){const x=R(g,a,e);this._checkEdgeForParallelLines(x,h,s,o,e,n),this._checkEdgeForParallelLines(x,d,s,o,e,n)}g=g.leftVertex.leftEdge}while(g&&g!==c);return n}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<3)return t;const{view:n}=this,a=u(s,e.spatialReference,m,n),o=i.leftEdge,h=i.rightEdge,d=r.vertices[0],c=f(d.pos,n,e),g=r.vertices.length,x=r.vertices[g-1],V=f(x.pos,n,e),P=r.edges[0];let w=P;do{if(w!==o&&w!==h&&this.edgeExceedsShortLineThreshold(w,e)){const S=R(w,n,e);o&&this._checkEdgeForParallelLines(S,f(o.leftVertex.pos,n,e),s,a,e,t),h&&this._checkEdgeForParallelLines(S,f(h.rightVertex.pos,n,e),s,a,e,t),i===d?this._checkEdgeForParallelLines(S,V,s,a,e,t):i===x&&this._checkEdgeForParallelLines(S,c,s,a,e,t)}w=w.rightVertex.rightEdge}while(w&&w!==P);return t}_checkEdgeForParallelLines(s,e,t,i,r,n){const a=s.left,o=s.right;if(j(v,p(e),p(a),p(o)),J(v,p(e))<y.parallelLineThreshold)return;j(v,p(t),p(a),p(o),p(e));const{spatialReference:h,pointer:d}=r,c=M(I(v[0],v[1],t[2]));if(_(i,u(c,h,m,this.view))<this.squaredProximityThreshold(d)){if(this.isVertical(c,e,r)||this.isVertical(a,o,r)||Le(s,n))return;n.push(new Y({referenceLine:s,lineStart:e,targetPoint:c,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}};function Le(l,s){const e=l.left,t=l.right;for(const i of s)if(j(v,p(t),p(i.constraint.start),p(i.constraint.end),p(e)),J(v,p(t))<y.parallelLineThreshold)return i.addReferenceLine(l),!0;return!1}const v=b();class ye extends C{constructor(s,e,t){super(s,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[];if(t.vertices.length<2)return i;const{view:r}=this,n=u(s,e.spatialReference,m,r),a=t.vertices.at(-1);this._checkForSnappingCandidate(T.LastVertex,i,a.leftEdge,a,a.leftEdge.leftVertex,s,n,e);const o=t.vertices[0];return this._checkForSnappingCandidate(T.FirstVertex,i,o.rightEdge,o,o.rightEdge.rightVertex,s,n,e),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle;if(i.component.vertices.length<3)return t;const{view:r}=this,n=u(s,e.spatialReference,m,r),a=i.leftEdge,o=i.rightEdge;if(a?.leftVertex.leftEdge){const h=a.leftVertex.leftEdge;this._checkForSnappingCandidate(T.ExistingEdge,t,h,h.rightVertex,h.leftVertex,s,n,e)}if(o?.rightVertex.rightEdge){const h=o.rightVertex.rightEdge;this._checkForSnappingCandidate(T.ExistingEdge,t,h,h.leftVertex,h.rightVertex,s,n,e)}return t}_checkForSnappingCandidate(s,e,t,i,r,n,a,o){if(!this.edgeExceedsShortLineThreshold(t,o))return;const h=this.view,d=f(i.pos,h,o),c=f(r.pos,h,o);_e(N,c,d,n,o,this._geodesicLengthMeasurementUtils),this._checkForSnappingCandidateAlongProjectedRay(s,e,c,d,N,n,a,o)}_checkForSnappingCandidateAlongProjectedRay(s,e,t,i,r,n,a,o){const{spatialReference:h,pointer:d}=o,c=Z(q,p(n),p(i)),g=ee(r,c)/te(r),x=se(q,p(i),r,g),V=M(I(x[0],x[1],n[2]));if(_(a,u(V,h,m,this.view))>this.squaredProximityThreshold(d)||this.isVertical(V,i,o)||this.isVertical(i,t,o))return;const P=ie(k(),i,r,Math.sign(g));e.push(new re({targetPoint:V,constraint:new oe(i,D(P)),previousVertex:t,otherVertex:i,otherVertexType:ne.CENTER,selfSnappingType:s,isDraped:o.elevationInfo?.mode==="on-the-ground"}))}}function _e(l,s,e,t,i,r){Pe(l,s,e,t,i,r)||Se(l,s,e)}function Pe(l,s,e,t,{spatialReference:i},r){const n=F(s,e,i,i);if(n==null)return!1;const a=F(e,t,i,i);if(a==null)return!1;const o=Math.sign(G.shortestSignedDiff(n,a))*Math.PI*.5,h=A(n+o,"radians","geographic"),d=k(),c=r.geodesicDistance(e,t,i);return c!=null&&(H(d,e,i,z(c,"meters"),h,"geodesic"),ae(l,d,e),!0)}function Se(l,s,e){const t=Z(q,p(e),p(s));he(l,t[1],-t[0],0)}const q=b(),N=k();let Te=class extends C{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[],r=t.vertices.length;if(e.editGeometryOperations.data.type!=="polygon"||r<2)return i;const{view:n}=this,a=t.vertices[0],o=t.vertices[r-1],h=f(a.pos,n,e),d=f(o.pos,n,e);return this._processCandidateProposal(h,d,s,e,i),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2||e.editGeometryOperations.data.type==="polyline"&&(i.index===0||i.index===r.vertices.length-1))return t;const{view:n}=this,a=f(i.leftEdge.leftVertex.pos,n,e),o=f(i.rightEdge.rightVertex.pos,n,e);return this._processCandidateProposal(a,o,s,e,t),t}_processCandidateProposal(s,e,t,i,r){if(!this.exceedsShortLineThreshold(s,e,i))return;const n=de(O,p(s),p(e),.5),a=.5*U(p(s),p(e)),o=le(O,p(t),n,a),h=M(I(o[0],o[1],t[2])),{spatialReference:d,pointer:c}=i,g=u(t,d,m,this.view);if(_(g,u(h,d,m,this.view))<this.squaredProximityThreshold(c)){if(this.isVertical(s,h,i)||this.isVertical(h,e,i))return;r.push(new pe({targetPoint:h,point1:s,point2:e,isDraped:i.elevationInfo?.mode==="on-the-ground"}))}}};const O=b();let E=class extends ce{constructor(l){super(l),this.updating=!1,this._snappers=new ge,this._domain=fe.SELF}initialize(){this._snappers.push(new Ve(this.view,this.options),new xe(this.view,this.options,this.geodesicLengthMeasurementUtils),new ye(this.view,this.options,this.geodesicLengthMeasurementUtils),new Te(this.view,this.options))}set options(l){this._set("options",l);for(const s of this._snappers)s.options=l}async fetchCandidates(l,s,e){if(!(s&this._domain&&this.options.effectiveSelfEnabled))return[];const t=[];for(const i of this._snappers.items)for(const r of i.snap(l,e))t.push(r);return ue(l,t),t}};L([$({readOnly:!0})],E.prototype,"updating",void 0),L([$({constructOnly:!0})],E.prototype,"view",void 0),L([$({constructOnly:!0})],E.prototype,"geodesicLengthMeasurementUtils",void 0),L([$()],E.prototype,"options",null),E=L([me("esri.views.interactive.snapping.SelfSnappingEngine")],E);export{E as SelfSnappingEngine};

import{M as a,v as n,_ as s}from"./chunk-CtO2e_we.js";import{fromGeometry as f,toGeometry as t,fromGeometries as c,fromGeometryToGXGeometry as u}from"./chunk-DjiU_hIY.js";import"./chunk-B92kdZ15.js";import"./chunk-BALWqwPe.js";import"./chunk-EY7ToGV5.js";import"./chunk-DB7j5ecc.js";import"./chunk-BtTM1THp.js";import"./chunk-mTyH_f-_.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */function mo(o){const r=f(o);return t(a(r.getGeometry()),r.getSpatialReference())}function io(o,r={}){const{merge:m=!1}=r,[i,p]=c(o);return n(i,m).map(e=>t(e,p))}function po(o){return s(u(o))}export{mo as execute,io as executeMany,po as isConvex};

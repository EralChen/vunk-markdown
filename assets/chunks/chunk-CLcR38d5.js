import{S as f,R as y,gX as c,H as S,eN as R,h3 as m,h2 as g,I as p,m5 as d,g$ as N,m6 as x}from"./chunk-Dx0VeHfy.js";import"./chunk-DHAEDrTs.js";function J(i){const e=i.geometry,n=i.toJSON(),t=n;let r,a,u;if(e!=null&&(a=e.spatialReference,u=m(a),t.geometryType=g(e),t.geometry=JSON.stringify(e),t.inSR=u),n.outSR?(t.outSR=m(n.outSR),r=i.outSpatialReference):e&&(t.outSR=t.inSR,r=a),t.bin&&=JSON.stringify(t.bin),t.quantizationParameters&&=JSON.stringify(t.quantizationParameters),t.outStatistics&&=JSON.stringify(t.outStatistics),t.outTimeReference&&=JSON.stringify(t.outTimeReference),n.timeExtent){const o=n.timeExtent,{start:s,end:l}=o;s==null&&l==null||(t.time=s===l?s:`${s??"null"},${l??"null"}`),delete n.timeExtent}return i.defaultSpatialReference&&p(a,r)&&(t.defaultSR=t.inSR,delete t.inSR,delete t.outSR),t}async function O(i,e,n){return e.timeExtent!=null&&e.timeExtent.isEmpty?{data:{features:[]}}:await $(i,e,n)}async function $(i,e,n={}){const t=typeof i=="string"?f(i):i,r=e.geometry?[e.geometry]:[],a=await y(r,null,{signal:n.signal}),u=a?.[0];u!=null&&((e=e.clone()).geometry=u);const o=c({...t.query,f:"json",...J(e)});return S(R(t.path,"queryBins"),{...n,query:{...o,...n.query}})}async function b(i,e,n){const{data:t}=await O(N(i),d.from(e),n);return x.fromJSON(t)}export{b as executeAttributeBinsQuery};

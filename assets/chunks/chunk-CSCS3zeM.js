import{s as t,n9 as w,na as v,nb as c,nc as g,nd as q,ne as h,nf as x,ng as y}from"./chunk-XGpVqsM_.js";import"./chunk-DyqHK6XP.js";import"./chunk-Dix477Sg.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-CrMA_peF.js";function E(i,e){if(!i.view)throw new t(`${e}:missing-parameters`,"'view' parameter is required for binning");if(i.sqlExpression)throw new t(`${e}:invalid-parameters`,"'sqlExpression' parameter is not supported for binning");if(i.view.type==="3d")throw new t(`${e}:invalid-parameters`,"3d view is not supported for binning")}async function b(i){if(!i?.layer||!i.field&&!i.valueExpression)throw new t("unique-values:missing-parameters","'layer' and 'field' or 'valueExpression' parameters are required");const e=i.valueExpression||i.sqlExpression,n=e&&!i.sqlExpression;if(e){if(n){if(!i.view)throw new t("unique-values:missing-parameters","View is required when 'valueExpression' is specified")}else if(!i.valueExpression)throw new t("unique-values:missing-parameters","'valueExpression' parameters are required")}i.forBinning&&E(i,"unique-values");const{layer:m,...l}=i,u=[...w,v.ImageryLayer],a=i.forBinning?c:u,s=g(m,a,i.forBinning);if(!s)throw new t("unique-values:invalid-parameters","'layer' must be one of these types: "+q(a).join(", "));const r={layerAdapter:s,...l},f=r.signal!=null?{signal:r.signal}:null;await s.load(f);const d=await h({field:r.field,field2:r.field2,field3:r.field3,valueExpression:r.valueExpression}),o=x(s,d,"unique-values:invalid-parameters");if(o)throw o;r.filter&&!r.filter.spatialRelationship&&(r.filter.spatialRelationship="intersects");const p=y(r.filter,"summary-statistics:invalid-parameters");if(p)throw p;return r}async function li(i){const{layerAdapter:e,...n}=await b(i);return e.uniqueValues(n)}export{li as default};

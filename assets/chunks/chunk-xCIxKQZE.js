import{qa as H,hG as E,hI as Q,qb as V,qc as x,qd as Z,qe as J,qf as tt,aj as i,qg as j,qh as n,qi as et,qj as st,qk as z,ql as G,qm as ot,qn as N,qo as it,qp as rt,qq as at,qr as A,qs as nt,aD as pt,me as dt,md as L,m8 as U,hw as ht,pS as lt,h5 as ut,pV as ct,pW as ft,lh as vt,pX as mt,pY as yt,pZ as wt,p_ as xt,p$ as gt,f5 as _t,qt,qu as W}from"./chunk-XGpVqsM_.js";import{o as Mt}from"./chunk-B8DfIh-V.js";import{t as B}from"./chunk-ehcGqGxa.js";class P extends ot{}i([j(0,x)],P.prototype,"pos",void 0),i([j(1,x)],P.prototype,"uv",void 0);class St extends it{}class k extends N{}i([n(et)],k.prototype,"dvs",void 0);class m extends N{}i([n(x)],m.prototype,"perspective",void 0),i([n(x)],m.prototype,"texSize",void 0),i([n(E)],m.prototype,"wrapAroundShift",void 0),i([n(E)],m.prototype,"opacity",void 0),i([n(st)],m.prototype,"texture",void 0);class w extends H{constructor(){super(...arguments),this.type="OverlayShader"}vertex(e){const t=e.uv.divide(this.config.texSize),s=new E(1).add(Q(t,this.config.perspective)),o=new V(e.pos.add(new x(this.config.wrapAroundShift,0)),1),r=this.transform.dvs.multiply(o);return{uv:t,glPosition:new Z(r.xy.multiply(s),0,s)}}fragment(e){const t=J(this.config.texture,e.uv).multiply(this.config.opacity),s=new tt;return s.fragColor=t,s}}i([n(k)],w.prototype,"transform",void 0),i([n(m)],w.prototype,"config",void 0),i([z(0,G(P))],w.prototype,"vertex",null),i([z(0,G(St))],w.prototype,"fragment",null);class $t extends rt{constructor(){super(...arguments),this.type=at.Overlay,this._mesh=null,this.shaders={overlay:new w}}render(e,t){const{context:s,painter:o}=e,r=this._getMesh(e,t);o.setPipelineState(B);const{isWrapAround:p,wrapAroundShift:u}=t.config,c={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:c},defines:null,optionalAttributes:null,useComputeBuffer:!1};o.setPipelineState({...B,stencil:{write:!1,test:{compare:nt.EQUAL,op:{fail:A.KEEP,zFail:A.KEEP,zPass:A.REPLACE},ref:0,mask:255}}}),o.submitDrawMeshUntyped(s,f,r),p&&(c.wrapAroundShift=u,o.submitDrawMeshUntyped(s,f,r))}shutdown(){pt(this._mesh)}_getMesh(e,t){const{context:s}=e;if(this._mesh){const o=this._mesh.vertexBuffers.get("positions");if(!o)throw new Error("Buffer not found");o.buffer.setData(t.position)}else{const o=t.index!=null?t.index.length:t.position.length/2;this._mesh=new Mt(s,{vertex:{positions:{data:t.position,attributes:[new L("pos",2,U.FLOAT,0,8)]},uvs:{data:t.tex,attributes:[new L("uv",2,U.UNSIGNED_SHORT,0,4)]}},index:t.index!=null?{index:{data:t.index}}:void 0,groups:[{index:t.index!=null?"index":void 0,primitive:dt.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:o}]})}return this._mesh}}class At extends ht{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=lt(),this._overlayTechnique=new $t}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==ut.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const s of this.children)s.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:s,size:o,pixelRatio:r,resolution:p,rotation:u,viewpoint:c,displayMat3:f}=t;if(this._viewStateId===s)return;const g=W(u),d=r*o[0],v=r*o[1];this._localOrigin=c.targetGeometry.clone();const{x:y,y:M}=this._localOrigin,_=ct(y,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=M;const S=p*d,$=p*v,a=ft(this._dvsMat3);vt(a,a,f),mt(a,a,yt(d/2,v/2)),wt(a,a,xt(d/S,-v/$,1)),gt(a,a,-g),this._viewStateId=s}_updateOverlays(e,t){const{state:s}=e,{rotation:o,spatialReference:r,worldScreenWidth:p,size:u,viewpoint:c}=s,f=this._localOrigin;let g,d=0;const v=_t(r);if(v&&r.isWrappable){const y=u[0],M=u[1],_=W(o),S=Math.abs(Math.cos(_)),$=Math.abs(Math.sin(_)),a=Math.round(y*S+M*$),[D,C]=v.valid,h=qt(r),{x:I,y:F}=c.targetGeometry,K=[I,F],b=[0,0];s.toScreen(b,K);const q=[0,0];let O;O=a>p?.5*p:.5*a;const T=Math.floor((I+.5*h)/h),X=D+T*h,Y=C+T*h,R=[b[0]+O,0];s.toMap(q,R),q[0]>Y&&(d=h),R[0]=b[0]-O,s.toMap(q,R),q[0]<X&&(d=-h),g={worldWidth:h,xBounds:[D,C]}}for(const y of t)y.updateDrawCoords(f,d,s,g)}}export{At as u};

import{_ as D}from"./chunk-iOPJXyP1.js";import{ix as S,qA as A,qB as w}from"./chunk-CuaFhuP3.js";import"./chunk-Dpk1TJd9.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-DGmg3LSc.js";function R(){return C??=(async()=>{const t=await D(()=>import("./chunk-CRZ0Ieq5.js"),[]),e=await t.default({locateFile:r=>S(`esri/libs/basisu/${r}`)});return e.initializeBasis(),e})(),C}let C;function b(){return E??=(async()=>await(await D(()=>import("./chunk-OwHxgVfW.js"),[])).default({locateFile:e=>S(`esri/libs/dxtEncoder/${e}`)}))(),E}let E,B,X,u=null,d=null;class h{constructor(e,r){this.internalFormat=e,this.compressedTexture=r}}async function Ut(t){let e;if(e=t.data instanceof ImageBitmap?U(t.data):G(t.data,t.width,t.height,t.components,t.needsFlip),t.hasS3TC){d||await g();const r=new Uint8Array(e.length);if(d?.encode(e,t.width,t.height,t.preMultiplyAlpha,r)){const a=H(r,!0),l=[r.buffer];return{result:new h(a?.internalFormat??null,a?.textureData??null),transferList:l}}return{result:new h(null,null)}}if(t.hasETC){if(u||await x(),t.preMultiplyAlpha&&!d&&await g(),t.preMultiplyAlpha){const s=new Uint8ClampedArray(e.length);d?.premultiply(new Uint8Array(e),t.width,t.height,s),e=s}const r=await M(e,t.width,t.height,t.hasMipmap),a=r?await F(r):null,l=a?.compressedTexture?.levels.map((s=>s.buffer))||[];return{result:new h(a?.internalFormat??null,a?.compressedTexture??null),transferList:l}}return{result:new h(null,null)}}async function x(){u||(u=await(B??=R()))}async function g(){d||(d=await(X??=b()))}async function M(t,e,r,a,l=255,s=0,i=!1,o=!1){if(!u)return null;const n=new u.BasisEncoder;n.setPerceptual(!o),n.setCheckForAlpha(!0),n.setForceAlpha(!1),n.setRenormalize(o),n.setMipGen(a),n.setMipSRGB(!o),n.setCreateKTX2File(!0),n.setKTX2SRGBTransferFunc(!o),n.setQualityLevel(l),n.setCompressionLevel(s);const p=new Uint8Array(t.byteLength);n.setSliceSourceImage(0,new Uint8Array(t),e,r,i);const c=n.encode(p),m=new Uint8Array(p.buffer,0,c),f=new u.KTX2File(new Uint8Array(m));return f.isValid()?(n.delete(),m):(f.close(),f.delete(),n.delete(),null)}async function F(t){if(!u)return new h(null,null);const e=new u.KTX2File(new Uint8Array(t));e.startTranscoding();const[r,a]=e.getHasAlpha()?[A.ETC2_RGBA,w.COMPRESSED_RGBA8_ETC2_EAC]:[A.ETC1_RGB,w.COMPRESSED_RGB8_ETC2],l=e.getLevels(),s=[];for(let i=0;i<l;i++)s.push(new Uint8Array(e.getImageTranscodedSizeInBytes(i,0,0,r))),e.transcodeImage(s[i],i,0,0,r,0,-1,-1);return e.close(),e.delete(),{internalFormat:a,compressedTexture:{type:"compressed",levels:s}}}function U(t){const e=new OffscreenCanvas(t.width,t.height),r=e.getContext("2d");return r.drawImage(t,0,0),r.getImageData(0,0,e.width,e.height).data}function G(t,e,r,a,l){const s=new Uint8ClampedArray(t).subarray(0,e*r*a);if(!l)return s;const i=new Uint8ClampedArray(s.length),o=e*a;for(let n=0;n<r;n++){const p=n*o,c=(r-n-1)*o;i.set(s.subarray(p,p+o),c)}return i}const O=31,v=1,I=2,P=3,L=4,K=7,k=21,z=131072;function T(t){return t.charCodeAt(0)+(t.charCodeAt(1)<<8)+(t.charCodeAt(2)<<16)+(t.charCodeAt(3)<<24)}const $=T("DXT1"),V=T("DXT3"),q=T("DXT5");function H(t,e){const r=new Int32Array(t.buffer,t.byteOffset,O);let a,l;switch(r[k]){case $:a=8,l=w.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case V:a=16,l=w.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case q:a=16,l=w.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;default:return null}let s=1,i=r[L],o=r[P];(3&i||3&o)&&(i=i+3&-4,o=o+3&-4);const n=i,p=o;let c,m;r[I]&z&&e!==!1&&(s=Math.max(1,r[K]));let f=t.byteOffset+r[v]+4;const y=[];for(let _=0;_<s;++_)m=(i+3>>2)*(o+3>>2)*a,c=new Uint8Array(t.buffer,f,m),y.push(c),f+=m,i=Math.max(1,i>>1),o=Math.max(1,o>>1);return{textureData:{type:"compressed",levels:y},internalFormat:l,width:n,height:p}}export{h as TextureCompressionWorkerOutput,Ut as compress,M as compressRGBADataToKTX2,F as createTextureDataKTX2,x as initializeBasisEncoder,g as initializeDXTEncoder};

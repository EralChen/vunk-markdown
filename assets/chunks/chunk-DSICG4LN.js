import{fA as M,hV as S,d8 as R,h$ as x,aF as U,v as q,aG as I,az as z,U as A,af as h,ag as w,ai as E}from"./chunk-CuaFhuP3.js";import"./chunk-Dpk1TJd9.js";import{M as F}from"./chunk-U3fYImM3.js";import{m as H}from"./chunk-Ce38uF4w.js";import"./chunk-iOPJXyP1.js";import"./chunk-DGmg3LSc.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-PM-0Myzz.js";let o=class extends H(M(S(R))){constructor(){super(...arguments),this.bitmapContainer=new x}supportsSpatialReference(t){return this.layer.serviceSupportsSpatialReference(t)}update(t){this.strategy.update(t).catch((e=>{U(e)||q.getLogger(this).error(e)}))}attach(){const{layer:t}=this,{imageMaxHeight:e,imageMaxWidth:r}=t;this.bitmapContainer=new x,this.container.addChild(this.bitmapContainer),this.strategy=new F({container:this.bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxHeight:e,imageMaxWidth:r,imageRotationSupported:!1,imageNormalizationSupported:!1,hidpi:!1}),this.addAttachHandles(I((()=>this.exportImageVersion),(()=>this.requestUpdate())))}detach(){this.strategy=z(this.strategy),this.container.removeAllChildren()}viewChange(){}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQuery(t){const{view:e,bitmapContainer:r}=this,{x:a,y:s}=t,{spatialReference:v}=e;let i,p=0,d=0;if(r.children.some((C=>{const{width:c,height:g,resolution:l,x:m,y:n}=C,y=m+l*c,f=n-l*g;return a>=m&&a<=y&&s<=n&&s>=f&&(i=new A({xmin:m,ymin:f,xmax:y,ymax:n,spatialReference:v}),p=c,d=g,!0)})),!i)return null;const u=i.width/p,$=Math.round((a-i.xmin)/u),b=Math.round((i.ymax-s)/u);return{extent:i,width:p,height:d,x:$,y:b}}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(t,e,r,a){return this.layer.fetchImageBitmap(t,e,r,{timeExtent:this.timeExtent,...a})}};h([w()],o.prototype,"strategy",void 0),h([w()],o.prototype,"updating",void 0),o=h([E("esri.views.2d.layers.WMSLayerView2D")],o);const Mt=o;export{Mt as default};

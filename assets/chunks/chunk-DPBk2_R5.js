import{gM as d,v as h,dn as l,U as S,ex as g,bx as M,t as N}from"./chunk-CuaFhuP3.js";import{q as E}from"./chunk-BEVXRkwK.js";import{n as D,i as F}from"./chunk-C33bkuGJ.js";import{n as T,i as I}from"./chunk-1OeqE1Jv.js";import"./chunk-Dpk1TJd9.js";import"./chunk-iOPJXyP1.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-DGmg3LSc.js";import"./chunk-Betj5hoa.js";import"./chunk-Cj6q1fp6.js";import"./chunk-b-Uii-I4.js";import"./chunk-BvxomRZN.js";import"./chunk-Ci_uqM5T.js";import"./chunk-Btn-XPY7.js";import"./chunk-BIcMZiQX.js";const b=()=>h.getLogger("esri.rest.support.meshFeatureSet");function Lt(t,o,r){const e=r.features;r.features=[],delete r.geometryType;const s=g.fromJSON(r);if(s.geometryType="mesh",!r.assetMaps)return s;const i=O(o,r.assetMaps),a=t.sourceSpatialReference??M.WGS84,u=r.globalIdFieldName,{outFields:n}=t,c=n!=null&&n.length>0?w(n.includes("*")?null:new Set(n)):()=>({});for(const p of e){const m=L(p,u,a,o,i);s.features.push(new N({geometry:m,attributes:c(p)}))}return s}function w(t){return({attributes:o})=>{if(!o)return{};if(!t)return o;for(const r in o)t.has(r)||delete o[r];return o}}function L(t,o,r,e,s){const i=t.attributes[o],a=s.get(i);if(a==null||!t.geometry)return null;const u=T(t.attributes,r,e.transformFieldRoles),n=S.fromJSON(t.geometry);n.spatialReference=r;const c=I(t.attributes,e.transformFieldRoles),p=r.isGeographic?"local":"georeferenced",m=$(a);return m?E.createWithExternalSource(u,m,{extent:n,transform:c,vertexSpace:p,unitConversionDisabled:!0}):E.createIncomplete(u,{extent:n,transform:c,vertexSpace:p})}var f;function O(t,o){const r=new Map;for(const e of o){const s=e.parentGlobalId;if(s==null)continue;const i=e.assetName,a=e.assetType,u=e.assetHash,n=e.assetURL,c=e.conversionStatus,p=e.seqNo,m=d(a,t.supportedFormats);if(!m){b().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${a}, but it does not list it as a supported type`);continue}const y=l(r,s,(()=>({files:new Map})));l(y.files,i,(()=>({name:i,type:a,mimeType:m,status:v(c),parts:[]}))).parts[p]={hash:u,url:n}}return r}function $(t){const o=Array.from(t.files.values()),r=new Array;for(const e of o){if(e.status!==f.COMPLETED)return null;const s=new Array;for(const i of e.parts){if(!i)return null;s.push(new D(i.url,i.hash))}r.push(new F(e.name,e.mimeType,s))}return{type:"service",assets:r}}function v(t){switch(t){case"COMPLETED":case"SUBMITTED":return f.COMPLETED;case"INPROGRESS":return f.PENDING;default:return f.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(f||(f={}));export{O as assetMapFromAssetMapsJSON,L as extractMesh,Lt as meshFeatureSetFromJSON};

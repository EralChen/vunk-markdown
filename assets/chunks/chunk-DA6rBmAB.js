import{iS as z,fc as F,fb as O}from"./chunk-XGpVqsM_.js";import{i as T}from"./chunk-C5pZlqNt.js";import{a as G,h as $,u as j}from"./chunk-cx_wZU7Q.js";import{OverrideHelper as q}from"./chunk-DL7bh4Gt.js";import{T as I,R as D}from"./chunk-C8-lVsN3.js";import"./chunk-DyqHK6XP.js";import"./chunk-Dix477Sg.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-CrMA_peF.js";import"./chunk-QXap_35O.js";import"./chunk-CUzevAry.js";import"./chunk-B8YJNhTg.js";const A=96/72;class Ot{constructor(a){this._spatialReference=a,this._imageDataCanvas=null,this._cimResourceManager=new T}get _canvas(){return this._imageDataCanvas||(this._imageDataCanvas=document.createElement("canvas")),this._imageDataCanvas}get resourceManager(){return this._cimResourceManager}async rasterizeCIMSymbolAsync(a,s,m,R,_,h,p,l,g,x){if(!a)return null;const{data:d}=a;if(!d||d.type!=="CIMSymbolReference"||!d.symbol)return null;const{symbol:C}=d;h||(h=z(C));const n=await q.resolveSymbolOverrides(d,s,this._spatialReference,_,h,p,l),w=this._cimResourceManager,b=[];G.fetchResources(n,w,b),G.fetchFonts(n,w,b),b.length>0&&await Promise.all(b);const{width:e,height:r}=m;let c=E(h,e,r,R,x);const t=G.getEnvelope(n,c,w);if(!t)return null;t.x===1/0&&(t.x=e+2),t.y===1/0&&(t.y=-r/2),t.width===-1/0&&(t.width=e),t.height===-1/0&&(t.height=r);let y=1,S=0,v=0;switch(C.type){case"CIMPointSymbol":case"CIMTextSymbol":{let i=1;t.width>e&&(i=e/t.width);let o=1;t.height>r&&(o=r/t.height),R==="preview"&&(t.width<e&&(i=e/t.width),t.height<r&&(o=r/t.height)),y=Math.min(i,o),S=t.x+t.width/2,v=t.y+t.height/2}break;case"CIMLineSymbol":if(x){v=t.y+t.height/2,S=t.x+t.width/2;const i=t.width-e,o=t.height-r;c={paths:I(c.paths,{xmin:-1*t.width/2+i,xmax:t.width/2-i,ymin:-1*t.height/2+o,ymax:t.height/2-o,width:t.width-2*i,height:t.height-2*o})}}else{(g||t.height>r)&&(y=r/t.height),v=t.y+t.height/2;const i=t.x*y+e/2,o=(t.x+t.width)*y+e/2,M=F(c)?c.paths:O(c)?c.rings:null;if(M===null)throw new Error("Bad geometry, can't rasterise symbol!");M[0][0][0]-=i/y,M[0][2][0]-=(o-e)/y}break;case"CIMPolygonSymbol":if(x){v=t.y+t.height/2,S=t.x+t.width/2;const i=t.width-e,o=t.height-r;c={paths:I(c.rings,{xmin:-1*t.width/2+i,xmax:t.width/2-i,ymin:-1*t.height/2+o,ymax:t.height/2-o,width:t.width-2*i,height:t.height-2*o})}}else{S=t.x+t.width/2,v=t.y+t.height/2;const i=t.x*y+e/2,o=(t.x+t.width)*y+e/2,M=t.y*y+r/2,P=(t.y+t.height)*y+r/2,{rings:u}=c;i<0&&(u[0][0][0]-=i,u[0][3][0]-=i,u[0][4][0]-=i),M<0&&(u[0][0][1]+=M,u[0][1][1]+=M,u[0][4][1]+=M),o>e&&(u[0][1][0]-=o-e,u[0][2][0]-=o-e),P>r&&(u[0][2][1]+=P-r,u[0][3][1]+=P-r)}}const k={type:"cim",data:{type:"CIMSymbolReference",symbol:n}};return this.rasterize(k,e,r,S,v,y,h,1,c)}rasterize(a,s,m,R,_,h,p,l=0,g=null,x=window.devicePixelRatio||1){const{data:d}=a;if(!d||d.type!=="CIMSymbolReference"||!d.symbol)return null;const{symbol:C}=d,n=this._canvas,w=x*A;n.width=s*w,n.height=m*w,p||(p=z(C)),g||(g=E(p,s,m,"legend")),n.width+=2*l,n.height+=2*l;const b=n.getContext("2d",{willReadFrequently:!0}),e=$.createIdentity();return e.translate(-R,-_),e.scale(h*w,-h*w),e.translate(s*w/2+l,m*w/2+l),b.clearRect(0,0,n.width,n.height),new j(b,this._cimResourceManager,e,!0).drawSymbol(C,g),b.getImageData(0,0,n.width,n.height)}}function B(f,a,s,m){return a==="esriGeometryPolygon"?{rings:D(I(f.rings,{xmin:0,ymin:0,width:s,height:m}),-1*s/2,-1*m/2)}:a==="esriGeometryPolyline"?{paths:D(I(f.paths,{xmin:0,ymin:0,width:s,height:m}),-1*s/2,-1*m/2)}:null}function E(f,a,s,m,R){const h=-a/2+1,p=a/2-1,l=s/2-1,g=-s/2+1;if(R&&(f==="esriGeometryPolygon"||f==="esriGeometryPolyline")){const x=B(R,f,a,s);if(x)return x}switch(f){case"esriGeometryPoint":return{x:0,y:0};case"esriGeometryPolyline":return{paths:[[[h,0],[0,0],[p,0]]]};default:return m==="legend"?{rings:[[[h,l],[p,0],[p,g],[h,g],[h,l]]]}:{rings:[[[h,l],[p,l],[p,g],[h,g],[h,l]]]}}}export{Ot as CIMSymbolRasterizer};

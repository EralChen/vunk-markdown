import{a1 as p}from"./chunk-Dpk1TJd9.js";import{s as m,g as l}from"./chunk-CuaFhuP3.js";import{p as c,n as s}from"./chunk-Doh-xcg3.js";import"./chunk-iOPJXyP1.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-DGmg3LSc.js";async function g(r=null,e){if(p.geometryServiceUrl)return p.geometryServiceUrl;if(!r)throw new m("internal:geometry-service-url-not-configured","No geometryServiceUrl in configuration");let o;o="portal"in r?r.portal||l.getDefault():r,await o.load({signal:e});const t=o.helperServices?.geometry?.url;if(!t)throw new m("internal:geometry-service-url-not-configured","No geometryServiceUrl in configuration");return t}async function rr(r,e,o=null,t){const n=await g(o,t),a=new c({geometries:[r],outSpatialReference:e}),i=await s(n,a,{signal:t});if(i&&Array.isArray(i)&&i.length===1)return i[0];throw new m("internal:geometry-service-projection-failed","Geometry projection failed on service")}export{g as getGeometryServiceURL,rr as projectGeometry};

import{aJ as c,s as p,bS as u,aN as m,eF as h,gF as d,ai as o,aj as a,al as y}from"./chunk-CET6Djna.js";import{c as g,n as f}from"./chunk-DzULvO1f.js";import{r as v}from"./chunk-Cth9ptfy.js";import"./chunk-BoJEKryr.js";import"./chunk-C8OU9dtJ.js";import"./chunk-DELXsNEy.js";import"./chunk-CEplUXYF.js";import"./chunk-jduAaT_8.js";import"./chunk-DjXKmJgq.js";import"./chunk-DvpRAiWy.js";import"./chunk-QXap_35O.js";import"./chunk-LAsmWdb2.js";import"./chunk-CUzevAry.js";import"./chunk-D0O1cXCS.js";import"./chunk-BFLErLYb.js";import"./chunk-CjHvAPdT.js";import"./chunk-CKwt2uXH.js";import"./chunk-CujHzHWW.js";import"./chunk-Caulfaw_.js";import"./chunk-B53CrlK2.js";import"./chunk-BkzMyFvQ.js";import"./chunk-B4mRqufT.js";import"./chunk-6EcuAM-e.js";import"./chunk-CnYD1JEb.js";import"./chunk-iL5WjyEH.js";let n=class extends v(g){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([c((()=>this.layer.customParameters),(async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)})),this.layer.on("send-message-to-socket",(async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)})),this.layer.on("send-message-to-client",(async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()})),c((()=>this.layer.purgeOptions),(()=>this._update())),c((()=>this.suspended),this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new p("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return u(e.map((r=>this.on(r,t))));const s=["data-received","message-received"].includes(e);s&&this.getWorker().then((r=>r.streamMessenger.enableEvent(e,!0)));const l=super.on(e,t),i=this;return m((()=>{l.remove(),s&&(i._workerProxy.closed||i.hasEventListener(e)||i.getWorker().then((r=>r.streamMessenger.enableEvent(e,!1))))}))}async queryLatestObservations(e,t){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new p("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const s=await this.getWorker();return f(s.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then((l=>{const i=h.fromJSON(l);return i.features.forEach((r=>{r.layer=this.layer,r.sourceLayer=this.layer})),i})),new h({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(d)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval==null&&(this._refreshInterval=setInterval((()=>this.incrementSourceRefreshVersion()),this.layer.updateInterval))}_doDisconnect(){this.getWorker().then((e=>e.streamMessenger.disconnect())),this._doPause()}_doConnect(){this.getWorker().then((e=>e.streamMessenger.connect())),this.resume()}_doClear(){this.getWorker().then((e=>e.streamMessenger.clear())),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:s=>{this.set(s.propertyName,s.value)}}}};o([a()],n.prototype,"pipelineConnectionStatus",void 0),o([a()],n.prototype,"pipelineErrorString",void 0),o([a({readOnly:!0})],n.prototype,"connectionError",null),o([a({readOnly:!0})],n.prototype,"_streamConnectionStatus",null),n=o([y("esri.views.2d.layers.StreamLayerView2D")],n);const Q=n;export{Q as default};

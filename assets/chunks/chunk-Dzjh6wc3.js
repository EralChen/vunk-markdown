import{v as n,s as c,hg as l,hh as g,hi as d,hj as y}from"./chunk-CuaFhuP3.js";import"./chunk-Dpk1TJd9.js";import"./chunk-iOPJXyP1.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-DGmg3LSc.js";function ir(m,t,r,e,i,o){if(m==null)return null;const p=m.references("geometry")&&o?h(t,e,o):t,s=m.repurposeFeature(p,i);try{return m.evaluate(s,r)}catch(u){return n.getLogger("esri.views.2d.support.arcadeOnDemand").warn("Feature arcade evaluation failed:",u),null}}const a=new Map;function h(m,t,r){const{transform:e,hasZ:i,hasM:o}=r;a.has(t)||a.set(t,f(t));const p=a.get(t)(m.geometry,e,i,o);return{...m,geometry:p}}function f(m){const t={};switch(m){case"esriGeometryPoint":return(r,e,i,o)=>y(e,t,r,i,o);case"esriGeometryPolygon":return(r,e,i,o)=>d(e,t,r,i,o);case"esriGeometryPolyline":return(r,e,i,o)=>g(e,t,r,i,o);case"esriGeometryMultipoint":return(r,e,i,o)=>l(e,t,r,i,o);default:return n.getLogger("esri.views.2d.support.arcadeOnDemand").error(new c("mapview-arcade",`Unable to handle geometryType: ${m}`)),r=>r}}export{ir as default};

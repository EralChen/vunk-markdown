import{ar as S,as as x,z as $,at as u,au as z,av as M,V as P,aw as j,ax as A,ay as O,az as k,aA as T,ai as h,aj as d,al as E}from"./chunk-CET6Djna.js";const J=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let r=class extends S{constructor(a){super(a),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._symbols=J.map((l=>new x({color:[l[0],l[1],l[2],.6],outline:{color:"black",width:1}}))),this._enabled=!0}initialize(){this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(a){this._enabled!==a&&(this._enabled=a,this.update())}update(){if(!this._enabled)return void this.clear();const a=e=>{if(e.label!=null)return e.label;let s=e.lij.toString();return e.loadPriority!=null&&(s+=` (${e.loadPriority})`),e.measures&&(s+=`[${e.measures.lodLevel}]`),s},l=this.getTiles(),y=new Array,g=new Set((this._labels.size,this._labels.keys()));l.forEach(((e,s)=>{const t=e.lij.toString();g.delete(t);const L=e.measures?.lodLevel??e.level,p=e.geometry;if(this.enablePolygons&&!this._polygons.has(t)){const o=new $({geometry:p,symbol:this._symbols[L%this._symbols.length]});this._polygons.set(t,o),y.push(o)}if(this.enableLabels){const o=a(e),w=s/(l.length-1),c=z(0,200,w),_=z(20,6,w)/.75,m=e.loadPriority!=null&&e.loadPriority>=l.length,v=new u([c,m?0:c,m?0:c]),f=this.view.type==="3d"?()=>new M({verticalOffset:new A({screenLength:40/.75}),callout:new j({color:new u("white"),border:new k({color:new u("black")})}),symbolLayers:new P([new O({text:o,halo:{color:"white",size:1/.75},material:{color:v},size:_})])}):()=>new T({text:o,haloColor:"white",haloSize:1/.75,color:v,size:_}),n=this._labels.get(t);if(n){const i=f();n.symbol!=null&&JSON.stringify(i)===JSON.stringify(n.symbol)||(n.symbol=i)}else{const i=new $({geometry:p.extent.center,symbol:f()});this._labels.set(t,i),y.push(i)}}}));const b=new Array;g.forEach((e=>{const s=this._polygons.get(e);s!=null&&(b.push(s),this._polygons.delete(e));const t=this._labels.get(e);t!=null&&(b.push(t),this._labels.delete(e))})),this.view.graphics.removeMany(b),this.view.graphics.addMany(y)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};h([d({constructOnly:!0})],r.prototype,"view",void 0),h([d({readOnly:!0})],r.prototype,"updating",void 0),h([d()],r.prototype,"enabled",null),r=h([E("esri.views.support.TileTreeDebugger")],r);export{r as d};

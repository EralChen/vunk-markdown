import{kH as o,eZ as _,kI as g,ey as x,s as T,c5 as I,fB as z,ez as R,kJ as G,c3 as w,ar as u,as as y,au as P}from"./chunk-BrJ3DEnk.js";import{l as S}from"./chunk-B-_yJ0Do.js";import{p as v}from"./chunk-u71fngQ3.js";import{m as O,l as C,_ as L,p as $,A as k,f as A,c as f}from"./chunk-CT00tuKD.js";import{y as E}from"./chunk-Iw1f6-SJ.js";import"./chunk-B5uEfUiB.js";import"./chunk-BY4ynHbL.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-SqlbPPT2.js";import"./chunk-DaU5MOeH.js";const b={bandCount:3,minOutput:0,maxOutput:1,minCutOff:[0,0,0],maxCutOff:[255,255,255],factor:[1/255,1/255,1/255],useGamma:!1,gamma:[1,1,1],gammaCorrection:[1,1,1],colormap:null,colormapOffset:null,stretchType:"none",type:"stretch"};class F{constructor(e,t,r=null,a=null){this.lij=e,this.type="raster-tile",this._memoryUsed=null,this._source=null,this._symbolizerParameters=null,this._bandIds=null,this._interpolation=null,this._dirty=!1,this._transformGrid=null,this.isRendereredSource=!1,this.symbolizerRenderer=null,this.rawPixelData=null,this.opacity=1,this.source=t,this.width=r||t.width,this.height=a||t.height}get source(){return this._source}set source(e){this._source=e,this._rasterTexture=o(this._rasterTexture),this._memoryUsed=null}get symbolizerParameters(){return this.isRendereredSource?{...b,maxCutOff:[1,1,1],factor:[1,1,1]}:this._symbolizerParameters||b}set symbolizerParameters(e){this._symbolizerParameters=e}get bandIds(){return this._bandIds}set bandIds(e){e!=null&&e.length>0?this._bandIds&&e.every((t,r)=>!!this._bandIds?.[r]&&t===this._bandIds[r])||(this._bandIds=e,this._dirty=!0):this._bandIds=null}get interpolation(){return this._interpolation||"nearest"}set interpolation(e){if(this._interpolation=e,this._rasterTexture!=null){const t=this._getRasterTextureInterpolation(e);this._rasterTexture.setSamplingMode(t==="bilinear"?_.LINEAR:_.NEAREST)}}get transformGrid(){return this._transformGrid}set transformGrid(e){this._transformGrid=e,this._transformGridTexture=o(this._transformGridTexture),this._memoryUsed=null}bind(e){return!!(this.source&&this.source.pixels&&this.source.pixels.length>0)&&((this._rasterTexture==null||this._dirty)&&this._updateRasterTexture(e,this.bandIds),this._rasterTexture!=null&&(this._updateColormapTexture(e),this.transformGrid&&this._transformGridTexture==null&&(this._transformGridTexture=O(e,this.transformGrid))),!0)}getUniforms(){const{symbolizerParameters:e,transformGrid:t,width:r,height:a,opacity:s}=this,h=C(t,[r,a],[this.source.width,this.source.height],s),p=L(e.colormap,e.colormapOffset),d=this.symbolizerParameters.type==="stretch"?$(this.symbolizerParameters):null,l=this.symbolizerParameters.type==="hillshade"?k(this.symbolizerParameters):null;return new g(h,p,d||l,this._rasterTexture,this._transformGridTexture,this._colormapTexture)}get isBilinearWithStretchColorRamp(){const{symbolizerParameters:e}=this;return this.interpolation==="bilinear"&&e.colormap!=null&&e.type==="stretch"}get memoryUsage(){if(this._memoryUsed==null){const e=[this._rasterTexture,this._transformGridTexture,this._colormapTexture];this._memoryUsed=e.map(t=>t!=null?t.descriptor.width*t.descriptor.height*4:0).reduce((t,r)=>t+r,0)}return this._memoryUsed}release(){return this._rasterTexture=o(this._rasterTexture),this._transformGridTexture=o(this._transformGridTexture),this._colormapTexture=o(this._colormapTexture),this.source=null,this.transformGrid=null,this.rawPixelData=null,!0}_updateRasterTexture(e,t){const r=this.source?this.source.extractBands(t):null;if(!(r?.pixels&&r.pixels.length>0))return void(this._rasterTexture=o(this._rasterTexture));const a=t==null&&this.bandIds==null||t!=null&&this.bandIds!=null&&t.join("")===this.bandIds.join("");if(this._rasterTexture!=null&&a)return;this._rasterTexture=o(this._rasterTexture);const s=this._getRasterTextureInterpolation(this.interpolation);this._rasterTexture=A(e,r,s,this.isRendereredSource||this.hasStretchTypeNone())}hasStretchTypeNone(){return"stretchType"in this.symbolizerParameters&&this.symbolizerParameters.stretchType==="none"&&!this.symbolizerParameters.useGamma&&this.source.pixelType==="u8"}_getRasterTextureInterpolation(e){return this.symbolizerParameters.type==="lut"||e==="nearest"||e==="majority"||this.isBilinearWithStretchColorRamp?"nearest":"bilinear"}_updateColormapTexture(e){const t=this._colormap,r=this.symbolizerParameters.colormap;return r?t?r.length!==t.length||r.some((a,s)=>a!==t[s])?(this._colormapTexture=o(this._colormapTexture),this._colormapTexture=f(e,r),void(this._colormap=r)):void 0:(this._colormapTexture=f(e,r),void(this._colormap=r)):(this._colormapTexture=o(this._colormapTexture),void(this._colormap=null))}}let m=class extends E(x(v(S(w)))){constructor(){super(...arguments),this.type="imagery-tile-3d",this._isAlignedMapTile=!0}initialize(){this.layer.increaseRasterJobHandlerUsage(),this.fullExtent==null&&this.addResolvingPromise(Promise.reject(new T("layerview:spatial-reference-incompatible","The layer extent cannot be projected to the view's spatial reference",{layer:this.layer})));const i=I(()=>this.view?.basemapTerrain?.tilingSchemeLocked).then(()=>{const e=this.view.basemapTerrain.tilingScheme,t=this.layer.tileInfo;this._isAlignedMapTile=["png","png24","png32","jpg","mixed"].includes(t.format)&&e.compatibleWith(t),this.tileInfo=this._isAlignedMapTile?t:e.toTileInfo(),this._updatingHandles.add(()=>[this.layer.renderer,this.layer.interpolation,this.layer.bandIds,this.layer.multidimensionalDefinition,this.layer.multidimensionalSubset,this.layer.rasterFunction,this.timeExtent],()=>this.refresh())});this.addResolvingPromise(i)}destroy(){this.layer.decreaseRasterJobHandlerUsage()}get _blankTile(){const i=document.createElement("canvas"),e=i.getContext("2d"),[t,r]=this.tileInfo.size;return i.width=t,i.height=r,e.clearRect(0,0,t,r),e.getImageData(0,0,t,r)}get imageFormatIsOpaque(){return this.layer.tileInfo.format==="jpg"}get hasMixedImageFormats(){return this.layer.tileInfo.format==="mixed"}get dataLevelRange(){const i=this.layer.tileInfo,e=this.tileInfo.lodAt(0)?.scale,t=this.layer.tileInfo.lodAt(i.lods.length-1)?.scale;return this.levelRangeFromScaleRange(e,t)}_getFullExtent(){return z(this.layer.serviceRasterInfo,this.view.basemapTerrain?.spatialReference??this.view.spatialReference)}async fetchTile(i,e){const t=this.tileInfo,r=this._canSymbolizeInWebGL(),a={tileInfo:t,requestRawData:r,signal:e.signal,timeExtent:this.timeExtent,requestAsImageElement:this._isAlignedMapTile,noClip:!1},{layer:s}=this,[h,p,d]=i,l=await s.fetchTile(h,p,d,a);if(l instanceof HTMLImageElement)return l;let c=l?.pixelBlock;if(c==null)return this._blankTile;if(!r&&(c=await s.applyRenderer(l),c==null))return this._blankTile;const n=new F([h,p,d],c,t.size[0],t.size[1]);return r?(n.symbolizerRenderer=s.symbolizer.rendererJSON,n.symbolizerParameters=s.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(h)),n.transformGrid=l.transformGrid,n.bandIds=s.bandIds):(n.isRendereredSource=!0,n.bandIds=null),n.interpolation=s.interpolation,n}_getSymbolizerOptions(i){const e=this.tileInfo.lodAt(i).resolution;return{pixelBlock:null,isGCS:this.view.basemapTerrain?.spatialReference!=null?this.view.basemapTerrain.spatialReference.isGeographic:this.view.spatialReference.isGeographic,resolution:{x:e,y:e},bandIds:this.layer.bandIds}}ensureSymbolizerParameters(i){this._canSymbolizeInWebGL()&&JSON.stringify(i.symbolizerRenderer)!==JSON.stringify(this.layer.symbolizer.rendererJSON)&&(i.symbolizerParameters=this.layer.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(i.lij[0])))}createFetchPopupFeaturesQueryGeometry(i,e){return R(i,e,this.view)}refresh(){this.emit("data-changed")}async doRefresh(){this.suspended||this.emit("data-changed")}_canSymbolizeInWebGL(){const i=G(),{symbolizer:e}=this.layer,t=e.lookup?.colormapLut?.indexedColormap,r=!!this.layer.rasterFunction?.hasClipFunction,a=t&&t.length>4*(i.maxTextureSize||4906);return e.canRenderInWebGL&&!a&&!r}};u([y({readOnly:!0})],m.prototype,"_blankTile",null),u([y({readOnly:!0})],m.prototype,"imageFormatIsOpaque",null),u([y({readOnly:!0})],m.prototype,"hasMixedImageFormats",null),u([y({readOnly:!0})],m.prototype,"dataLevelRange",null),m=u([P("esri.views.3d.layers.ImageryTileLayerView3D")],m);const ve=m;export{ve as default};

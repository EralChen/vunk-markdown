import{ao as V,d0 as U,hK as E,eU as F,hL as X,hM as d,v as Y,hF as D,hN as W,hO as H,hP as j,hQ as I,hR as K,hS as G,af as s,ag as l,ai as N}from"./chunk-CuaFhuP3.js";import"./chunk-Dpk1TJd9.js";import{l as Q,u as T,t as _}from"./chunk-Cr7ySozI.js";import"./chunk-iOPJXyP1.js";import"./chunk-DGmg3LSc.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */let o=class extends V{constructor(t){super(t),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){return this.grid?.rotateWithMap?0:U(this.view.rotation??0)}get gridRotation(){return U(this.grid?.rotation??0)}get gridCenter(){const{spatialReference:t,grid:r}=this;if(!r||!t||!E(r.center.spatialReference,t))return null;try{const e=F(r.center,t),i=t.isWrappable&&this.view?.center!=null?X(e.x,this.view.center.x,t):e.x;return d(i,e.y,e.z)}catch(e){return Y.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",e),null}}get offsetScaleFactor(){const{pixelsPerStride:t,grid:r}=this;if(!r||!t)return 1;const{majorLineInterval:e,dynamicScaling:i}=r;return e<1?null:Q(e,t,i)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:t}=this;return t?D(t.spacing,t.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:t}=this;return t==null?null:t*W(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:t}=this.view;return this.gridCenter?T(this.gridCenter[0],this.gridCenter[1],t):null}get pixelsPerStride(){const{gridMetersPerStride:t,viewMetersPerPixel:r}=this;return r&&t?t/r:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(t,r,e){const{options:i,view:n}=this;if(!i?.effectiveGridEnabled||!n.grid||e.feature?.attributes&&H in e.feature.attributes)return[];const a=e.coordinateHelper.arrayToPoint(t),p=i.distance*(e.pointer==="touch"?i.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(a,p)}fetchCandidatesSync(t,r){const e=[],{grid:i,effectiveViewRotation:n,gridRotation:a,gridCenter:p,viewMetersPerPixel:m,viewMetersPerSRUnit:h,offsetScaleFactor:S,spatialReference:g,gridMetersPerStride:$,pixelsPerStride:C}=this;if(!(i&&m&&h&&p&&g&&S&&$&&C)||!i.dynamicScaling&&C<_||!E(t.spatialReference,g))return e;const y=F(t,g),O=d(y.x,y.y,y.z),u=f(O,-a,p,-n),P=$/h*S,c=k(u,P,p),{shouldSnapX:v,shouldSnapY:w}=q(c,u,r,m,h);if(!v&&!w)return[];const z=d((v?c:u)[0],(w?c:u)[1]),M=f(z,a,p,n),b=f(c,a,p,n);if(w){const R=L(c,u,P,"y"),x=f(R,a,p,n);e.push(new j({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}if(v){const R=L(c,u,P,"x"),x=f(R,a,p,n);e.push(new j({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}return v&&w&&e.push(new I(M,e[0],e[1],!1)),e}};s([l({constructOnly:!0})],o.prototype,"view",void 0),s([l()],o.prototype,"options",void 0),s([l()],o.prototype,"grid",null),s([l()],o.prototype,"effectiveViewRotation",null),s([l()],o.prototype,"gridRotation",null),s([l()],o.prototype,"gridCenter",null),s([l()],o.prototype,"offsetScaleFactor",null),s([l()],o.prototype,"spatialReference",null),s([l()],o.prototype,"gridMetersPerStride",null),s([l()],o.prototype,"viewMetersPerPixel",null),s([l()],o.prototype,"viewMetersPerSRUnit",null),s([l()],o.prototype,"pixelsPerStride",null),s([l()],o.prototype,"updating",null),o=s([N("esri.views.interactive.snapping.GridSnappingEngine")],o);const f=(t,r,e,i)=>{const n=K(t[0],t[1],t[2]);return G(n,G(n,n,e,r),e,i)},k=(t,r,e)=>{const i=(t[0]-e[0])/r,n=(t[1]-e[1])/r,a=Math.trunc(i),p=Math.trunc(n),m=Math.round(i%1),h=Math.round(n%1),S=e[0]+(a+m)*r,g=e[1]+(p+h)*r;return d(S,g)},q=(t,r,e,i,n)=>{if(i<=0)return{shouldSnapX:!1,shouldSnapY:!1};const a=(t[0]-r[0])/i,p=(t[1]-r[1])/i;return{shouldSnapX:Math.abs(a*n)<e,shouldSnapY:Math.abs(p*n)<e}},L=(t,r,e,i)=>{if(i==="y"){const a=r[0]>t[0]?1:-1;return d(t[0]+e*a,t[1])}const n=r[1]>t[1]?1:-1;return d(t[0],t[1]+e*n)};export{o as GridSnappingEngine};

import{w as a,_ as n,D as s}from"./chunk-BpvTR7dV.js";import{fromGeometry as f,toGeometry as t,fromGeometries as c,fromGeometryToGXGeometry as u}from"./chunk-BoBj9ZcI.js";import"./chunk-B92kdZ15.js";import"./chunk-BUVSeX7E.js";import"./chunk-A9ItisFv.js";import"./chunk-Da9IW-EP.js";import"./chunk-RvJNgVq9.js";import"./chunk-CuaFhuP3.js";import"./chunk-Dpk1TJd9.js";import"./chunk-iOPJXyP1.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-DGmg3LSc.js";import"./chunk-DP7_WWTp.js";function ao(o){const r=f(o);return t(a(r.getGeometry()),r.getSpatialReference())}function no(o,r={}){const{merge:m=!1}=r,[i,p]=c(o);return n(i,m).map((e=>t(e,p)))}function so(o){return s(u(o))}export{ao as execute,no as executeMany,so as isConvex};

import{cq as y,cr as d,cs as b,O as u,ct as M,cu as C,cv as I,cw as x,cx as O,cy as k,aA as S}from"./chunk-DYmUVOBN.js";import h from"./chunk-Dc8NTmU4.js";import"./chunk-DODhI9iV.js";import"./chunk-DdHotv1K.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-SqlbPPT2.js";const N=m=>{if(!m)return[0,0,0,0];const{r:e,g:r,b:i,a:t}=m;return[e,r,i,255*t]};class a{static findApplicableOverrides(e,r,i){if(e&&r){if(e.primitiveName){let t=!1;for(const o of i)if(o.primitiveName===e.primitiveName){t=!0;break}if(!t)for(const o of r)o.primitiveName===e.primitiveName&&i.push(o)}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const t of e.effects)a.findApplicableOverrides(t,r,i);if(e.symbolLayers)for(const t of e.symbolLayers)a.findApplicableOverrides(t,r,i);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMPictureStroke":case"CIMGradientStroke":case"CIMSolidFill":case"CIMPictureFill":case"CIMHatchFill":case"CIMGradientFill":case"CIMVectorMarker":case"CIMCharacterMarker":case"CIMPictureMarker":if(e.effects)for(const t of e.effects)a.findApplicableOverrides(t,r,i);if(e.markerPlacement&&a.findApplicableOverrides(e.markerPlacement,r,i),e.type==="CIMVectorMarker"){if(e.markerGraphics)for(const t of e.markerGraphics)a.findApplicableOverrides(t,r,i),a.findApplicableOverrides(t.symbol,r,i)}else e.type==="CIMCharacterMarker"?a.findApplicableOverrides(e.symbol,r,i):e.type==="CIMHatchFill"?a.findApplicableOverrides(e.lineSymbol,r,i):e.type==="CIMPictureMarker"&&a.findApplicableOverrides(e.animatedSymbolProperties,r,i)}}}static findEffectOverrides(e,r){if(!e)return null;if(e.type==="CIMGeometricEffectDashes"&&y(e),!r||!e.primitiveName)return{type:"cim-effect-param",effect:e,overrides:[]};const i=d(e),t=e.primitiveName,o=[];for(const p of r)p.primitiveName===t&&o.push(d(p));return{type:"cim-effect-param",effect:i,overrides:b(o)}}static async resolveSymbolOverrides(e,r,i,t,o,p,s){if(!e?.symbol)return null;let{symbol:l,primitiveOverrides:c}=e;const f=!!c;if(!f&&!t)return l;l=u(l),c=u(c);let v=!0;if(r||(r={attributes:{}},v=!1),f){if(v||(c=c.filter(n=>!n.valueExpressionInfo?.expression.includes("$feature"))),s||(c=c.filter(n=>!n.valueExpressionInfo?.expression.includes("$view"))),c.length>0){const n={spatialReference:i,fields:M(r.attributes),geometryType:o};await a.createRenderExpressions(c,n),a.evaluateOverrides(c,r,o??"esriGeometryPoint",p,s)}a.applyOverrides(l,c)}return t&&a.applyDictionaryTextOverrides(l,r,t,null),l}static async createRenderExpressions(e,r){const i=[];for(const t of e){const o=t.valueExpressionInfo;if(!o||a._expressionToRenderExpression.has(o.expression))continue;const p=C(o.expression,r.spatialReference,r.fields);i.push(p),p.then(s=>a._expressionToRenderExpression.set(o.expression,s))}i.length>0&&await Promise.all(i)}static evaluateOverrides(e,r,i,t,o){const p={$view:{scale:o?.scale}};for(const s of e){s.value&&typeof s.value=="object"&&I(s.value)&&(s.propertyName==="Color"||s.propertyName==="StrokeColor")&&(s.value=N(s.value));const l=s.valueExpressionInfo;if(!l)continue;const c=a._expressionToRenderExpression.get(l.expression);c&&(s.value=h(c,r,p,i,t))}}static applyDictionaryTextOverrides(e,r,i,t,o="Normal"){if(e?.type)switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":case"CIMTextSymbol":{const p=e.symbolLayers;if(!p)return;for(const s of p)s&&s.type==="CIMVectorMarker"&&a.applyDictionaryTextOverrides(s,r,i,t,e.type==="CIMTextSymbol"?e.textCase:o)}break;case"CIMVectorMarker":{const p=e.markerGraphics;if(!p)return;for(const s of p)s&&a.applyDictionaryTextOverrides(s,r,i,t)}break;case"CIMMarkerGraphic":{const p=e.textString;if(p&&p.includes("[")){const s=x(p,i);e.textString=O(r,s,t,o)}}}}static applyOverrides(e,r,i,t){if(e.primitiveName){for(const o of r)if(o.primitiveName===e.primitiveName){const p=k(o.propertyName);if(t&&t.push({cim:e,nocapPropertyName:p,value:e[p]}),i){let s=!1;for(const l of i)l.primitiveName===e.primitiveName&&(s=!0);s||i.push(o)}o.value!=null&&(e[p]=o.value)}}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const o of e.effects)a.applyOverrides(o,r,i,t);if(e.symbolLayers)for(const o of e.symbolLayers)a.applyOverrides(o,r,i,t);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMSolidFill":case"CIMVectorMarker":if(e.effects)for(const o of e.effects)a.applyOverrides(o,r,i,t);if(e.type==="CIMVectorMarker"&&e.markerGraphics)for(const o of e.markerGraphics)a.applyOverrides(o,r,i,t),a.applyOverrides(o.symbol,r,i,t)}}static restoreOverrides(e){for(const r of e)r.cim[r.nocapPropertyName]=r.value}static buildOverrideKey(e){let r="";for(const i of e)i.value!==void 0&&(r+=`${i.primitiveName}${i.propertyName}${JSON.stringify(i.value)}`);return r}static toValue(e,r){if(e==="DashTemplate")return r.split(" ").map(i=>Number(i));if(e==="Color"){const i=new S(r).toRgba();return i[3]*=255,i}return r}}a._expressionToRenderExpression=new Map;export{a as OverrideHelper};

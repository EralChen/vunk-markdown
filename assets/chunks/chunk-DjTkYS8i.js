import{aP as m,s as l,eT as h,aV as u,dp as c,fu as d,ar as n,as as a,au as y}from"./chunk-BLrLWCUc.js";import{d as g,n as f}from"./chunk-DO2zzTZI.js";import{r as v}from"./chunk-ypy2tOai.js";import"./chunk-CWUYlh1e.js";import"./chunk-BDqMgIU1.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-BYZ9-mKN.js";import"./chunk-C76vH4Sg.js";import"./chunk-DQFFpv1p.js";import"./chunk-CavDm1hw.js";import"./chunk-UsAATrwl.js";import"./chunk-DD9fOPWq.js";import"./chunk-QXap_35O.js";import"./chunk-BJ-u1EzU.js";import"./chunk-CUzevAry.js";import"./chunk-F985OGmv.js";import"./chunk-CKwt2uXH.js";import"./chunk-CujHzHWW.js";import"./chunk-Caulfaw_.js";import"./chunk-CufFkCZ9.js";import"./chunk-B4mRqufT.js";import"./chunk-DCBC_481.js";import"./chunk-CEK1cyJt.js";let i=class extends v(g){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),m(()=>this.layer.purgeOptions,()=>this._update()),m(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new l("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return h(e.map(r=>this.on(r,t)));const s=["data-received","message-received"].includes(e);s&&this.getWorker().then(r=>r.streamMessenger.enableEvent(e,!0));const p=super.on(e,t),o=this;return u(()=>{p.remove(),s&&(o._workerProxy.closed||o.hasEventListener(e)||o.getWorker().then(r=>r.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new l("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const s=await this.getWorker();return f(s.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(p=>{const o=c.fromJSON(p);return o.features.forEach(r=>{r.layer=this.layer,r.sourceLayer=this.layer}),o}),new c({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(d)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:s=>{this.set(s.propertyName,s.value)}}}};n([a()],i.prototype,"pipelineConnectionStatus",void 0),n([a()],i.prototype,"pipelineErrorString",void 0),n([a({readOnly:!0})],i.prototype,"connectionError",null),n([a({readOnly:!0})],i.prototype,"_streamConnectionStatus",null),i=n([y("esri.views.2d.layers.StreamLayerView2D")],i);const Ce=i;export{Ce as default};

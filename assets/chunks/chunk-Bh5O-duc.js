import{b_ as A,dx as W,gi as $,aV as Y,qC as S,qD as _,dz as h,P as f,F as p,ic as X,qE as Z,qF as ee,qG as te,qH as se,qI as oe,qJ as re,qK as ne,$ as ae,ie,qL as ce,qM as x,bc as pe,qN as le,qO as ue,qP as me,fP as fe,cP as de,i1 as ge,qQ as he,qR as we,Y as ye}from"./chunk-mH00GGPN.js";import{m as Pe,N as be,b as Te,a as D,i as E}from"./chunk-Be9BD1bz.js";import{i as Ae,n as $e}from"./chunk-BPrR6vxC.js";import"./chunk-Crt2IEHJ.js";import"./chunk-D3Fu2eSY.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-SqlbPPT2.js";const q={uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function w(s,e=o=>{},t){return new qe(s,e,t)}let qe=class{constructor(e,t=r=>{},o){if(this.onProgress=t,this.taskName=o,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,typeof e=="number"){this._weights={};for(let r=0;r<e;r++){const n=r,a=1/e;this._weights[n]=a,this._progressMap.set(n,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[t,o]of this._progressMap.entries())e+=o*this._weights[t];if(e===1&&A("enable-feature:esri-3dofl-upload-timings")){const t=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${t} sec`);for(const[o,r]of this._timingsMap){const n=Math.round(r.end-r.start)/1e3,a=Math.round(n/t*100);console.log(this.taskName??"Task",{stepKey:o,stepTime:n,relativeTime:a})}}this.onProgress(e)}setProgress(e,t){if(this._progressMap.set(e,t),A("enable-feature:esri-3dofl-upload-timings")){const o=performance.now();this._startTime??=o;const r=W(this._timingsMap,e,()=>({start:o,end:0}));t===1&&(r.end=o)}this.emitProgress()}simulate(e,t){return I(o=>this.setProgress(e,o),t)}makeOnProgress(e){return t=>this.setProgress(e,t)}};function I(s=t=>{},e=Se){const t=performance.now();s(0);const o=setInterval(()=>{const r=performance.now()-t,n=1-Math.exp(-r/e);s(n)},Ne);return Y(()=>{clearInterval(o),s(1)})}function ve(s,e=Me){return S(_(s*R/e))}function Fe(s,e=je){return S(_(s*R/e))}const Me=10,je=10,R=8e-6,Ne=$(50),Se=$(1e3),C=1e6,N=20*C,_e=2e9,xe=3;async function De({data:s,name:e,description:t},o,r){let n=null;try{const a=h(o,"uploads"),i=h(a,"info"),{data:l}=await f(i,{query:{f:"json"},responseType:"json"});p(r);const d=X(o),g=l.maxUploadFileSize*C,m=d?_e:g,c=d?Math.min(N,g):N;if(s.size>m)throw new Error("Data too large");const z=h(a,"register"),{data:v}=await f(z,{query:{f:"json",itemName:Ee(e),description:t},responseType:"json",method:"post"});if(p(r),!v.success)throw new Error("Registration failed");const{itemID:L}=v.item;n=h(a,L);const H=h(n,"uploadPart"),F=Math.ceil(s.size/c),y=new Array;for(let u=0;u<F;++u)y.push(s.slice(u*c,Math.min((u+1)*c,s.size)));const P=y.slice().reverse(),M=new Array,G=w(F,r?.onProgress,"uploadItem"),J=async()=>{for(;P.length!==0;){const u=y.length-P.length,b=P.pop(),T=new FormData,V=G.simulate(u,ve(b.size));try{T.append("f","json"),T.append("file",b),T.append("partId",`${u}`);const{data:Q}=await f(H,{timeout:0,body:T,responseType:"json",method:"post"});if(p(r),!Q.success)throw new Error("Part upload failed")}finally{V.remove()}}};for(let u=0;u<xe&&P.length!==0;++u)M.push(J());await Promise.all(M);const K=h(n,"commit"),{data:j}=await f(K,{query:{f:"json",parts:y.map((u,b)=>b).join(",")},responseType:"json",method:"post"});if(p(r),!j.success)throw new Error("Commit failed");return j.item}catch(a){if(n!=null){const i=h(n,"delete");await f(i,{query:{f:"json"},responseType:"json",method:"post"})}throw a}}function Ee(s){return s.replaceAll("/","_").replaceAll("\\","_")}async function Gt(s,e,t){const o=s.length;if(!o)return t?.onProgress?.(1),[];const r=w(o,t?.onProgress,"uploadAssets");return Promise.all(s.map((n,a)=>Ie(n,e,{...t,onProgress:r.makeOnProgress(a)})))}async function Ie(s,{layer:e,ongoingUploads:t},o){const r=t.get(s);if(r)return r;if(!Ze(e))throw new Z;if(Re(s,e))return o?.onProgress?.(1),s;const n=Ce(s,e,o);t.set(s,n);try{await n}finally{t.delete(s)}return s}function Re(s,e){const{parsedUrl:t}=e;return t!=null&&s.metadata.externalSources.some(o=>Pe(o,t))}async function Ce(s,e,t){const{metadata:o}=s,{displaySource:r}=o,n=k(r?.source,e,{checkForConversionRequired:A("enable-feature:georeferenced-uploads")}),a=n!=null?ke(n,e,t):o.externalSources.length>0?Oe(s,e,t):Ue(s,e,t),i=await a;return p(t),s.addExternalSources([i]),s}async function ke(s,e,t){return{source:await O(s,e,t),original:!0,unitConversionDisabled:!0}}async function Oe(s,e,t){const o=B(e),{externalSources:r}=s.metadata,n=ze(r,e);if(!n)throw new se;const a=w(q.uploadConvertibleSource,t?.onProgress,"uploadConvertibleSource"),i=await O(n,e,{onProgress:a.makeOnProgress("uploadEditSource")});s.addExternalSources([{source:i,original:!0}]);const l=n.reduce((g,{asset:m})=>m instanceof File?g+m.size:g,0),d=a.simulate("serviceAssetsToGlb",Fe(l));try{const{source:g,transform:m,origin:c}=await Qe(i,e,o);return s.transform=m,c&&(s.metadata.georeferenced=!0,t?.useAssetOrigin&&(s.vertexSpace.origin=[c.x,c.y,c.z??0],s.spatialReference=c.spatialReference)),{source:g,unitConversionDisabled:!0}}finally{d.remove()}}async function Ue(s,e,t){const o=w(q.uploadLocalMesh,t?.onProgress,"uploadLocalMesh"),r=Be(s,e,{...t,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:await U([r],e,{...t,onProgress:o.makeOnProgress("uploadAssetBlobs")}),extent:s.extent.clone(),original:!0}}async function Be(s,e,t){const o=B(e),r=await s.load(t),n=await r.toBinaryGLTF({origin:r.origin,signal:t?.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return p(t),{blob:new Blob([n],{type:"model/gltf-binary"}),assetName:`${ae()}.glb`,assetType:o}}function ze(s,e){for(const t of s){const o=k(t.source,e);if(o)return o}return null}function k(s,{infoFor3D:e},t={}){if(!s)return null;const{supportedFormats:o,editFormats:r}=e,n=be(s),a=new Array,i=ee(e),l=te(e);let d=!1;for(const g of n){const m=Le(g,o);if(!m)return null;const{assetType:c}=m;if(t.checkForConversionRequired&&(c===i||c===l))return null;r.includes(c)&&(d=!0),a.push(m)}return d?a:null}function Le(s,e){const t=Te(s,e);return t?{asset:s,assetType:t}:null}async function O(s,e,t){return U(s.map(o=>He(o,t)),e,t)}async function U(s,e,t){const o=w(q.uploadAssetBlobs,t?.onProgress,"uploadAssetBlobs"),r=await Je(s,e,{...t,onProgress:o.makeOnProgress("prepareAssetItems")});p(t);const n=r.map(({item:i})=>i),{uploadResults:a}=await Ke(n,e,{...t,onProgress:o.makeOnProgress("uploadAssetItems")});return p(t),s.map((i,l)=>Ve(r[l],a[l],e))}async function He(s,e){const{asset:t,assetType:o}=s;if(t instanceof File)return{blob:t,assetName:t.name,assetType:o};const r=await t.toBlob(e);return p(e),{blob:r,assetName:t.assetName,assetType:o}}async function Ge(s,e,t){const{blob:o,assetType:r,assetName:n}=s;let a=null;try{const i=await De({data:o,name:n},e.url,t);p(t),a={assetType:r,assetUploadId:i.itemID}}catch(i){de(i),et().warnOnce(`Service ${e.url} does not support the REST Uploads API.`)}if(!a){const i=await ge(o);if(p(t),!i.isBase64)throw new he;a={assetType:r,assetData:i.data}}if(!a)throw new we;return{item:a,assetName:n}}function Je(s,e,t){const o=w(s.length,t?.onProgress,"prepareAssetItems");return Promise.all(s.map(async(r,n)=>{const a=Ge(await r,e,{...t,onProgress:o.makeOnProgress(n)});return p(t),a}))}async function Ke(s,e,t){const o=I(t?.onProgress);try{const r=await f(h(e.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(s)},method:"post",responseType:"json"});if(p(t),r.data.uploadResults.length!==s.length)throw new ue(s.length,r.data.uploadResults.length);return r.data}finally{o.remove()}}function Ve(s,e,t){const{success:o}=e;if(!o){const{error:d}=e;throw new me(s.assetName,d)}const{assetHash:r}=e,{assetName:n,item:{assetType:a}}=s,{infoFor3D:{supportedFormats:i}}=t,l=fe(a,i);if(!l)throw new x(a);return new D(n,l,[new E(`${t.parsedUrl.path}/assets/${r}`,r)])}async function Qe(s,e,t){const o=s.map(({assetName:n,parts:a})=>({assetName:n,assetHash:a[0].partHash}));let r;try{const n=h(e.parsedUrl.path,"convert3D"),a=e.capabilities?.operations.supportsAsyncConvert3D;r=(await(a?Xe:Ye)(n,{query:{f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:t,async:a},responseType:"json",timeout:0})).data}catch{throw new ne}return We(e,r)}function We(s,e){const t={source:e.assets.map(o=>{const r=ce(o.contentType,s.infoFor3D.supportedFormats);if(!r)throw new x(r);return new D(o.assetName,o.contentType,[new E(o.assetURL,o.assetHash)])}),origin:void 0,transform:void 0};if(A("enable-feature:georeferenced-uploads")&&e.transform){if(t.transform=Ae(e.transform),e.spatialReference){const o=pe.fromJSON(e.spatialReference);t.origin=$e(e.transform,o)}}else t.transform=le(s.spatialReference);return t}function Ye(s,e){return f(s,e)}async function Xe(s,e){const t=(await f(s,e)).data.statusUrl;for(;;){const o=(await f(t,{query:{f:"json"},responseType:"json"})).data;switch(o.status){case"Completed":return f(o.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(o.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await ie(tt)}}function Ze(s){return!!s.infoFor3D&&!!s.url}function B({infoFor3D:s}){const e=oe(s);if(!e)throw new re;return e}function et(){return ye.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const tt=$(1e3);export{Gt as uploadAssets};

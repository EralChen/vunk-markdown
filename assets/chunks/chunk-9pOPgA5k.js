import{bJ as y,mo as u,we as _,ms as f,bW as x,k0 as W,wf as U,bF as c,wg as R,jk as M,rr as D,hY as Y,b9 as k,wh as F,wi as Z,wj as G,wk as H,wl as J,uQ as z,wm as B,wn as K,wo as C,kJ as A,bv as b,jn as I,wp as X,wq as T,bE as Q,wr as ee,ws as te,wt as se,eR as ie,mp as re,mr as ne,mq as oe,cq as ae,b8 as he,wu as de,wv as le,ww as ce,ar as pe,V as ge,mm as ue,ju as fe,ai as L,aj as $,al as xe}from"./chunk-Dx0VeHfy.js";import"./chunk-DHAEDrTs.js";class q{constructor(s,e){this.view=s,this.options=e,this.squaredShortLineThreshold=y.shortLineThreshold*y.shortLineThreshold}snap(s,e){return e.vertexHandle!=null?e.vertexHandle.type!=="vertex"?[]:this.snapExistingVertex(s,e):this.snapNewVertex(s,e)}edgeExceedsShortLineThreshold(s,e){return this.exceedsShortLineThreshold(u(s.leftVertex.pos,this.view,e),u(s.rightVertex.pos,this.view,e),e)}exceedsShortLineThreshold(s,e,{spatialReference:t}){return this.squaredShortLineThreshold===0||_(f(e,t,x,this.view),f(s,t,x,this.view))>this.squaredShortLineThreshold}isVertical(s,e,{spatialReference:t}){const i=W(t);return U(c(s),c(e))*i<y.verticalLineThresholdMeters}squaredProximityThreshold(s){return s==="touch"?this._squaredTouchProximityThreshold:this._squaredMouseProximityThreshold}get _squaredMouseProximityThreshold(){return this.options.distance*this.options.distance}get _squaredTouchProximityThreshold(){const{distance:s,touchSensitivityMultiplier:e}=this.options,t=s*e;return t*t}}class we extends q{constructor(s,e,t){super(s,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=[];if(i<1)return r;const{spatialReference:n}=e,a=f(s,n,x,this.view),{view:o}=this,h=t.edges[i-1];let d=h;do{if(this.edgeExceedsShortLineThreshold(d,e)){const p=R(d,o,e);this._processCandidateProposal(p.left,p.right,s,a,e,r)}d=d.leftVertex.leftEdge}while(d&&d!==h);return r}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2)return t;const{view:n}=this,{spatialReference:a}=e,o=f(s,a,x,n),h=i.leftEdge,d=i.rightEdge;h&&d&&this.edgeExceedsShortLineThreshold(h,e)&&this.edgeExceedsShortLineThreshold(d,e)&&this._processCandidateProposal(u(h.leftVertex.pos,n,e),u(d.rightVertex.pos,n,e),s,o,e,t);const p=r.edges[0];let g=p;do{if(g!==i.leftEdge&&g!==i.rightEdge&&this.edgeExceedsShortLineThreshold(g,e)){const w=R(g,n,e);this._processCandidateProposal(w.left,w.right,s,o,e,t)}g=g.rightVertex.rightEdge}while(g&&g!==p);return t}_processCandidateProposal(s,e,t,i,r,n){const{spatialReference:a,pointer:o}=r,h=k();ve(h,s,e,t,r,this._geodesicLengthMeasurementUtils);const d=M(D(h));_(i,f(d,a,x,this.view))<this.squaredProximityThreshold(o)&&n.push(new Y({lineStart:s,lineEnd:e,targetPoint:d,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}function ve(l,s,e,t,i,r){me(l,s,e,t,i,r)||Ee(l,t,s,e)}function me(l,s,e,t,{spatialReference:i},r){const n=F(s,e,i,i);if(n==null)return!1;const a=F(e,t,i,i);if(a==null)return!1;const o=r.geodesicDistance(e,t,i);if(o==null)return!1;const h=Math.abs(Z.shortestSignedDiff(n,a))>Math.PI/2?G.normalize(n+Math.PI):n;return H(l,e,i,J(o,"meters"),z(h,"radians","geographic"),"geodesic"),l[2]=t[2],!0}function Ee(l,s,e,t){B(s,{start:e,end:t,type:K.LINE},l),l[2]=s[2]}let Ve=class extends q{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=t.vertices.length,n=[];if(i<2)return n;const{view:a}=this,o=f(s,e.spatialReference,x,a),h=u(t.vertices[r-1].pos,a,e),d=u(t.vertices[0].pos,a,e),p=t.edges[i-1];let g=p;do{if(this.edgeExceedsShortLineThreshold(g,e)){const w=R(g,a,e);this._checkEdgeForParallelLines(w,h,s,o,e,n),this._checkEdgeForParallelLines(w,d,s,o,e,n)}g=g.leftVertex.leftEdge}while(g&&g!==p);return n}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<3)return t;const{view:n}=this,a=f(s,e.spatialReference,x,n),o=i.leftEdge,h=i.rightEdge,d=r.vertices[0],p=u(d.pos,n,e),g=r.vertices.length,w=r.vertices[g-1],V=u(w.pos,n,e),P=r.edges[0];let v=P;do{if(v!==o&&v!==h&&this.edgeExceedsShortLineThreshold(v,e)){const S=R(v,n,e);o&&this._checkEdgeForParallelLines(S,u(o.leftVertex.pos,n,e),s,a,e,t),h&&this._checkEdgeForParallelLines(S,u(h.rightVertex.pos,n,e),s,a,e,t),i===d?this._checkEdgeForParallelLines(S,V,s,a,e,t):i===w&&this._checkEdgeForParallelLines(S,p,s,a,e,t)}v=v.rightVertex.rightEdge}while(v&&v!==P);return t}_checkEdgeForParallelLines(s,e,t,i,r,n){const a=s.left,o=s.right;if(C(m,c(e),c(a),c(o)),A(m,c(e))<y.parallelLineThreshold)return;C(m,c(t),c(a),c(o),c(e));const{spatialReference:h,pointer:d}=r,p=M(I(m[0],m[1],t[2]));if(_(i,f(p,h,x,this.view))<this.squaredProximityThreshold(d)){if(this.isVertical(p,e,r)||this.isVertical(a,o,r)||Le(s,n))return;n.push(new X({referenceLine:s,lineStart:e,targetPoint:p,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}};function Le(l,s){const e=l.left,t=l.right;for(const i of s)if(C(m,c(t),c(i.constraint.start),c(i.constraint.end),c(e)),A(m,c(t))<y.parallelLineThreshold)return i.addReferenceLine(l),!0;return!1}const m=b();class ye extends q{constructor(s,e,t){super(s,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[];if(t.vertices.length<2)return i;const{view:r}=this,n=f(s,e.spatialReference,x,r),a=t.vertices.at(-1);this._checkForSnappingCandidate(T.LastVertex,i,a.leftEdge,a,a.leftEdge.leftVertex,s,n,e);const o=t.vertices[0];return this._checkForSnappingCandidate(T.FirstVertex,i,o.rightEdge,o,o.rightEdge.rightVertex,s,n,e),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle;if(i.component.vertices.length<3)return t;const{view:r}=this,n=f(s,e.spatialReference,x,r),a=i.leftEdge,o=i.rightEdge;if(a?.leftVertex.leftEdge){const h=a.leftVertex.leftEdge;this._checkForSnappingCandidate(T.ExistingEdge,t,h,h.rightVertex,h.leftVertex,s,n,e)}if(o?.rightVertex.rightEdge){const h=o.rightVertex.rightEdge;this._checkForSnappingCandidate(T.ExistingEdge,t,h,h.leftVertex,h.rightVertex,s,n,e)}return t}_checkForSnappingCandidate(s,e,t,i,r,n,a,o){if(!this.edgeExceedsShortLineThreshold(t,o))return;const h=this.view,d=u(i.pos,h,o),p=u(r.pos,h,o);_e(N,p,d,n,o,this._geodesicLengthMeasurementUtils),this._checkForSnappingCandidateAlongProjectedRay(s,e,p,d,N,n,a,o)}_checkForSnappingCandidateAlongProjectedRay(s,e,t,i,r,n,a,o){const{spatialReference:h,pointer:d}=o,p=Q(j,c(n),c(i)),g=ee(r,p)/te(r),w=se(j,c(i),r,g),V=M(I(w[0],w[1],n[2]));if(_(a,f(V,h,x,this.view))>this.squaredProximityThreshold(d)||this.isVertical(V,i,o)||this.isVertical(i,t,o))return;const P=ie(k(),i,r,Math.sign(g));e.push(new re({targetPoint:V,constraint:new oe(i,D(P)),previousVertex:t,otherVertex:i,otherVertexType:ne.CENTER,selfSnappingType:s,isDraped:o.elevationInfo?.mode==="on-the-ground"}))}}function _e(l,s,e,t,i,r){Pe(l,s,e,t,i,r)||Se(l,s,e)}function Pe(l,s,e,t,{spatialReference:i},r){const n=F(s,e,i,i);if(n==null)return!1;const a=F(e,t,i,i);if(a==null)return!1;const o=Math.sign(G.shortestSignedDiff(n,a))*Math.PI*.5,h=z(n+o,"radians","geographic"),d=k(),p=r.geodesicDistance(e,t,i);return p!=null&&(H(d,e,i,J(p,"meters"),h,"geodesic"),ae(l,d,e),!0)}function Se(l,s,e){const t=Q(j,c(e),c(s));he(l,t[1],-t[0],0)}const j=b(),N=k();let Te=class extends q{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[],r=t.vertices.length;if(e.editGeometryOperations.data.type!=="polygon"||r<2)return i;const{view:n}=this,a=t.vertices[0],o=t.vertices[r-1],h=u(a.pos,n,e),d=u(o.pos,n,e);return this._processCandidateProposal(h,d,s,e,i),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2||e.editGeometryOperations.data.type==="polyline"&&(i.index===0||i.index===r.vertices.length-1))return t;const{view:n}=this,a=u(i.leftEdge.leftVertex.pos,n,e),o=u(i.rightEdge.rightVertex.pos,n,e);return this._processCandidateProposal(a,o,s,e,t),t}_processCandidateProposal(s,e,t,i,r){if(!this.exceedsShortLineThreshold(s,e,i))return;const n=de(O,c(s),c(e),.5),a=.5*U(c(s),c(e)),o=le(O,c(t),n,a),h=M(I(o[0],o[1],t[2])),{spatialReference:d,pointer:p}=i,g=f(t,d,x,this.view);if(_(g,f(h,d,x,this.view))<this.squaredProximityThreshold(p)){if(this.isVertical(s,h,i)||this.isVertical(h,e,i))return;r.push(new ce({targetPoint:h,point1:s,point2:e,isDraped:i.elevationInfo?.mode==="on-the-ground"}))}}};const O=b();let E=class extends pe{constructor(l){super(l),this.updating=!1,this._snappers=new ge,this._domain=ue.SELF}initialize(){this._snappers.push(new Ve(this.view,this.options),new we(this.view,this.options,this.geodesicLengthMeasurementUtils),new ye(this.view,this.options,this.geodesicLengthMeasurementUtils),new Te(this.view,this.options))}set options(l){this._set("options",l);for(const s of this._snappers)s.options=l}async fetchCandidates(l,s,e){if(!(s&this._domain&&this.options.effectiveSelfEnabled))return[];const t=[];for(const i of this._snappers.items)for(const r of i.snap(l,e))t.push(r);return fe(l,t),t}};L([$({readOnly:!0})],E.prototype,"updating",void 0),L([$({constructOnly:!0})],E.prototype,"view",void 0),L([$({constructOnly:!0})],E.prototype,"geodesicLengthMeasurementUtils",void 0),L([$()],E.prototype,"options",null),E=L([xe("esri.views.interactive.snapping.SelfSnappingEngine")],E);export{E as SelfSnappingEngine};

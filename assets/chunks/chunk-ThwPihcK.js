import{qC as u,ai as f,qD as p,al as S,qE as y,qF as d,qG as i,qH as x,qI as h,qJ as O,Y as n,qK as N,qL as J,a2 as P,qM as g,qN as q,qO as B,qP as k,qQ as v,qR as b,qS as w,qT as z,gk as T,q3 as D}from"./chunk-CET6Djna.js";import{c as $}from"./chunk-DDfeEOpq.js";import"./chunk-BoJEKryr.js";var c;let l=c=class extends u{constructor(){super(...arguments),this.type="identity"}clone(){return new c}};f([p({IdentityXform:"identity"})],l.prototype,"type",void 0),l=c=f([S("esri.layers.support.rasterTransforms.IdentityTransform")],l);const I={GCSShiftXform:d,IdentityXform:l,PolynomialXform:y};function F(a){if(!a?.type)return null;const e=I[a?.type];if(e){const s=new e;return s.read(a),s}return null}class R{convertVectorFieldData(t){const e=i.fromJSON(t.pixelBlock),s=x(e,t.type);return Promise.resolve(s!=null?s.toJSON():null)}computeStatisticsHistograms(t){const e=i.fromJSON(t.pixelBlock),s=h(e);return Promise.resolve(s)}async decode(t){const e=await O(t.data,t.options);return e&&e.toJSON()}symbolize(t){t.pixelBlock=i.fromJSON(t.pixelBlock),t.extent=t.extent?n.fromJSON(t.extent):null;const e=this.symbolizer.symbolize(t);return Promise.resolve(e!=null?e.toJSON():null)}async updateSymbolizer(t){this.symbolizer=N.fromJSON(t.symbolizerJSON),t.histograms&&this.symbolizer?.rendererJSON.type==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=J(t.rasterFunctionJSON)}async process(t){const e=this.rasterFunction.process({extent:n.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map((s=>s!=null?i.fromJSON(s):null)),primaryPixelSizes:t.primaryPixelSizes?.map((s=>s!=null?P.fromJSON(s):null)),primaryRasterIds:t.primaryRasterIds});return e!=null?e.toJSON():null}stretch(t){const e=this.symbolizer.simpleStretch(i.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(e?.toJSON())}estimateStatisticsHistograms(t){const e=g(i.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=q(i.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel??0,t.useBilinear===!1);return e&&e.forEach(((s,r)=>{e.set(r,s?.toJSON())})),Promise.resolve(e)}clipTile(t){const e=i.fromJSON(t.pixelBlock),s=B({...t,pixelBlock:e});return Promise.resolve(s?.toJSON())}async mosaicAndTransform(t){const e=t.srcPixelBlocks.map((m=>m?new i(m):null)),s=k(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let r,o=s;return t.coefs&&(o=v(s,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(r=b(t.destDimension,t.gcsGrid),o=w(o,t.isUV?"vector-uv":"vector-magdir",r)),{pixelBlock:o?.toJSON(),localNorthDirections:r}}async createFlowMesh(t,e){const s={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:r,indexData:o}=await z(t.meshType,t.simulationSettings,s,e.signal);return{result:{vertexBuffer:r.buffer,indexBuffer:o.buffer},transferList:[r.buffer,o.buffer]}}async getProjectionOffsetGrid(t){const e=n.fromJSON(t.projectedExtent),s=n.fromJSON(t.srcBufferExtent);let r=null;t.datumTransformationSteps?.length&&(r=new $({steps:t.datumTransformationSteps})),await T();const o=t.rasterTransform?F(t.rasterTransform):null;return D({...t,projectedExtent:e,srcBufferExtent:s,datumTransformation:r,rasterTransform:o})}}export{R as default};
